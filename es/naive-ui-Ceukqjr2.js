import { m as ar, u as kd, a as Rd, g as Kr, t as Co } from "./lodash-es-CqrSZx9w.js";
import { r as L, a as fn, w as je, c as T, g as wr, o as vt, b as ut, d as $n, e as ul, i as ke, f as fl, h as ui, j as Ur, F as Pt, C as eo, k as ie, p as We, l as ln, t as ae, m as c, T as hl, n as Tt, q as pl, s as Vt, u as Pd, v as bl, x as Bt, y as Ht, z as gl, A as br, B as fi, D as zd, E as Hi, G as ml, H as Di } from "./vue-DUZbidQX.js";
function $d(e) {
  let t = ".", n = "__", r = "--", o;
  {
    let f = e.blockPrefix;
    f && (t = f), f = e.elementPrefix, f && (n = f), f = e.modifierPrefix, f && (r = f);
  }
  const i = {
    install(f) {
      o = f.c;
      const p = f.context;
      p.bem = {}, p.bem.b = null, p.bem.els = null;
    }
  };
  function l(f) {
    let p, v;
    return {
      before(g) {
        p = g.bem.b, v = g.bem.els, g.bem.els = null;
      },
      after(g) {
        g.bem.b = p, g.bem.els = v;
      },
      $({ context: g, props: y }) {
        return f = typeof f == "string" ? f : f({ context: g, props: y }), g.bem.b = f, `${(y == null ? void 0 : y.bPrefix) || t}${g.bem.b}`;
      }
    };
  }
  function a(f) {
    let p;
    return {
      before(v) {
        p = v.bem.els;
      },
      after(v) {
        v.bem.els = p;
      },
      $({ context: v, props: g }) {
        return f = typeof f == "string" ? f : f({ context: v, props: g }), v.bem.els = f.split(",").map((y) => y.trim()), v.bem.els.map((y) => `${(g == null ? void 0 : g.bPrefix) || t}${v.bem.b}${n}${y}`).join(", ");
      }
    };
  }
  function s(f) {
    return {
      $({ context: p, props: v }) {
        f = typeof f == "string" ? f : f({ context: p, props: v });
        const g = f.split(",").map((w) => w.trim());
        function y(w) {
          return g.map((C) => `&${(v == null ? void 0 : v.bPrefix) || t}${p.bem.b}${w !== void 0 ? `${n}${w}` : ""}${r}${C}`).join(", ");
        }
        const S = p.bem.els;
        return S !== null ? y(S[0]) : y();
      }
    };
  }
  function d(f) {
    return {
      $({ context: p, props: v }) {
        f = typeof f == "string" ? f : f({ context: p, props: v });
        const g = p.bem.els;
        return `&:not(${(v == null ? void 0 : v.bPrefix) || t}${p.bem.b}${g !== null && g.length > 0 ? `${n}${g[0]}` : ""}${r}${f})`;
      }
    };
  }
  return Object.assign(i, {
    cB: (...f) => o(l(f[0]), f[1], f[2]),
    cE: (...f) => o(a(f[0]), f[1], f[2]),
    cM: (...f) => o(s(f[0]), f[1], f[2]),
    cNotM: (...f) => o(d(f[0]), f[1], f[2])
  }), i;
}
function Td(e) {
  let t = 0;
  for (let n = 0; n < e.length; ++n)
    e[n] === "&" && ++t;
  return t;
}
const vl = /\s*,(?![^(]*\))\s*/g, Md = /\s+/g;
function Fd(e, t) {
  const n = [];
  return t.split(vl).forEach((r) => {
    let o = Td(r);
    if (o) {
      if (o === 1) {
        e.forEach((l) => {
          n.push(r.replace("&", l));
        });
        return;
      }
    } else {
      e.forEach((l) => {
        n.push(
          // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
          (l && l + " ") + r
        );
      });
      return;
    }
    let i = [
      r
    ];
    for (; o--; ) {
      const l = [];
      i.forEach((a) => {
        e.forEach((s) => {
          l.push(a.replace("&", s));
        });
      }), i = l;
    }
    i.forEach((l) => n.push(l));
  }), n;
}
function Od(e, t) {
  const n = [];
  return t.split(vl).forEach((r) => {
    e.forEach((o) => {
      n.push((o && o + " ") + r);
    });
  }), n;
}
function Bd(e) {
  let t = [""];
  return e.forEach((n) => {
    n = n && n.trim(), // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    n && (n.includes("&") ? t = Fd(t, n) : t = Od(t, n));
  }), t.join(", ").replace(Md, " ");
}
function ji(e) {
  if (!e)
    return;
  const t = e.parentElement;
  t && t.removeChild(e);
}
function to(e, t) {
  return (t != null ? t : document.head).querySelector(`style[cssr-id="${e}"]`);
}
function Ed(e) {
  const t = document.createElement("style");
  return t.setAttribute("cssr-id", e), t;
}
function $r(e) {
  return e ? /^\s*@(s|m)/.test(e) : !1;
}
const Id = /[A-Z]/g;
function xl(e) {
  return e.replace(Id, (t) => "-" + t.toLowerCase());
}
function _d(e, t = "  ") {
  return typeof e == "object" && e !== null ? ` {
` + Object.entries(e).map((n) => t + `  ${xl(n[0])}: ${n[1]};`).join(`
`) + `
` + t + "}" : `: ${e};`;
}
function Ad(e, t, n) {
  return typeof e == "function" ? e({
    context: t.context,
    props: n
  }) : e;
}
function Wi(e, t, n, r) {
  if (!t)
    return "";
  const o = Ad(t, n, r);
  if (!o)
    return "";
  if (typeof o == "string")
    return `${e} {
${o}
}`;
  const i = Object.keys(o);
  if (i.length === 0)
    return n.config.keepEmptyBlock ? e + ` {
}` : "";
  const l = e ? [
    e + " {"
  ] : [];
  return i.forEach((a) => {
    const s = o[a];
    if (a === "raw") {
      l.push(`
` + s + `
`);
      return;
    }
    a = xl(a), s != null && l.push(`  ${a}${_d(s)}`);
  }), e && l.push("}"), l.join(`
`);
}
function Vo(e, t, n) {
  e && e.forEach((r) => {
    if (Array.isArray(r))
      Vo(r, t, n);
    else if (typeof r == "function") {
      const o = r(t);
      Array.isArray(o) ? Vo(o, t, n) : o && n(o);
    } else r && n(r);
  });
}
function yl(e, t, n, r, o) {
  const i = e.$;
  let l = "";
  if (!i || typeof i == "string")
    $r(i) ? l = i : t.push(i);
  else if (typeof i == "function") {
    const d = i({
      context: r.context,
      props: o
    });
    $r(d) ? l = d : t.push(d);
  } else if (i.before && i.before(r.context), !i.$ || typeof i.$ == "string")
    $r(i.$) ? l = i.$ : t.push(i.$);
  else if (i.$) {
    const d = i.$({
      context: r.context,
      props: o
    });
    $r(d) ? l = d : t.push(d);
  }
  const a = Bd(t), s = Wi(a, e.props, r, o);
  l ? n.push(`${l} {`) : s.length && n.push(s), e.children && Vo(e.children, {
    context: r.context,
    props: o
  }, (d) => {
    if (typeof d == "string") {
      const u = Wi(a, { raw: d }, r, o);
      n.push(u);
    } else
      yl(d, t, n, r, o);
  }), t.pop(), l && n.push("}"), i && i.after && i.after(r.context);
}
function Ld(e, t, n) {
  const r = [];
  return yl(e, [], r, t, n), r.join(`

`);
}
function gr(e) {
  for (var t = 0, n, r = 0, o = e.length; o >= 4; ++r, o -= 4)
    n = e.charCodeAt(r) & 255 | (e.charCodeAt(++r) & 255) << 8 | (e.charCodeAt(++r) & 255) << 16 | (e.charCodeAt(++r) & 255) << 24, n = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16), n ^= /* k >>> r: */
    n >>> 24, t = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  switch (o) {
    case 3:
      t ^= (e.charCodeAt(r + 2) & 255) << 16;
    case 2:
      t ^= (e.charCodeAt(r + 1) & 255) << 8;
    case 1:
      t ^= e.charCodeAt(r) & 255, t = /* Math.imul(h, m): */
      (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  }
  return t ^= t >>> 13, t = /* Math.imul(h, m): */
  (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16), ((t ^ t >>> 15) >>> 0).toString(36);
}
typeof window != "undefined" && (window.__cssrContext = {});
function Hd(e, t, n, r) {
  const { els: o } = t;
  if (n === void 0)
    o.forEach(ji), t.els = [];
  else {
    const i = to(n, r);
    i && o.includes(i) && (ji(i), t.els = o.filter((l) => l !== i));
  }
}
function Ni(e, t) {
  e.push(t);
}
function Dd(e, t, n, r, o, i, l, a, s) {
  let d;
  if (n === void 0 && (d = t.render(r), n = gr(d)), s) {
    s.adapter(n, d != null ? d : t.render(r));
    return;
  }
  a === void 0 && (a = document.head);
  const u = to(n, a);
  if (u !== null && !i)
    return u;
  const h = u != null ? u : Ed(n);
  if (d === void 0 && (d = t.render(r)), h.textContent = d, u !== null)
    return u;
  if (l) {
    const b = a.querySelector(`meta[name="${l}"]`);
    if (b)
      return a.insertBefore(h, b), Ni(t.els, h), h;
  }
  return o ? a.insertBefore(h, a.querySelector("style, link")) : a.appendChild(h), Ni(t.els, h), h;
}
function jd(e) {
  return Ld(this, this.instance, e);
}
function Wd(e = {}) {
  const { id: t, ssr: n, props: r, head: o = !1, force: i = !1, anchorMetaName: l, parent: a } = e;
  return Dd(this.instance, this, t, r, o, i, l, a, n);
}
function Nd(e = {}) {
  const { id: t, parent: n } = e;
  Hd(this.instance, this, t, n);
}
const Tr = function(e, t, n, r) {
  return {
    instance: e,
    $: t,
    props: n,
    children: r,
    els: [],
    render: jd,
    mount: Wd,
    unmount: Nd
  };
}, Vd = function(e, t, n, r) {
  return Array.isArray(t) ? Tr(e, { $: null }, null, t) : Array.isArray(n) ? Tr(e, t, null, n) : Array.isArray(r) ? Tr(e, t, n, r) : Tr(e, t, n, null);
};
function wl(e = {}) {
  const t = {
    c: (...n) => Vd(t, ...n),
    use: (n, ...r) => n.install(t, ...r),
    find: to,
    context: {},
    config: e
  };
  return t;
}
function Kd(e, t) {
  if (e === void 0)
    return !1;
  if (t) {
    const { context: { ids: n } } = t;
    return n.has(e);
  }
  return to(e) !== null;
}
const Ud = "n", mr = `.${Ud}-`, qd = "__", Gd = "--", Cl = wl(), Sl = $d({
  blockPrefix: mr,
  elementPrefix: qd,
  modifierPrefix: Gd
});
Cl.use(Sl);
const {
  c: B,
  find: av
} = Cl, {
  cB: R,
  cE: A,
  cM: _,
  cNotM: Je
} = Sl;
function no(e) {
  return B(({
    props: {
      bPrefix: t
    }
  }) => `${t || mr}modal, ${t || mr}drawer`, [e]);
}
function hi(e) {
  return B(({
    props: {
      bPrefix: t
    }
  }) => `${t || mr}popover`, [e]);
}
function kl(e) {
  return B(({
    props: {
      bPrefix: t
    }
  }) => `&${t || mr}modal`, e);
}
const Xd = (...e) => B(">", [R(...e)]);
function J(e, t) {
  return e + (t === "default" ? "" : t.replace(/^[a-z]/, (n) => n.toUpperCase()));
}
let qr = [];
const Rl = /* @__PURE__ */ new WeakMap();
function Yd() {
  qr.forEach((e) => e(...Rl.get(e))), qr = [];
}
function Gr(e, ...t) {
  Rl.set(e, t), !qr.includes(e) && qr.push(e) === 1 && requestAnimationFrame(Yd);
}
function Lt(e, t) {
  let { target: n } = e;
  for (; n; ) {
    if (n.dataset && n.dataset[t] !== void 0)
      return !0;
    n = n.parentElement;
  }
  return !1;
}
function Dn(e) {
  return e.composedPath()[0] || null;
}
function Nt(e) {
  return typeof e == "string" ? e.endsWith("px") ? Number(e.slice(0, e.length - 2)) : Number(e) : e;
}
function wt(e) {
  if (e != null)
    return typeof e == "number" ? `${e}px` : e.endsWith("px") ? e : `${e}px`;
}
function mt(e, t) {
  const n = e.trim().split(/\s+/g), r = {
    top: n[0]
  };
  switch (n.length) {
    case 1:
      r.right = n[0], r.bottom = n[0], r.left = n[0];
      break;
    case 2:
      r.right = n[1], r.left = n[1], r.bottom = n[0];
      break;
    case 3:
      r.right = n[1], r.bottom = n[2], r.left = n[1];
      break;
    case 4:
      r.right = n[1], r.bottom = n[2], r.left = n[3];
      break;
    default:
      throw new Error("[seemly/getMargin]:" + e + " is not a valid value.");
  }
  return t === void 0 ? r : r[t];
}
function Zd(e, t) {
  const [n, r] = e.split(" ");
  return {
    row: n,
    col: r || n
  };
}
const Vi = {
  black: "#000",
  silver: "#C0C0C0",
  gray: "#808080",
  white: "#FFF",
  maroon: "#800000",
  red: "#F00",
  purple: "#800080",
  fuchsia: "#F0F",
  green: "#008000",
  lime: "#0F0",
  olive: "#808000",
  yellow: "#FF0",
  navy: "#000080",
  blue: "#00F",
  teal: "#008080",
  aqua: "#0FF",
  transparent: "#0000"
}, Kn = "^\\s*", Un = "\\s*$", mn = "\\s*((\\.\\d+)|(\\d+(\\.\\d*)?))\\s*", vn = "([0-9A-Fa-f])", xn = "([0-9A-Fa-f]{2})", Jd = new RegExp(`${Kn}rgb\\s*\\(${mn},${mn},${mn}\\)${Un}`), Qd = new RegExp(`${Kn}rgba\\s*\\(${mn},${mn},${mn},${mn}\\)${Un}`), ec = new RegExp(`${Kn}#${vn}${vn}${vn}${Un}`), tc = new RegExp(`${Kn}#${xn}${xn}${xn}${Un}`), nc = new RegExp(`${Kn}#${vn}${vn}${vn}${vn}${Un}`), rc = new RegExp(`${Kn}#${xn}${xn}${xn}${xn}${Un}`);
function Ot(e) {
  return parseInt(e, 16);
}
function Sn(e) {
  try {
    let t;
    if (t = tc.exec(e))
      return [Ot(t[1]), Ot(t[2]), Ot(t[3]), 1];
    if (t = Jd.exec(e))
      return [Rt(t[1]), Rt(t[5]), Rt(t[9]), 1];
    if (t = Qd.exec(e))
      return [
        Rt(t[1]),
        Rt(t[5]),
        Rt(t[9]),
        dr(t[13])
      ];
    if (t = ec.exec(e))
      return [
        Ot(t[1] + t[1]),
        Ot(t[2] + t[2]),
        Ot(t[3] + t[3]),
        1
      ];
    if (t = rc.exec(e))
      return [
        Ot(t[1]),
        Ot(t[2]),
        Ot(t[3]),
        dr(Ot(t[4]) / 255)
      ];
    if (t = nc.exec(e))
      return [
        Ot(t[1] + t[1]),
        Ot(t[2] + t[2]),
        Ot(t[3] + t[3]),
        dr(Ot(t[4] + t[4]) / 255)
      ];
    if (e in Vi)
      return Sn(Vi[e]);
    throw new Error(`[seemly/rgba]: Invalid color value ${e}.`);
  } catch (t) {
    throw t;
  }
}
function oc(e) {
  return e > 1 ? 1 : e < 0 ? 0 : e;
}
function Ko(e, t, n, r) {
  return `rgba(${Rt(e)}, ${Rt(t)}, ${Rt(n)}, ${oc(r)})`;
}
function So(e, t, n, r, o) {
  return Rt((e * t * (1 - r) + n * r) / o);
}
function Ke(e, t) {
  Array.isArray(e) || (e = Sn(e)), Array.isArray(t) || (t = Sn(t));
  const n = e[3], r = t[3], o = dr(n + r - n * r);
  return Ko(So(e[0], n, t[0], r, o), So(e[1], n, t[1], r, o), So(e[2], n, t[2], r, o), o);
}
function Oe(e, t) {
  const [n, r, o, i = 1] = Array.isArray(e) ? e : Sn(e);
  return t.alpha ? Ko(n, r, o, t.alpha) : Ko(n, r, o, i);
}
function Mr(e, t) {
  const [n, r, o, i = 1] = Array.isArray(e) ? e : Sn(e), { lightness: l = 1, alpha: a = 1 } = t;
  return ic([n * l, r * l, o * l, i * a]);
}
function dr(e) {
  const t = Math.round(Number(e) * 100) / 100;
  return t > 1 ? 1 : t < 0 ? 0 : t;
}
function Rt(e) {
  const t = Math.round(Number(e));
  return t > 255 ? 255 : t < 0 ? 0 : t;
}
function ic(e) {
  const [t, n, r] = e;
  return 3 in e ? `rgba(${Rt(t)}, ${Rt(n)}, ${Rt(r)}, ${dr(e[3])})` : `rgba(${Rt(t)}, ${Rt(n)}, ${Rt(r)}, 1)`;
}
function jn(e = 8) {
  return Math.random().toString(16).slice(2, 2 + e);
}
function ac(e, t) {
  const n = [];
  for (let r = 0; r < e; ++r)
    n.push(t);
  return n;
}
function Wr(e) {
  return e.composedPath()[0];
}
const lc = {
  mousemoveoutside: /* @__PURE__ */ new WeakMap(),
  clickoutside: /* @__PURE__ */ new WeakMap()
};
function sc(e, t, n) {
  if (e === "mousemoveoutside") {
    const r = (o) => {
      t.contains(Wr(o)) || n(o);
    };
    return {
      mousemove: r,
      touchstart: r
    };
  } else if (e === "clickoutside") {
    let r = !1;
    const o = (l) => {
      r = !t.contains(Wr(l));
    }, i = (l) => {
      r && (t.contains(Wr(l)) || n(l));
    };
    return {
      mousedown: o,
      mouseup: i,
      touchstart: o,
      touchend: i
    };
  }
  return console.error(
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    `[evtd/create-trap-handler]: name \`${e}\` is invalid. This could be a bug of evtd.`
  ), {};
}
function Pl(e, t, n) {
  const r = lc[e];
  let o = r.get(t);
  o === void 0 && r.set(t, o = /* @__PURE__ */ new WeakMap());
  let i = o.get(n);
  return i === void 0 && o.set(n, i = sc(e, t, n)), i;
}
function dc(e, t, n, r) {
  if (e === "mousemoveoutside" || e === "clickoutside") {
    const o = Pl(e, t, n);
    return Object.keys(o).forEach((i) => {
      De(i, document, o[i], r);
    }), !0;
  }
  return !1;
}
function cc(e, t, n, r) {
  if (e === "mousemoveoutside" || e === "clickoutside") {
    const o = Pl(e, t, n);
    return Object.keys(o).forEach((i) => {
      He(i, document, o[i], r);
    }), !0;
  }
  return !1;
}
function uc() {
  if (typeof window == "undefined")
    return {
      on: () => {
      },
      off: () => {
      }
    };
  const e = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  function n() {
    e.set(this, !0);
  }
  function r() {
    e.set(this, !0), t.set(this, !0);
  }
  function o(x, z, $) {
    const M = x[z];
    return x[z] = function() {
      return $.apply(x, arguments), M.apply(x, arguments);
    }, x;
  }
  function i(x, z) {
    x[z] = Event.prototype[z];
  }
  const l = /* @__PURE__ */ new WeakMap(), a = Object.getOwnPropertyDescriptor(Event.prototype, "currentTarget");
  function s() {
    var x;
    return (x = l.get(this)) !== null && x !== void 0 ? x : null;
  }
  function d(x, z) {
    a !== void 0 && Object.defineProperty(x, "currentTarget", {
      configurable: !0,
      enumerable: !0,
      get: z != null ? z : a.get
    });
  }
  const u = {
    bubble: {},
    capture: {}
  }, h = {};
  function b() {
    const x = function(z) {
      const { type: $, eventPhase: M, bubbles: V } = z, O = Wr(z);
      if (M === 2)
        return;
      const E = M === 1 ? "capture" : "bubble";
      let I = O;
      const F = [];
      for (; I === null && (I = window), F.push(I), I !== window; )
        I = I.parentNode || null;
      const N = u.capture[$], W = u.bubble[$];
      if (o(z, "stopPropagation", n), o(z, "stopImmediatePropagation", r), d(z, s), E === "capture") {
        if (N === void 0)
          return;
        for (let X = F.length - 1; X >= 0 && !e.has(z); --X) {
          const re = F[X], Q = N.get(re);
          if (Q !== void 0) {
            l.set(z, re);
            for (const G of Q) {
              if (t.has(z))
                break;
              G(z);
            }
          }
          if (X === 0 && !V && W !== void 0) {
            const G = W.get(re);
            if (G !== void 0)
              for (const j of G) {
                if (t.has(z))
                  break;
                j(z);
              }
          }
        }
      } else if (E === "bubble") {
        if (W === void 0)
          return;
        for (let X = 0; X < F.length && !e.has(z); ++X) {
          const re = F[X], Q = W.get(re);
          if (Q !== void 0) {
            l.set(z, re);
            for (const G of Q) {
              if (t.has(z))
                break;
              G(z);
            }
          }
        }
      }
      i(z, "stopPropagation"), i(z, "stopImmediatePropagation"), d(z);
    };
    return x.displayName = "evtdUnifiedHandler", x;
  }
  function m() {
    const x = function(z) {
      const { type: $, eventPhase: M } = z;
      if (M !== 2)
        return;
      const V = h[$];
      V !== void 0 && V.forEach((O) => O(z));
    };
    return x.displayName = "evtdUnifiedWindowEventHandler", x;
  }
  const f = b(), p = m();
  function v(x, z) {
    const $ = u[x];
    return $[z] === void 0 && ($[z] = /* @__PURE__ */ new Map(), window.addEventListener(z, f, x === "capture")), $[z];
  }
  function g(x) {
    return h[x] === void 0 && (h[x] = /* @__PURE__ */ new Set(), window.addEventListener(x, p)), h[x];
  }
  function y(x, z) {
    let $ = x.get(z);
    return $ === void 0 && x.set(z, $ = /* @__PURE__ */ new Set()), $;
  }
  function S(x, z, $, M) {
    const V = u[z][$];
    if (V !== void 0) {
      const O = V.get(x);
      if (O !== void 0 && O.has(M))
        return !0;
    }
    return !1;
  }
  function w(x, z) {
    const $ = h[x];
    return !!($ !== void 0 && $.has(z));
  }
  function C(x, z, $, M) {
    let V;
    if (typeof M == "object" && M.once === !0 ? V = (N) => {
      k(x, z, V, M), $(N);
    } : V = $, dc(x, z, V, M))
      return;
    const E = M === !0 || typeof M == "object" && M.capture === !0 ? "capture" : "bubble", I = v(E, x), F = y(I, z);
    if (F.has(V) || F.add(V), z === window) {
      const N = g(x);
      N.has(V) || N.add(V);
    }
  }
  function k(x, z, $, M) {
    if (cc(x, z, $, M))
      return;
    const O = M === !0 || typeof M == "object" && M.capture === !0, E = O ? "capture" : "bubble", I = v(E, x), F = y(I, z);
    if (z === window && !S(z, O ? "bubble" : "capture", x, $) && w(x, $)) {
      const W = h[x];
      W.delete($), W.size === 0 && (window.removeEventListener(x, p), h[x] = void 0);
    }
    F.has($) && F.delete($), F.size === 0 && I.delete(z), I.size === 0 && (window.removeEventListener(x, f, E === "capture"), u[E][x] = void 0);
  }
  return {
    on: C,
    off: k
  };
}
const { on: De, off: He } = uc();
function fc(e) {
  const t = L(!!e.value);
  if (t.value)
    return fn(t);
  const n = je(e, (r) => {
    r && (t.value = !0, n());
  });
  return fn(t);
}
function Ue(e) {
  const t = T(e), n = L(t.value);
  return je(t, (r) => {
    n.value = r;
  }), typeof e == "function" ? n : {
    __v_isRef: !0,
    get value() {
      return n.value;
    },
    set value(r) {
      e.set(r);
    }
  };
}
function pi() {
  return wr() !== null;
}
const bi = typeof window != "undefined";
let An, cr;
const hc = () => {
  var e, t;
  An = bi ? (t = (e = document) === null || e === void 0 ? void 0 : e.fonts) === null || t === void 0 ? void 0 : t.ready : void 0, cr = !1, An !== void 0 ? An.then(() => {
    cr = !0;
  }) : cr = !0;
};
hc();
function zl(e) {
  if (cr)
    return;
  let t = !1;
  vt(() => {
    cr || An == null || An.then(() => {
      t || e();
    });
  }), ut(() => {
    t = !0;
  });
}
const lr = L(null);
function Ki(e) {
  if (e.clientX > 0 || e.clientY > 0)
    lr.value = {
      x: e.clientX,
      y: e.clientY
    };
  else {
    const { target: t } = e;
    if (t instanceof Element) {
      const { left: n, top: r, width: o, height: i } = t.getBoundingClientRect();
      n > 0 || r > 0 ? lr.value = {
        x: n + o / 2,
        y: r + i / 2
      } : lr.value = { x: 0, y: 0 };
    } else
      lr.value = null;
  }
}
let Fr = 0, Ui = !0;
function pc() {
  if (!bi)
    return fn(L(null));
  Fr === 0 && De("click", document, Ki, !0);
  const e = () => {
    Fr += 1;
  };
  return Ui && (Ui = pi()) ? ($n(e), ut(() => {
    Fr -= 1, Fr === 0 && He("click", document, Ki, !0);
  })) : e(), fn(lr);
}
const bc = L(void 0);
let Or = 0;
function qi() {
  bc.value = Date.now();
}
let Gi = !0;
function gc(e) {
  if (!bi)
    return fn(L(!1));
  const t = L(!1);
  let n = null;
  function r() {
    n !== null && window.clearTimeout(n);
  }
  function o() {
    r(), t.value = !0, n = window.setTimeout(() => {
      t.value = !1;
    }, e);
  }
  Or === 0 && De("click", window, qi, !0);
  const i = () => {
    Or += 1, De("click", window, o, !0);
  };
  return Gi && (Gi = pi()) ? ($n(i), ut(() => {
    Or -= 1, Or === 0 && He("click", window, qi, !0), He("click", window, o, !0), r();
  })) : i(), fn(t);
}
function zt(e, t) {
  return je(e, (n) => {
    n !== void 0 && (t.value = n);
  }), T(() => e.value === void 0 ? t.value : e.value);
}
function Cr() {
  const e = L(!1);
  return vt(() => {
    e.value = !0;
  }), fn(e);
}
function Xr(e, t) {
  return T(() => {
    for (const n of t)
      if (e[n] !== void 0)
        return e[n];
    return e[t[t.length - 1]];
  });
}
const mc = (typeof window == "undefined" ? !1 : /iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
!window.MSStream;
function vc() {
  return mc;
}
function xc(e = {}, t) {
  const n = ul({
    ctrl: !1,
    command: !1,
    win: !1,
    shift: !1,
    tab: !1
  }), { keydown: r, keyup: o } = e, i = (s) => {
    switch (s.key) {
      case "Control":
        n.ctrl = !0;
        break;
      case "Meta":
        n.command = !0, n.win = !0;
        break;
      case "Shift":
        n.shift = !0;
        break;
      case "Tab":
        n.tab = !0;
        break;
    }
    r !== void 0 && Object.keys(r).forEach((d) => {
      if (d !== s.key)
        return;
      const u = r[d];
      if (typeof u == "function")
        u(s);
      else {
        const { stop: h = !1, prevent: b = !1 } = u;
        h && s.stopPropagation(), b && s.preventDefault(), u.handler(s);
      }
    });
  }, l = (s) => {
    switch (s.key) {
      case "Control":
        n.ctrl = !1;
        break;
      case "Meta":
        n.command = !1, n.win = !1;
        break;
      case "Shift":
        n.shift = !1;
        break;
      case "Tab":
        n.tab = !1;
        break;
    }
    o !== void 0 && Object.keys(o).forEach((d) => {
      if (d !== s.key)
        return;
      const u = o[d];
      if (typeof u == "function")
        u(s);
      else {
        const { stop: h = !1, prevent: b = !1 } = u;
        h && s.stopPropagation(), b && s.preventDefault(), u.handler(s);
      }
    });
  }, a = () => {
    (t === void 0 || t.value) && (De("keydown", document, i), De("keyup", document, l)), t !== void 0 && je(t, (s) => {
      s ? (De("keydown", document, i), De("keyup", document, l)) : (He("keydown", document, i), He("keyup", document, l));
    });
  };
  return pi() ? ($n(a), ut(() => {
    (t === void 0 || t.value) && (He("keydown", document, i), He("keyup", document, l));
  })) : a(), fn(n);
}
const gi = "n-internal-select-menu", $l = "n-internal-select-menu-body", ro = "n-drawer-body", oo = "n-modal-body", yc = "n-modal-provider", Tl = "n-modal", Sr = "n-popover-body", Ml = "__disabled__";
function Qt(e) {
  const t = ke(oo, null), n = ke(ro, null), r = ke(Sr, null), o = ke($l, null), i = L();
  if (typeof document != "undefined") {
    i.value = document.fullscreenElement;
    const l = () => {
      i.value = document.fullscreenElement;
    };
    vt(() => {
      De("fullscreenchange", document, l);
    }), ut(() => {
      He("fullscreenchange", document, l);
    });
  }
  return Ue(() => {
    var l;
    const {
      to: a
    } = e;
    return a !== void 0 ? a === !1 ? Ml : a === !0 ? i.value || "body" : a : t != null && t.value ? (l = t.value.$el) !== null && l !== void 0 ? l : t.value : n != null && n.value ? n.value : r != null && r.value ? r.value : o != null && o.value ? o.value : a != null ? a : i.value || "body";
  });
}
Qt.tdkey = Ml;
Qt.propTo = {
  type: [String, Object, Boolean],
  default: void 0
};
function wc(e, t, n) {
  var r;
  const o = ke(e, null);
  if (o === null) return;
  const i = (r = wr()) === null || r === void 0 ? void 0 : r.proxy;
  je(n, l), l(n.value), ut(() => {
    l(void 0, n.value);
  });
  function l(d, u) {
    if (!o) return;
    const h = o[t];
    u !== void 0 && a(h, u), d !== void 0 && s(h, d);
  }
  function a(d, u) {
    d[u] || (d[u] = []), d[u].splice(d[u].findIndex((h) => h === i), 1);
  }
  function s(d, u) {
    d[u] || (d[u] = []), ~d[u].findIndex((h) => h === i) || d[u].push(i);
  }
}
function Cc(e, t, n) {
  const r = L(e.value);
  let o = null;
  return je(e, (i) => {
    o !== null && window.clearTimeout(o), i === !0 ? n && !n.value ? r.value = !0 : o = window.setTimeout(() => {
      r.value = !0;
    }, t) : r.value = !1;
  }), r;
}
const qn = typeof document != "undefined" && typeof window != "undefined", mi = L(!1);
function Xi() {
  mi.value = !0;
}
function Yi() {
  mi.value = !1;
}
let or = 0;
function Sc() {
  return qn && ($n(() => {
    or || (window.addEventListener("compositionstart", Xi), window.addEventListener("compositionend", Yi)), or++;
  }), ut(() => {
    or <= 1 ? (window.removeEventListener("compositionstart", Xi), window.removeEventListener("compositionend", Yi), or = 0) : or--;
  })), mi;
}
let On = 0, Zi = "", Ji = "", Qi = "", ea = "";
const ta = L("0px");
function kc(e) {
  if (typeof document == "undefined") return;
  const t = document.documentElement;
  let n, r = !1;
  const o = () => {
    t.style.marginRight = Zi, t.style.overflow = Ji, t.style.overflowX = Qi, t.style.overflowY = ea, ta.value = "0px";
  };
  vt(() => {
    n = je(e, (i) => {
      if (i) {
        if (!On) {
          const l = window.innerWidth - t.offsetWidth;
          l > 0 && (Zi = t.style.marginRight, t.style.marginRight = `${l}px`, ta.value = `${l}px`), Ji = t.style.overflow, Qi = t.style.overflowX, ea = t.style.overflowY, t.style.overflow = "hidden", t.style.overflowX = "hidden", t.style.overflowY = "hidden";
        }
        r = !0, On++;
      } else
        On--, On || o(), r = !1;
    }, {
      immediate: !0
    });
  }), ut(() => {
    n == null || n(), r && (On--, On || o(), r = !1);
  });
}
function Rc(e) {
  const t = {
    isDeactivated: !1
  };
  let n = !1;
  return fl(() => {
    if (t.isDeactivated = !1, !n) {
      n = !0;
      return;
    }
    e();
  }), ui(() => {
    t.isDeactivated = !0, n || (n = !0);
  }), t;
}
function Uo(e, t, n = "default") {
  const r = t[n];
  if (r === void 0)
    throw new Error(`[vueuc/${e}]: slot[${n}] is empty.`);
  return r();
}
function qo(e, t = !0, n = []) {
  return e.forEach((r) => {
    if (r !== null) {
      if (typeof r != "object") {
        (typeof r == "string" || typeof r == "number") && n.push(Ur(String(r)));
        return;
      }
      if (Array.isArray(r)) {
        qo(r, t, n);
        return;
      }
      if (r.type === Pt) {
        if (r.children === null)
          return;
        Array.isArray(r.children) && qo(r.children, t, n);
      } else r.type !== eo && n.push(r);
    }
  }), n;
}
function na(e, t, n = "default") {
  const r = t[n];
  if (r === void 0)
    throw new Error(`[vueuc/${e}]: slot[${n}] is empty.`);
  const o = qo(r());
  if (o.length === 1)
    return o[0];
  throw new Error(`[vueuc/${e}]: slot[${n}] should have exactly one child.`);
}
let cn = null;
function Fl() {
  if (cn === null && (cn = document.getElementById("v-binder-view-measurer"), cn === null)) {
    cn = document.createElement("div"), cn.id = "v-binder-view-measurer";
    const { style: e } = cn;
    e.position = "fixed", e.left = "0", e.right = "0", e.top = "0", e.bottom = "0", e.pointerEvents = "none", e.visibility = "hidden", document.body.appendChild(cn);
  }
  return cn.getBoundingClientRect();
}
function Pc(e, t) {
  const n = Fl();
  return {
    top: t,
    left: e,
    height: 0,
    width: 0,
    right: n.width - e,
    bottom: n.height - t
  };
}
function ko(e) {
  const t = e.getBoundingClientRect(), n = Fl();
  return {
    left: t.left - n.left,
    top: t.top - n.top,
    bottom: n.height + n.top - t.bottom,
    right: n.width + n.left - t.right,
    width: t.width,
    height: t.height
  };
}
function zc(e) {
  return e.nodeType === 9 ? null : e.parentNode;
}
function Ol(e) {
  if (e === null)
    return null;
  const t = zc(e);
  if (t === null)
    return null;
  if (t.nodeType === 9)
    return document;
  if (t.nodeType === 1) {
    const { overflow: n, overflowX: r, overflowY: o } = getComputedStyle(t);
    if (/(auto|scroll|overlay)/.test(n + o + r))
      return t;
  }
  return Ol(t);
}
const vi = ie({
  name: "Binder",
  props: {
    syncTargetWithParent: Boolean,
    syncTarget: {
      type: Boolean,
      default: !0
    }
  },
  setup(e) {
    var t;
    We("VBinder", (t = wr()) === null || t === void 0 ? void 0 : t.proxy);
    const n = ke("VBinder", null), r = L(null), o = (g) => {
      r.value = g, n && e.syncTargetWithParent && n.setTargetRef(g);
    };
    let i = [];
    const l = () => {
      let g = r.value;
      for (; g = Ol(g), g !== null; )
        i.push(g);
      for (const y of i)
        De("scroll", y, h, !0);
    }, a = () => {
      for (const g of i)
        He("scroll", g, h, !0);
      i = [];
    }, s = /* @__PURE__ */ new Set(), d = (g) => {
      s.size === 0 && l(), s.has(g) || s.add(g);
    }, u = (g) => {
      s.has(g) && s.delete(g), s.size === 0 && a();
    }, h = () => {
      Gr(b);
    }, b = () => {
      s.forEach((g) => g());
    }, m = /* @__PURE__ */ new Set(), f = (g) => {
      m.size === 0 && De("resize", window, v), m.has(g) || m.add(g);
    }, p = (g) => {
      m.has(g) && m.delete(g), m.size === 0 && He("resize", window, v);
    }, v = () => {
      m.forEach((g) => g());
    };
    return ut(() => {
      He("resize", window, v), a();
    }), {
      targetRef: r,
      setTargetRef: o,
      addScrollListener: d,
      removeScrollListener: u,
      addResizeListener: f,
      removeResizeListener: p
    };
  },
  render() {
    return Uo("binder", this.$slots);
  }
}), xi = ie({
  name: "Target",
  setup() {
    const { setTargetRef: e, syncTarget: t } = ke("VBinder");
    return {
      syncTarget: t,
      setTargetDirective: {
        mounted: e,
        updated: e
      }
    };
  },
  render() {
    const { syncTarget: e, setTargetDirective: t } = this;
    return e ? ln(na("follower", this.$slots), [
      [t]
    ]) : na("follower", this.$slots);
  }
}), Bn = "@@mmoContext", $c = {
  mounted(e, { value: t }) {
    e[Bn] = {
      handler: void 0
    }, typeof t == "function" && (e[Bn].handler = t, De("mousemoveoutside", e, t));
  },
  updated(e, { value: t }) {
    const n = e[Bn];
    typeof t == "function" ? n.handler ? n.handler !== t && (He("mousemoveoutside", e, n.handler), n.handler = t, De("mousemoveoutside", e, t)) : (e[Bn].handler = t, De("mousemoveoutside", e, t)) : n.handler && (He("mousemoveoutside", e, n.handler), n.handler = void 0);
  },
  unmounted(e) {
    const { handler: t } = e[Bn];
    t && He("mousemoveoutside", e, t), e[Bn].handler = void 0;
  }
}, En = "@@coContext", vr = {
  mounted(e, { value: t, modifiers: n }) {
    e[En] = {
      handler: void 0
    }, typeof t == "function" && (e[En].handler = t, De("clickoutside", e, t, {
      capture: n.capture
    }));
  },
  updated(e, { value: t, modifiers: n }) {
    const r = e[En];
    typeof t == "function" ? r.handler ? r.handler !== t && (He("clickoutside", e, r.handler, {
      capture: n.capture
    }), r.handler = t, De("clickoutside", e, t, {
      capture: n.capture
    })) : (e[En].handler = t, De("clickoutside", e, t, {
      capture: n.capture
    })) : r.handler && (He("clickoutside", e, r.handler, {
      capture: n.capture
    }), r.handler = void 0);
  },
  unmounted(e, { modifiers: t }) {
    const { handler: n } = e[En];
    n && He("clickoutside", e, n, {
      capture: t.capture
    }), e[En].handler = void 0;
  }
};
function Tc(e, t) {
  console.error(`[vdirs/${e}]: ${t}`);
}
class Mc {
  constructor() {
    this.elementZIndex = /* @__PURE__ */ new Map(), this.nextZIndex = 2e3;
  }
  get elementCount() {
    return this.elementZIndex.size;
  }
  ensureZIndex(t, n) {
    const { elementZIndex: r } = this;
    if (n !== void 0) {
      t.style.zIndex = `${n}`, r.delete(t);
      return;
    }
    const { nextZIndex: o } = this;
    r.has(t) && r.get(t) + 1 === this.nextZIndex || (t.style.zIndex = `${o}`, r.set(t, o), this.nextZIndex = o + 1, this.squashState());
  }
  unregister(t, n) {
    const { elementZIndex: r } = this;
    r.has(t) ? r.delete(t) : n === void 0 && Tc("z-index-manager/unregister-element", "Element not found when unregistering."), this.squashState();
  }
  squashState() {
    const { elementCount: t } = this;
    t || (this.nextZIndex = 2e3), this.nextZIndex - t > 2500 && this.rearrange();
  }
  rearrange() {
    const t = Array.from(this.elementZIndex.entries());
    t.sort((n, r) => n[1] - r[1]), this.nextZIndex = 2e3, t.forEach((n) => {
      const r = n[0], o = this.nextZIndex++;
      `${o}` !== r.style.zIndex && (r.style.zIndex = `${o}`);
    });
  }
}
const Ro = new Mc(), In = "@@ziContext", yi = {
  mounted(e, t) {
    const { value: n = {} } = t, { zIndex: r, enabled: o } = n;
    e[In] = {
      enabled: !!o,
      initialized: !1
    }, o && (Ro.ensureZIndex(e, r), e[In].initialized = !0);
  },
  updated(e, t) {
    const { value: n = {} } = t, { zIndex: r, enabled: o } = n, i = e[In].enabled;
    o && !i && (Ro.ensureZIndex(e, r), e[In].initialized = !0), e[In].enabled = !!o;
  },
  unmounted(e, t) {
    if (!e[In].initialized)
      return;
    const { value: n = {} } = t, { zIndex: r } = n;
    Ro.unregister(e, r);
  }
}, Fc = "@css-render/vue3-ssr";
function Oc(e, t) {
  return `<style cssr-id="${e}">
${t}
</style>`;
}
function Bc(e, t, n) {
  const { styles: r, ids: o } = n;
  o.has(e) || r !== null && (o.add(e), r.push(Oc(e, t)));
}
const Ec = typeof document != "undefined";
function hn() {
  if (Ec)
    return;
  const e = ke(Fc, null);
  if (e !== null)
    return {
      adapter: (t, n) => Bc(t, n, e),
      context: e
    };
}
function ra(e, t) {
  console.error(`[vueuc/${e}]: ${t}`);
}
const { c: Jt } = wl(), io = "vueuc-style";
function oa(e) {
  return e & -e;
}
class Bl {
  /**
   * @param l length of the array
   * @param min min value of the array
   */
  constructor(t, n) {
    this.l = t, this.min = n;
    const r = new Array(t + 1);
    for (let o = 0; o < t + 1; ++o)
      r[o] = 0;
    this.ft = r;
  }
  /**
   * Add arr[i] by n, start from 0
   * @param i the index of the element to be added
   * @param n the value to be added
   */
  add(t, n) {
    if (n === 0)
      return;
    const { l: r, ft: o } = this;
    for (t += 1; t <= r; )
      o[t] += n, t += oa(t);
  }
  /**
   * Get the value of index i
   * @param i index
   * @returns value of the index
   */
  get(t) {
    return this.sum(t + 1) - this.sum(t);
  }
  /**
   * Get the sum of first i elements
   * @param i count of head elements to be added
   * @returns the sum of first i elements
   */
  sum(t) {
    if (t === void 0 && (t = this.l), t <= 0)
      return 0;
    const { ft: n, min: r, l: o } = this;
    if (t > o)
      throw new Error("[FinweckTree.sum]: `i` is larger than length.");
    let i = t * r;
    for (; t > 0; )
      i += n[t], t -= oa(t);
    return i;
  }
  /**
   * Get the largest count of head elements whose sum are <= threshold
   * @param threshold
   * @returns the largest count of head elements whose sum are <= threshold
   */
  getBound(t) {
    let n = 0, r = this.l;
    for (; r > n; ) {
      const o = Math.floor((n + r) / 2), i = this.sum(o);
      if (i > t) {
        r = o;
        continue;
      } else if (i < t) {
        if (n === o)
          return this.sum(n + 1) <= t ? n + 1 : o;
        n = o;
      } else
        return o;
    }
    return n;
  }
}
function ia(e) {
  return typeof e == "string" ? document.querySelector(e) : e();
}
const El = ie({
  name: "LazyTeleport",
  props: {
    to: {
      type: [String, Object],
      default: void 0
    },
    disabled: Boolean,
    show: {
      type: Boolean,
      required: !0
    }
  },
  setup(e) {
    return {
      showTeleport: fc(ae(e, "show")),
      mergedTo: T(() => {
        const { to: t } = e;
        return t != null ? t : "body";
      })
    };
  },
  render() {
    return this.showTeleport ? this.disabled ? Uo("lazy-teleport", this.$slots) : c(hl, {
      disabled: this.disabled,
      to: this.mergedTo
    }, Uo("lazy-teleport", this.$slots)) : null;
  }
}), Br = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
}, aa = {
  start: "end",
  center: "center",
  end: "start"
}, Po = {
  top: "height",
  bottom: "height",
  left: "width",
  right: "width"
}, Ic = {
  "bottom-start": "top left",
  bottom: "top center",
  "bottom-end": "top right",
  "top-start": "bottom left",
  top: "bottom center",
  "top-end": "bottom right",
  "right-start": "top left",
  right: "center left",
  "right-end": "bottom left",
  "left-start": "top right",
  left: "center right",
  "left-end": "bottom right"
}, _c = {
  "bottom-start": "bottom left",
  bottom: "bottom center",
  "bottom-end": "bottom right",
  "top-start": "top left",
  top: "top center",
  "top-end": "top right",
  "right-start": "top right",
  right: "center right",
  "right-end": "bottom right",
  "left-start": "top left",
  left: "center left",
  "left-end": "bottom left"
}, Ac = {
  "bottom-start": "right",
  "bottom-end": "left",
  "top-start": "right",
  "top-end": "left",
  "right-start": "bottom",
  "right-end": "top",
  "left-start": "bottom",
  "left-end": "top"
}, la = {
  top: !0,
  bottom: !1,
  left: !0,
  right: !1
  // left--
}, sa = {
  top: "end",
  bottom: "start",
  left: "end",
  right: "start"
};
function Lc(e, t, n, r, o, i) {
  if (!o || i)
    return { placement: e, top: 0, left: 0 };
  const [l, a] = e.split("-");
  let s = a != null ? a : "center", d = {
    top: 0,
    left: 0
  };
  const u = (m, f, p) => {
    let v = 0, g = 0;
    const y = n[m] - t[f] - t[m];
    return y > 0 && r && (p ? g = la[f] ? y : -y : v = la[f] ? y : -y), {
      left: v,
      top: g
    };
  }, h = l === "left" || l === "right";
  if (s !== "center") {
    const m = Ac[e], f = Br[m], p = Po[m];
    if (n[p] > t[p]) {
      if (
        // current space is not enough
        // ----------[ target ]---------|
        // -------[     follower        ]
        t[m] + t[p] < n[p]
      ) {
        const v = (n[p] - t[p]) / 2;
        t[m] < v || t[f] < v ? t[m] < t[f] ? (s = aa[a], d = u(p, f, h)) : d = u(p, m, h) : s = "center";
      }
    } else n[p] < t[p] && t[f] < 0 && // opposite align has larger space
    // ------------[   target   ]
    // ----------------[follower]
    t[m] > t[f] && (s = aa[a]);
  } else {
    const m = l === "bottom" || l === "top" ? "left" : "top", f = Br[m], p = Po[m], v = (n[p] - t[p]) / 2;
    // center is not enough
    // ----------- [ target ]--|
    // -------[     follower     ]
    (t[m] < v || t[f] < v) && (t[m] > t[f] ? (s = sa[m], d = u(p, m, h)) : (s = sa[f], d = u(p, f, h)));
  }
  let b = l;
  return (
    // space is not enough
    t[l] < n[Po[l]] && // opposite position's space is larger
    t[l] < t[Br[l]] && (b = Br[l]), {
      placement: s !== "center" ? `${b}-${s}` : b,
      left: d.left,
      top: d.top
    }
  );
}
function Hc(e, t) {
  return t ? _c[e] : Ic[e];
}
function Dc(e, t, n, r, o, i) {
  if (i)
    switch (e) {
      case "bottom-start":
        return {
          top: `${Math.round(n.top - t.top + n.height)}px`,
          left: `${Math.round(n.left - t.left)}px`,
          transform: "translateY(-100%)"
        };
      case "bottom-end":
        return {
          top: `${Math.round(n.top - t.top + n.height)}px`,
          left: `${Math.round(n.left - t.left + n.width)}px`,
          transform: "translateX(-100%) translateY(-100%)"
        };
      case "top-start":
        return {
          top: `${Math.round(n.top - t.top)}px`,
          left: `${Math.round(n.left - t.left)}px`,
          transform: ""
        };
      case "top-end":
        return {
          top: `${Math.round(n.top - t.top)}px`,
          left: `${Math.round(n.left - t.left + n.width)}px`,
          transform: "translateX(-100%)"
        };
      case "right-start":
        return {
          top: `${Math.round(n.top - t.top)}px`,
          left: `${Math.round(n.left - t.left + n.width)}px`,
          transform: "translateX(-100%)"
        };
      case "right-end":
        return {
          top: `${Math.round(n.top - t.top + n.height)}px`,
          left: `${Math.round(n.left - t.left + n.width)}px`,
          transform: "translateX(-100%) translateY(-100%)"
        };
      case "left-start":
        return {
          top: `${Math.round(n.top - t.top)}px`,
          left: `${Math.round(n.left - t.left)}px`,
          transform: ""
        };
      case "left-end":
        return {
          top: `${Math.round(n.top - t.top + n.height)}px`,
          left: `${Math.round(n.left - t.left)}px`,
          transform: "translateY(-100%)"
        };
      case "top":
        return {
          top: `${Math.round(n.top - t.top)}px`,
          left: `${Math.round(n.left - t.left + n.width / 2)}px`,
          transform: "translateX(-50%)"
        };
      case "right":
        return {
          top: `${Math.round(n.top - t.top + n.height / 2)}px`,
          left: `${Math.round(n.left - t.left + n.width)}px`,
          transform: "translateX(-100%) translateY(-50%)"
        };
      case "left":
        return {
          top: `${Math.round(n.top - t.top + n.height / 2)}px`,
          left: `${Math.round(n.left - t.left)}px`,
          transform: "translateY(-50%)"
        };
      case "bottom":
      default:
        return {
          top: `${Math.round(n.top - t.top + n.height)}px`,
          left: `${Math.round(n.left - t.left + n.width / 2)}px`,
          transform: "translateX(-50%) translateY(-100%)"
        };
    }
  switch (e) {
    case "bottom-start":
      return {
        top: `${Math.round(n.top - t.top + n.height + r)}px`,
        left: `${Math.round(n.left - t.left + o)}px`,
        transform: ""
      };
    case "bottom-end":
      return {
        top: `${Math.round(n.top - t.top + n.height + r)}px`,
        left: `${Math.round(n.left - t.left + n.width + o)}px`,
        transform: "translateX(-100%)"
      };
    case "top-start":
      return {
        top: `${Math.round(n.top - t.top + r)}px`,
        left: `${Math.round(n.left - t.left + o)}px`,
        transform: "translateY(-100%)"
      };
    case "top-end":
      return {
        top: `${Math.round(n.top - t.top + r)}px`,
        left: `${Math.round(n.left - t.left + n.width + o)}px`,
        transform: "translateX(-100%) translateY(-100%)"
      };
    case "right-start":
      return {
        top: `${Math.round(n.top - t.top + r)}px`,
        left: `${Math.round(n.left - t.left + n.width + o)}px`,
        transform: ""
      };
    case "right-end":
      return {
        top: `${Math.round(n.top - t.top + n.height + r)}px`,
        left: `${Math.round(n.left - t.left + n.width + o)}px`,
        transform: "translateY(-100%)"
      };
    case "left-start":
      return {
        top: `${Math.round(n.top - t.top + r)}px`,
        left: `${Math.round(n.left - t.left + o)}px`,
        transform: "translateX(-100%)"
      };
    case "left-end":
      return {
        top: `${Math.round(n.top - t.top + n.height + r)}px`,
        left: `${Math.round(n.left - t.left + o)}px`,
        transform: "translateX(-100%) translateY(-100%)"
      };
    case "top":
      return {
        top: `${Math.round(n.top - t.top + r)}px`,
        left: `${Math.round(n.left - t.left + n.width / 2 + o)}px`,
        transform: "translateY(-100%) translateX(-50%)"
      };
    case "right":
      return {
        top: `${Math.round(n.top - t.top + n.height / 2 + r)}px`,
        left: `${Math.round(n.left - t.left + n.width + o)}px`,
        transform: "translateY(-50%)"
      };
    case "left":
      return {
        top: `${Math.round(n.top - t.top + n.height / 2 + r)}px`,
        left: `${Math.round(n.left - t.left + o)}px`,
        transform: "translateY(-50%) translateX(-100%)"
      };
    case "bottom":
    default:
      return {
        top: `${Math.round(n.top - t.top + n.height + r)}px`,
        left: `${Math.round(n.left - t.left + n.width / 2 + o)}px`,
        transform: "translateX(-50%)"
      };
  }
}
const jc = Jt([
  Jt(".v-binder-follower-container", {
    position: "absolute",
    left: "0",
    right: "0",
    top: "0",
    height: "0",
    pointerEvents: "none",
    zIndex: "auto"
  }),
  Jt(".v-binder-follower-content", {
    position: "absolute",
    zIndex: "auto"
  }, [
    Jt("> *", {
      pointerEvents: "all"
    })
  ])
]), wi = ie({
  name: "Follower",
  inheritAttrs: !1,
  props: {
    show: Boolean,
    enabled: {
      type: Boolean,
      default: void 0
    },
    placement: {
      type: String,
      default: "bottom"
    },
    syncTrigger: {
      type: Array,
      default: ["resize", "scroll"]
    },
    to: [String, Object],
    flip: {
      type: Boolean,
      default: !0
    },
    internalShift: Boolean,
    x: Number,
    y: Number,
    width: String,
    minWidth: String,
    containerClass: String,
    teleportDisabled: Boolean,
    zindexable: {
      type: Boolean,
      default: !0
    },
    zIndex: Number,
    overlap: Boolean
  },
  setup(e) {
    const t = ke("VBinder"), n = Ue(() => e.enabled !== void 0 ? e.enabled : e.show), r = L(null), o = L(null), i = () => {
      const { syncTrigger: b } = e;
      b.includes("scroll") && t.addScrollListener(s), b.includes("resize") && t.addResizeListener(s);
    }, l = () => {
      t.removeScrollListener(s), t.removeResizeListener(s);
    };
    vt(() => {
      n.value && (s(), i());
    });
    const a = hn();
    jc.mount({
      id: "vueuc/binder",
      head: !0,
      anchorMetaName: io,
      ssr: a
    }), ut(() => {
      l();
    }), zl(() => {
      n.value && s();
    });
    const s = () => {
      if (!n.value)
        return;
      const b = r.value;
      if (b === null)
        return;
      const m = t.targetRef, { x: f, y: p, overlap: v } = e, g = f !== void 0 && p !== void 0 ? Pc(f, p) : ko(m);
      b.style.setProperty("--v-target-width", `${Math.round(g.width)}px`), b.style.setProperty("--v-target-height", `${Math.round(g.height)}px`);
      const { width: y, minWidth: S, placement: w, internalShift: C, flip: k } = e;
      b.setAttribute("v-placement", w), v ? b.setAttribute("v-overlap", "") : b.removeAttribute("v-overlap");
      const { style: x } = b;
      y === "target" ? x.width = `${g.width}px` : y !== void 0 ? x.width = y : x.width = "", S === "target" ? x.minWidth = `${g.width}px` : S !== void 0 ? x.minWidth = S : x.minWidth = "";
      const z = ko(b), $ = ko(o.value), { left: M, top: V, placement: O } = Lc(w, g, z, C, k, v), E = Hc(O, v), { left: I, top: F, transform: N } = Dc(O, $, g, V, M, v);
      b.setAttribute("v-placement", O), b.style.setProperty("--v-offset-left", `${Math.round(M)}px`), b.style.setProperty("--v-offset-top", `${Math.round(V)}px`), b.style.transform = `translateX(${I}) translateY(${F}) ${N}`, b.style.setProperty("--v-transform-origin", E), b.style.transformOrigin = E;
    };
    je(n, (b) => {
      b ? (i(), d()) : l();
    });
    const d = () => {
      Tt().then(s).catch((b) => console.error(b));
    };
    [
      "placement",
      "x",
      "y",
      "internalShift",
      "flip",
      "width",
      "overlap",
      "minWidth"
    ].forEach((b) => {
      je(ae(e, b), s);
    }), ["teleportDisabled"].forEach((b) => {
      je(ae(e, b), d);
    }), je(ae(e, "syncTrigger"), (b) => {
      b.includes("resize") ? t.addResizeListener(s) : t.removeResizeListener(s), b.includes("scroll") ? t.addScrollListener(s) : t.removeScrollListener(s);
    });
    const u = Cr(), h = Ue(() => {
      const { to: b } = e;
      if (b !== void 0)
        return b;
      u.value;
    });
    return {
      VBinder: t,
      mergedEnabled: n,
      offsetContainerRef: o,
      followerRef: r,
      mergedTo: h,
      syncPosition: s
    };
  },
  render() {
    return c(El, {
      show: this.show,
      to: this.mergedTo,
      disabled: this.teleportDisabled
    }, {
      default: () => {
        var e, t;
        const n = c("div", {
          class: ["v-binder-follower-container", this.containerClass],
          ref: "offsetContainerRef"
        }, [
          c("div", {
            class: "v-binder-follower-content",
            ref: "followerRef"
          }, (t = (e = this.$slots).default) === null || t === void 0 ? void 0 : t.call(e))
        ]);
        return this.zindexable ? ln(n, [
          [
            yi,
            {
              enabled: this.mergedEnabled,
              zIndex: this.zIndex
            }
          ]
        ]) : n;
      }
    });
  }
});
var wn = [], Wc = function() {
  return wn.some(function(e) {
    return e.activeTargets.length > 0;
  });
}, Nc = function() {
  return wn.some(function(e) {
    return e.skippedTargets.length > 0;
  });
}, da = "ResizeObserver loop completed with undelivered notifications.", Vc = function() {
  var e;
  typeof ErrorEvent == "function" ? e = new ErrorEvent("error", {
    message: da
  }) : (e = document.createEvent("Event"), e.initEvent("error", !1, !1), e.message = da), window.dispatchEvent(e);
}, xr;
(function(e) {
  e.BORDER_BOX = "border-box", e.CONTENT_BOX = "content-box", e.DEVICE_PIXEL_CONTENT_BOX = "device-pixel-content-box";
})(xr || (xr = {}));
var Cn = function(e) {
  return Object.freeze(e);
}, Kc = /* @__PURE__ */ function() {
  function e(t, n) {
    this.inlineSize = t, this.blockSize = n, Cn(this);
  }
  return e;
}(), Il = function() {
  function e(t, n, r, o) {
    return this.x = t, this.y = n, this.width = r, this.height = o, this.top = this.y, this.left = this.x, this.bottom = this.top + this.height, this.right = this.left + this.width, Cn(this);
  }
  return e.prototype.toJSON = function() {
    var t = this, n = t.x, r = t.y, o = t.top, i = t.right, l = t.bottom, a = t.left, s = t.width, d = t.height;
    return { x: n, y: r, top: o, right: i, bottom: l, left: a, width: s, height: d };
  }, e.fromRect = function(t) {
    return new e(t.x, t.y, t.width, t.height);
  }, e;
}(), Ci = function(e) {
  return e instanceof SVGElement && "getBBox" in e;
}, _l = function(e) {
  if (Ci(e)) {
    var t = e.getBBox(), n = t.width, r = t.height;
    return !n && !r;
  }
  var o = e, i = o.offsetWidth, l = o.offsetHeight;
  return !(i || l || e.getClientRects().length);
}, ca = function(e) {
  var t;
  if (e instanceof Element)
    return !0;
  var n = (t = e == null ? void 0 : e.ownerDocument) === null || t === void 0 ? void 0 : t.defaultView;
  return !!(n && e instanceof n.Element);
}, Uc = function(e) {
  switch (e.tagName) {
    case "INPUT":
      if (e.type !== "image")
        break;
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return !0;
  }
  return !1;
}, ur = typeof window != "undefined" ? window : {}, Er = /* @__PURE__ */ new WeakMap(), ua = /auto|scroll/, qc = /^tb|vertical/, Gc = /msie|trident/i.test(ur.navigator && ur.navigator.userAgent), Gt = function(e) {
  return parseFloat(e || "0");
}, Ln = function(e, t, n) {
  return e === void 0 && (e = 0), t === void 0 && (t = 0), n === void 0 && (n = !1), new Kc((n ? t : e) || 0, (n ? e : t) || 0);
}, fa = Cn({
  devicePixelContentBoxSize: Ln(),
  borderBoxSize: Ln(),
  contentBoxSize: Ln(),
  contentRect: new Il(0, 0, 0, 0)
}), Al = function(e, t) {
  if (t === void 0 && (t = !1), Er.has(e) && !t)
    return Er.get(e);
  if (_l(e))
    return Er.set(e, fa), fa;
  var n = getComputedStyle(e), r = Ci(e) && e.ownerSVGElement && e.getBBox(), o = !Gc && n.boxSizing === "border-box", i = qc.test(n.writingMode || ""), l = !r && ua.test(n.overflowY || ""), a = !r && ua.test(n.overflowX || ""), s = r ? 0 : Gt(n.paddingTop), d = r ? 0 : Gt(n.paddingRight), u = r ? 0 : Gt(n.paddingBottom), h = r ? 0 : Gt(n.paddingLeft), b = r ? 0 : Gt(n.borderTopWidth), m = r ? 0 : Gt(n.borderRightWidth), f = r ? 0 : Gt(n.borderBottomWidth), p = r ? 0 : Gt(n.borderLeftWidth), v = h + d, g = s + u, y = p + m, S = b + f, w = a ? e.offsetHeight - S - e.clientHeight : 0, C = l ? e.offsetWidth - y - e.clientWidth : 0, k = o ? v + y : 0, x = o ? g + S : 0, z = r ? r.width : Gt(n.width) - k - C, $ = r ? r.height : Gt(n.height) - x - w, M = z + v + C + y, V = $ + g + w + S, O = Cn({
    devicePixelContentBoxSize: Ln(Math.round(z * devicePixelRatio), Math.round($ * devicePixelRatio), i),
    borderBoxSize: Ln(M, V, i),
    contentBoxSize: Ln(z, $, i),
    contentRect: new Il(h, s, z, $)
  });
  return Er.set(e, O), O;
}, Ll = function(e, t, n) {
  var r = Al(e, n), o = r.borderBoxSize, i = r.contentBoxSize, l = r.devicePixelContentBoxSize;
  switch (t) {
    case xr.DEVICE_PIXEL_CONTENT_BOX:
      return l;
    case xr.BORDER_BOX:
      return o;
    default:
      return i;
  }
}, Xc = /* @__PURE__ */ function() {
  function e(t) {
    var n = Al(t);
    this.target = t, this.contentRect = n.contentRect, this.borderBoxSize = Cn([n.borderBoxSize]), this.contentBoxSize = Cn([n.contentBoxSize]), this.devicePixelContentBoxSize = Cn([n.devicePixelContentBoxSize]);
  }
  return e;
}(), Hl = function(e) {
  if (_l(e))
    return 1 / 0;
  for (var t = 0, n = e.parentNode; n; )
    t += 1, n = n.parentNode;
  return t;
}, Yc = function() {
  var e = 1 / 0, t = [];
  wn.forEach(function(l) {
    if (l.activeTargets.length !== 0) {
      var a = [];
      l.activeTargets.forEach(function(d) {
        var u = new Xc(d.target), h = Hl(d.target);
        a.push(u), d.lastReportedSize = Ll(d.target, d.observedBox), h < e && (e = h);
      }), t.push(function() {
        l.callback.call(l.observer, a, l.observer);
      }), l.activeTargets.splice(0, l.activeTargets.length);
    }
  });
  for (var n = 0, r = t; n < r.length; n++) {
    var o = r[n];
    o();
  }
  return e;
}, ha = function(e) {
  wn.forEach(function(n) {
    n.activeTargets.splice(0, n.activeTargets.length), n.skippedTargets.splice(0, n.skippedTargets.length), n.observationTargets.forEach(function(o) {
      o.isActive() && (Hl(o.target) > e ? n.activeTargets.push(o) : n.skippedTargets.push(o));
    });
  });
}, Zc = function() {
  var e = 0;
  for (ha(e); Wc(); )
    e = Yc(), ha(e);
  return Nc() && Vc(), e > 0;
}, zo, Dl = [], Jc = function() {
  return Dl.splice(0).forEach(function(e) {
    return e();
  });
}, Qc = function(e) {
  if (!zo) {
    var t = 0, n = document.createTextNode(""), r = { characterData: !0 };
    new MutationObserver(function() {
      return Jc();
    }).observe(n, r), zo = function() {
      n.textContent = "".concat(t ? t-- : t++);
    };
  }
  Dl.push(e), zo();
}, eu = function(e) {
  Qc(function() {
    requestAnimationFrame(e);
  });
}, Nr = 0, tu = function() {
  return !!Nr;
}, nu = 250, ru = { attributes: !0, characterData: !0, childList: !0, subtree: !0 }, pa = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
], ba = function(e) {
  return e === void 0 && (e = 0), Date.now() + e;
}, $o = !1, ou = function() {
  function e() {
    var t = this;
    this.stopped = !0, this.listener = function() {
      return t.schedule();
    };
  }
  return e.prototype.run = function(t) {
    var n = this;
    if (t === void 0 && (t = nu), !$o) {
      $o = !0;
      var r = ba(t);
      eu(function() {
        var o = !1;
        try {
          o = Zc();
        } finally {
          if ($o = !1, t = r - ba(), !tu())
            return;
          o ? n.run(1e3) : t > 0 ? n.run(t) : n.start();
        }
      });
    }
  }, e.prototype.schedule = function() {
    this.stop(), this.run();
  }, e.prototype.observe = function() {
    var t = this, n = function() {
      return t.observer && t.observer.observe(document.body, ru);
    };
    document.body ? n() : ur.addEventListener("DOMContentLoaded", n);
  }, e.prototype.start = function() {
    var t = this;
    this.stopped && (this.stopped = !1, this.observer = new MutationObserver(this.listener), this.observe(), pa.forEach(function(n) {
      return ur.addEventListener(n, t.listener, !0);
    }));
  }, e.prototype.stop = function() {
    var t = this;
    this.stopped || (this.observer && this.observer.disconnect(), pa.forEach(function(n) {
      return ur.removeEventListener(n, t.listener, !0);
    }), this.stopped = !0);
  }, e;
}(), Go = new ou(), ga = function(e) {
  !Nr && e > 0 && Go.start(), Nr += e, !Nr && Go.stop();
}, iu = function(e) {
  return !Ci(e) && !Uc(e) && getComputedStyle(e).display === "inline";
}, au = function() {
  function e(t, n) {
    this.target = t, this.observedBox = n || xr.CONTENT_BOX, this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  return e.prototype.isActive = function() {
    var t = Ll(this.target, this.observedBox, !0);
    return iu(this.target) && (this.lastReportedSize = t), this.lastReportedSize.inlineSize !== t.inlineSize || this.lastReportedSize.blockSize !== t.blockSize;
  }, e;
}(), lu = /* @__PURE__ */ function() {
  function e(t, n) {
    this.activeTargets = [], this.skippedTargets = [], this.observationTargets = [], this.observer = t, this.callback = n;
  }
  return e;
}(), Ir = /* @__PURE__ */ new WeakMap(), ma = function(e, t) {
  for (var n = 0; n < e.length; n += 1)
    if (e[n].target === t)
      return n;
  return -1;
}, _r = function() {
  function e() {
  }
  return e.connect = function(t, n) {
    var r = new lu(t, n);
    Ir.set(t, r);
  }, e.observe = function(t, n, r) {
    var o = Ir.get(t), i = o.observationTargets.length === 0;
    ma(o.observationTargets, n) < 0 && (i && wn.push(o), o.observationTargets.push(new au(n, r && r.box)), ga(1), Go.schedule());
  }, e.unobserve = function(t, n) {
    var r = Ir.get(t), o = ma(r.observationTargets, n), i = r.observationTargets.length === 1;
    o >= 0 && (i && wn.splice(wn.indexOf(r), 1), r.observationTargets.splice(o, 1), ga(-1));
  }, e.disconnect = function(t) {
    var n = this, r = Ir.get(t);
    r.observationTargets.slice().forEach(function(o) {
      return n.unobserve(t, o.target);
    }), r.activeTargets.splice(0, r.activeTargets.length);
  }, e;
}(), su = function() {
  function e(t) {
    if (arguments.length === 0)
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    if (typeof t != "function")
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    _r.connect(this, t);
  }
  return e.prototype.observe = function(t, n) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!ca(t))
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    _r.observe(this, t, n);
  }, e.prototype.unobserve = function(t) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!ca(t))
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    _r.unobserve(this, t);
  }, e.prototype.disconnect = function() {
    _r.disconnect(this);
  }, e.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  }, e;
}();
class du {
  constructor() {
    this.handleResize = this.handleResize.bind(this), this.observer = new (typeof window != "undefined" && window.ResizeObserver || su)(this.handleResize), this.elHandlersMap = /* @__PURE__ */ new Map();
  }
  handleResize(t) {
    for (const n of t) {
      const r = this.elHandlersMap.get(n.target);
      r !== void 0 && r(n);
    }
  }
  registerHandler(t, n) {
    this.elHandlersMap.set(t, n), this.observer.observe(t);
  }
  unregisterHandler(t) {
    this.elHandlersMap.has(t) && (this.elHandlersMap.delete(t), this.observer.unobserve(t));
  }
}
const fr = new du(), on = ie({
  name: "ResizeObserver",
  props: {
    onResize: Function
  },
  setup(e) {
    let t = !1;
    const n = wr().proxy;
    function r(o) {
      const { onResize: i } = e;
      i !== void 0 && i(o);
    }
    vt(() => {
      const o = n.$el;
      if (o === void 0) {
        ra("resize-observer", "$el does not exist.");
        return;
      }
      if (o.nextElementSibling !== o.nextSibling && o.nodeType === 3 && o.nodeValue !== "") {
        ra("resize-observer", "$el can not be observed (it may be a text node).");
        return;
      }
      o.nextElementSibling !== null && (fr.registerHandler(o.nextElementSibling, r), t = !0);
    }), ut(() => {
      t && fr.unregisterHandler(n.$el.nextElementSibling);
    });
  },
  render() {
    return pl(this.$slots, "default");
  }
});
let Ar;
function cu() {
  return typeof document == "undefined" ? !1 : (Ar === void 0 && ("matchMedia" in window ? Ar = window.matchMedia("(pointer:coarse)").matches : Ar = !1), Ar);
}
let To;
function va() {
  return typeof document == "undefined" ? 1 : (To === void 0 && (To = "chrome" in window ? window.devicePixelRatio : 1), To);
}
const jl = "VVirtualListXScroll";
function uu({ columnsRef: e, renderColRef: t, renderItemWithColsRef: n }) {
  const r = L(0), o = L(0), i = T(() => {
    const d = e.value;
    if (d.length === 0)
      return null;
    const u = new Bl(d.length, 0);
    return d.forEach((h, b) => {
      u.add(b, h.width);
    }), u;
  }), l = Ue(() => {
    const d = i.value;
    return d !== null ? Math.max(d.getBound(o.value) - 1, 0) : 0;
  }), a = (d) => {
    const u = i.value;
    return u !== null ? u.sum(d) : 0;
  }, s = Ue(() => {
    const d = i.value;
    return d !== null ? Math.min(d.getBound(o.value + r.value) + 1, e.value.length - 1) : 0;
  });
  return We(jl, {
    startIndexRef: l,
    endIndexRef: s,
    columnsRef: e,
    renderColRef: t,
    renderItemWithColsRef: n,
    getLeft: a
  }), {
    listWidthRef: r,
    scrollLeftRef: o
  };
}
const xa = ie({
  name: "VirtualListRow",
  props: {
    index: { type: Number, required: !0 },
    item: {
      type: Object,
      required: !0
    }
  },
  setup() {
    const { startIndexRef: e, endIndexRef: t, columnsRef: n, getLeft: r, renderColRef: o, renderItemWithColsRef: i } = (
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      ke(jl)
    );
    return {
      startIndex: e,
      endIndex: t,
      columns: n,
      renderCol: o,
      renderItemWithCols: i,
      getLeft: r
    };
  },
  render() {
    const { startIndex: e, endIndex: t, columns: n, renderCol: r, renderItemWithCols: o, getLeft: i, item: l } = this;
    if (o != null)
      return o({
        itemIndex: this.index,
        startColIndex: e,
        endColIndex: t,
        allColumns: n,
        item: l,
        getLeft: i
      });
    if (r != null) {
      const a = [];
      for (let s = e; s <= t; ++s) {
        const d = n[s];
        a.push(r({ column: d, left: i(s), item: l }));
      }
      return a;
    }
    return null;
  }
}), fu = Jt(".v-vl", {
  maxHeight: "inherit",
  height: "100%",
  overflow: "auto",
  minWidth: "1px"
  // a zero width container won't be scrollable
}, [
  Jt("&:not(.v-vl--show-scrollbar)", {
    scrollbarWidth: "none"
  }, [
    Jt("&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb", {
      width: 0,
      height: 0,
      display: "none"
    })
  ])
]), Si = ie({
  name: "VirtualList",
  inheritAttrs: !1,
  props: {
    showScrollbar: {
      type: Boolean,
      default: !0
    },
    columns: {
      type: Array,
      default: () => []
    },
    renderCol: Function,
    renderItemWithCols: Function,
    items: {
      type: Array,
      default: () => []
    },
    // it is suppose to be the min height
    itemSize: {
      type: Number,
      required: !0
    },
    itemResizable: Boolean,
    itemsStyle: [String, Object],
    visibleItemsTag: {
      type: [String, Object],
      default: "div"
    },
    visibleItemsProps: Object,
    ignoreItemResize: Boolean,
    onScroll: Function,
    onWheel: Function,
    onResize: Function,
    defaultScrollKey: [Number, String],
    defaultScrollIndex: Number,
    keyField: {
      type: String,
      default: "key"
    },
    // Whether it is a good API?
    // ResizeObserver + footer & header is not enough.
    // Too complex for simple case
    paddingTop: {
      type: [Number, String],
      default: 0
    },
    paddingBottom: {
      type: [Number, String],
      default: 0
    }
  },
  setup(e) {
    const t = hn();
    fu.mount({
      id: "vueuc/virtual-list",
      head: !0,
      anchorMetaName: io,
      ssr: t
    }), vt(() => {
      const { defaultScrollIndex: E, defaultScrollKey: I } = e;
      E != null ? v({ index: E }) : I != null && v({ key: I });
    });
    let n = !1, r = !1;
    fl(() => {
      if (n = !1, !r) {
        r = !0;
        return;
      }
      v({ top: m.value, left: l.value });
    }), ui(() => {
      n = !0, r || (r = !0);
    });
    const o = Ue(() => {
      if (e.renderCol == null && e.renderItemWithCols == null || e.columns.length === 0)
        return;
      let E = 0;
      return e.columns.forEach((I) => {
        E += I.width;
      }), E;
    }), i = T(() => {
      const E = /* @__PURE__ */ new Map(), { keyField: I } = e;
      return e.items.forEach((F, N) => {
        E.set(F[I], N);
      }), E;
    }), { scrollLeftRef: l, listWidthRef: a } = uu({
      columnsRef: ae(e, "columns"),
      renderColRef: ae(e, "renderCol"),
      renderItemWithColsRef: ae(e, "renderItemWithCols")
    }), s = L(null), d = L(void 0), u = /* @__PURE__ */ new Map(), h = T(() => {
      const { items: E, itemSize: I, keyField: F } = e, N = new Bl(E.length, I);
      return E.forEach((W, X) => {
        const re = W[F], Q = u.get(re);
        Q !== void 0 && N.add(X, Q);
      }), N;
    }), b = L(0), m = L(0), f = Ue(() => Math.max(h.value.getBound(m.value - Nt(e.paddingTop)) - 1, 0)), p = T(() => {
      const { value: E } = d;
      if (E === void 0)
        return [];
      const { items: I, itemSize: F } = e, N = f.value, W = Math.min(N + Math.ceil(E / F + 1), I.length - 1), X = [];
      for (let re = N; re <= W; ++re)
        X.push(I[re]);
      return X;
    }), v = (E, I) => {
      if (typeof E == "number") {
        w(E, I, "auto");
        return;
      }
      const { left: F, top: N, index: W, key: X, position: re, behavior: Q, debounce: G = !0 } = E;
      if (F !== void 0 || N !== void 0)
        w(F, N, Q);
      else if (W !== void 0)
        S(W, Q, G);
      else if (X !== void 0) {
        const j = i.value.get(X);
        j !== void 0 && S(j, Q, G);
      } else re === "bottom" ? w(0, Number.MAX_SAFE_INTEGER, Q) : re === "top" && w(0, 0, Q);
    };
    let g, y = null;
    function S(E, I, F) {
      const { value: N } = h, W = N.sum(E) + Nt(e.paddingTop);
      if (!F)
        s.value.scrollTo({
          left: 0,
          top: W,
          behavior: I
        });
      else {
        g = E, y !== null && window.clearTimeout(y), y = window.setTimeout(() => {
          g = void 0, y = null;
        }, 16);
        const { scrollTop: X, offsetHeight: re } = s.value;
        if (W > X) {
          const Q = N.get(E);
          W + Q <= X + re || s.value.scrollTo({
            left: 0,
            top: W + Q - re,
            behavior: I
          });
        } else
          s.value.scrollTo({
            left: 0,
            top: W,
            behavior: I
          });
      }
    }
    function w(E, I, F) {
      s.value.scrollTo({
        left: E,
        top: I,
        behavior: F
      });
    }
    function C(E, I) {
      var F, N, W;
      if (n || e.ignoreItemResize || O(I.target))
        return;
      const { value: X } = h, re = i.value.get(E), Q = X.get(re), G = (W = (N = (F = I.borderBoxSize) === null || F === void 0 ? void 0 : F[0]) === null || N === void 0 ? void 0 : N.blockSize) !== null && W !== void 0 ? W : I.contentRect.height;
      if (G === Q)
        return;
      G - e.itemSize === 0 ? u.delete(E) : u.set(E, G - e.itemSize);
      const q = G - Q;
      if (q === 0)
        return;
      X.add(re, q);
      const Z = s.value;
      if (Z != null) {
        if (g === void 0) {
          const le = X.sum(re);
          Z.scrollTop > le && Z.scrollBy(0, q);
        } else if (re < g)
          Z.scrollBy(0, q);
        else if (re === g) {
          const le = X.sum(re);
          G + le > // Note, listEl shouldn't have border, nor offsetHeight won't be
          // correct
          Z.scrollTop + Z.offsetHeight && Z.scrollBy(0, q);
        }
        V();
      }
      b.value++;
    }
    const k = !cu();
    let x = !1;
    function z(E) {
      var I;
      (I = e.onScroll) === null || I === void 0 || I.call(e, E), (!k || !x) && V();
    }
    function $(E) {
      var I;
      if ((I = e.onWheel) === null || I === void 0 || I.call(e, E), k) {
        const F = s.value;
        if (F != null) {
          if (E.deltaX === 0 && (F.scrollTop === 0 && E.deltaY <= 0 || F.scrollTop + F.offsetHeight >= F.scrollHeight && E.deltaY >= 0))
            return;
          E.preventDefault(), F.scrollTop += E.deltaY / va(), F.scrollLeft += E.deltaX / va(), V(), x = !0, Gr(() => {
            x = !1;
          });
        }
      }
    }
    function M(E) {
      if (n || O(E.target))
        return;
      if (e.renderCol == null && e.renderItemWithCols == null) {
        if (E.contentRect.height === d.value)
          return;
      } else if (E.contentRect.height === d.value && E.contentRect.width === a.value)
        return;
      d.value = E.contentRect.height, a.value = E.contentRect.width;
      const { onResize: I } = e;
      I !== void 0 && I(E);
    }
    function V() {
      const { value: E } = s;
      E != null && (m.value = E.scrollTop, l.value = E.scrollLeft);
    }
    function O(E) {
      let I = E;
      for (; I !== null; ) {
        if (I.style.display === "none")
          return !0;
        I = I.parentElement;
      }
      return !1;
    }
    return {
      listHeight: d,
      listStyle: {
        overflow: "auto"
      },
      keyToIndex: i,
      itemsStyle: T(() => {
        const { itemResizable: E } = e, I = wt(h.value.sum());
        return b.value, [
          e.itemsStyle,
          {
            boxSizing: "content-box",
            width: wt(o.value),
            height: E ? "" : I,
            minHeight: E ? I : "",
            paddingTop: wt(e.paddingTop),
            paddingBottom: wt(e.paddingBottom)
          }
        ];
      }),
      visibleItemsStyle: T(() => (b.value, {
        transform: `translateY(${wt(h.value.sum(f.value))})`
      })),
      viewportItems: p,
      listElRef: s,
      itemsElRef: L(null),
      scrollTo: v,
      handleListResize: M,
      handleListScroll: z,
      handleListWheel: $,
      handleItemResize: C
    };
  },
  render() {
    const { itemResizable: e, keyField: t, keyToIndex: n, visibleItemsTag: r } = this;
    return c(on, {
      onResize: this.handleListResize
    }, {
      default: () => {
        var o, i;
        return c("div", Vt(this.$attrs, {
          class: ["v-vl", this.showScrollbar && "v-vl--show-scrollbar"],
          onScroll: this.handleListScroll,
          onWheel: this.handleListWheel,
          ref: "listElRef"
        }), [
          this.items.length !== 0 ? c("div", {
            ref: "itemsElRef",
            class: "v-vl-items",
            style: this.itemsStyle
          }, [
            c(r, Object.assign({
              class: "v-vl-visible-items",
              style: this.visibleItemsStyle
            }, this.visibleItemsProps), {
              default: () => {
                const { renderCol: l, renderItemWithCols: a } = this;
                return this.viewportItems.map((s) => {
                  const d = s[t], u = n.get(d), h = l != null ? c(xa, {
                    index: u,
                    item: s
                  }) : void 0, b = a != null ? c(xa, {
                    index: u,
                    item: s
                  }) : void 0, m = this.$slots.default({
                    item: s,
                    renderedCols: h,
                    renderedItemWithCols: b,
                    index: u
                  })[0];
                  return e ? c(on, {
                    key: d,
                    onResize: (f) => this.handleItemResize(d, f)
                  }, {
                    default: () => m
                  }) : (m.key = d, m);
                });
              }
            })
          ]) : (i = (o = this.$slots).empty) === null || i === void 0 ? void 0 : i.call(o)
        ]);
      }
    });
  }
}), hu = Jt(".v-x-scroll", {
  overflow: "auto",
  scrollbarWidth: "none"
}, [
  Jt("&::-webkit-scrollbar", {
    width: 0,
    height: 0
  })
]), pu = ie({
  name: "XScroll",
  props: {
    disabled: Boolean,
    onScroll: Function
  },
  setup() {
    const e = L(null);
    function t(o) {
      !(o.currentTarget.offsetWidth < o.currentTarget.scrollWidth) || o.deltaY === 0 || (o.currentTarget.scrollLeft += o.deltaY + o.deltaX, o.preventDefault());
    }
    const n = hn();
    return hu.mount({
      id: "vueuc/x-scroll",
      head: !0,
      anchorMetaName: io,
      ssr: n
    }), Object.assign({
      selfRef: e,
      handleWheel: t
    }, {
      scrollTo(...o) {
        var i;
        (i = e.value) === null || i === void 0 || i.scrollTo(...o);
      }
    });
  },
  render() {
    return c("div", {
      ref: "selfRef",
      onScroll: this.onScroll,
      onWheel: this.disabled ? void 0 : this.handleWheel,
      class: "v-x-scroll"
    }, this.$slots);
  }
}), nn = "v-hidden", bu = Jt("[v-hidden]", {
  display: "none!important"
}), ya = ie({
  name: "Overflow",
  props: {
    getCounter: Function,
    getTail: Function,
    updateCounter: Function,
    onUpdateCount: Function,
    onUpdateOverflow: Function
  },
  setup(e, { slots: t }) {
    const n = L(null), r = L(null);
    function o(l) {
      const { value: a } = n, { getCounter: s, getTail: d } = e;
      let u;
      if (s !== void 0 ? u = s() : u = r.value, !a || !u)
        return;
      u.hasAttribute(nn) && u.removeAttribute(nn);
      const { children: h } = a;
      if (l.showAllItemsBeforeCalculate)
        for (const S of h)
          S.hasAttribute(nn) && S.removeAttribute(nn);
      const b = a.offsetWidth, m = [], f = t.tail ? d == null ? void 0 : d() : null;
      let p = f ? f.offsetWidth : 0, v = !1;
      const g = a.children.length - (t.tail ? 1 : 0);
      for (let S = 0; S < g - 1; ++S) {
        if (S < 0)
          continue;
        const w = h[S];
        if (v) {
          w.hasAttribute(nn) || w.setAttribute(nn, "");
          continue;
        } else w.hasAttribute(nn) && w.removeAttribute(nn);
        const C = w.offsetWidth;
        if (p += C, m[S] = C, p > b) {
          const { updateCounter: k } = e;
          for (let x = S; x >= 0; --x) {
            const z = g - 1 - x;
            k !== void 0 ? k(z) : u.textContent = `${z}`;
            const $ = u.offsetWidth;
            if (p -= m[x], p + $ <= b || x === 0) {
              v = !0, S = x - 1, f && (S === -1 ? (f.style.maxWidth = `${b - $}px`, f.style.boxSizing = "border-box") : f.style.maxWidth = "");
              const { onUpdateCount: M } = e;
              M && M(z);
              break;
            }
          }
        }
      }
      const { onUpdateOverflow: y } = e;
      v ? y !== void 0 && y(!0) : (y !== void 0 && y(!1), u.setAttribute(nn, ""));
    }
    const i = hn();
    return bu.mount({
      id: "vueuc/overflow",
      head: !0,
      anchorMetaName: io,
      ssr: i
    }), vt(() => o({
      showAllItemsBeforeCalculate: !1
    })), {
      selfRef: n,
      counterRef: r,
      sync: o
    };
  },
  render() {
    const { $slots: e } = this;
    return Tt(() => this.sync({
      showAllItemsBeforeCalculate: !1
    })), c("div", {
      class: "v-overflow",
      ref: "selfRef"
    }, [
      pl(e, "default"),
      // $slots.counter should only has 1 element
      e.counter ? e.counter() : c("span", {
        style: {
          display: "inline-block"
        },
        ref: "counterRef"
      }),
      // $slots.tail should only has 1 element
      e.tail ? e.tail() : null
    ]);
  }
});
function Wl(e) {
  return e instanceof HTMLElement;
}
function Nl(e) {
  for (let t = 0; t < e.childNodes.length; t++) {
    const n = e.childNodes[t];
    if (Wl(n) && (Kl(n) || Nl(n)))
      return !0;
  }
  return !1;
}
function Vl(e) {
  for (let t = e.childNodes.length - 1; t >= 0; t--) {
    const n = e.childNodes[t];
    if (Wl(n) && (Kl(n) || Vl(n)))
      return !0;
  }
  return !1;
}
function Kl(e) {
  if (!gu(e))
    return !1;
  try {
    e.focus({ preventScroll: !0 });
  } catch (t) {
  }
  return document.activeElement === e;
}
function gu(e) {
  if (e.tabIndex > 0 || e.tabIndex === 0 && e.getAttribute("tabIndex") !== null)
    return !0;
  if (e.getAttribute("disabled"))
    return !1;
  switch (e.nodeName) {
    case "A":
      return !!e.href && e.rel !== "ignore";
    case "INPUT":
      return e.type !== "hidden" && e.type !== "file";
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA":
      return !0;
    default:
      return !1;
  }
}
let ir = [];
const Ul = ie({
  name: "FocusTrap",
  props: {
    disabled: Boolean,
    active: Boolean,
    autoFocus: {
      type: Boolean,
      default: !0
    },
    onEsc: Function,
    initialFocusTo: String,
    finalFocusTo: String,
    returnFocusOnDeactivated: {
      type: Boolean,
      default: !0
    }
  },
  setup(e) {
    const t = jn(), n = L(null), r = L(null);
    let o = !1, i = !1;
    const l = typeof document == "undefined" ? null : document.activeElement;
    function a() {
      return ir[ir.length - 1] === t;
    }
    function s(v) {
      var g;
      v.code === "Escape" && a() && ((g = e.onEsc) === null || g === void 0 || g.call(e, v));
    }
    vt(() => {
      je(() => e.active, (v) => {
        v ? (h(), De("keydown", document, s)) : (He("keydown", document, s), o && b());
      }, {
        immediate: !0
      });
    }), ut(() => {
      He("keydown", document, s), o && b();
    });
    function d(v) {
      if (!i && a()) {
        const g = u();
        if (g === null || g.contains(Dn(v)))
          return;
        m("first");
      }
    }
    function u() {
      const v = n.value;
      if (v === null)
        return null;
      let g = v;
      for (; g = g.nextSibling, !(g === null || g instanceof Element && g.tagName === "DIV"); )
        ;
      return g;
    }
    function h() {
      var v;
      if (!e.disabled) {
        if (ir.push(t), e.autoFocus) {
          const { initialFocusTo: g } = e;
          g === void 0 ? m("first") : (v = ia(g)) === null || v === void 0 || v.focus({ preventScroll: !0 });
        }
        o = !0, document.addEventListener("focus", d, !0);
      }
    }
    function b() {
      var v;
      if (e.disabled || (document.removeEventListener("focus", d, !0), ir = ir.filter((y) => y !== t), a()))
        return;
      const { finalFocusTo: g } = e;
      g !== void 0 ? (v = ia(g)) === null || v === void 0 || v.focus({ preventScroll: !0 }) : e.returnFocusOnDeactivated && l instanceof HTMLElement && (i = !0, l.focus({ preventScroll: !0 }), i = !1);
    }
    function m(v) {
      if (a() && e.active) {
        const g = n.value, y = r.value;
        if (g !== null && y !== null) {
          const S = u();
          if (S == null || S === y) {
            i = !0, g.focus({ preventScroll: !0 }), i = !1;
            return;
          }
          i = !0;
          const w = v === "first" ? Nl(S) : Vl(S);
          i = !1, w || (i = !0, g.focus({ preventScroll: !0 }), i = !1);
        }
      }
    }
    function f(v) {
      if (i)
        return;
      const g = u();
      g !== null && (v.relatedTarget !== null && g.contains(v.relatedTarget) ? m("last") : m("first"));
    }
    function p(v) {
      i || (v.relatedTarget !== null && v.relatedTarget === n.value ? m("last") : m("first"));
    }
    return {
      focusableStartRef: n,
      focusableEndRef: r,
      focusableStyle: "position: absolute; height: 0; width: 0;",
      handleStartFocus: f,
      handleEndFocus: p
    };
  },
  render() {
    const { default: e } = this.$slots;
    if (e === void 0)
      return null;
    if (this.disabled)
      return e();
    const { active: t, focusableStyle: n } = this;
    return c(Pt, null, [
      c("div", {
        "aria-hidden": "true",
        tabindex: t ? "0" : "-1",
        ref: "focusableStartRef",
        style: n,
        onFocus: this.handleStartFocus
      }),
      e(),
      c("div", {
        "aria-hidden": "true",
        style: n,
        ref: "focusableEndRef",
        tabindex: t ? "0" : "-1",
        onFocus: this.handleEndFocus
      })
    ]);
  }
});
function ql(e, t) {
  t && (vt(() => {
    const {
      value: n
    } = e;
    n && fr.registerHandler(n, t);
  }), je(e, (n, r) => {
    r && fr.unregisterHandler(r);
  }, {
    deep: !1
  }), ut(() => {
    const {
      value: n
    } = e;
    n && fr.unregisterHandler(n);
  }));
}
function Yr(e) {
  return e.replace(/#|\(|\)|,|\s|\./g, "_");
}
const mu = /^(\d|\.)+$/, wa = /(\d|\.)+/;
function ot(e, {
  c: t = 1,
  offset: n = 0,
  attachPx: r = !0
} = {}) {
  if (typeof e == "number") {
    const o = (e + n) * t;
    return o === 0 ? "0" : `${o}px`;
  } else if (typeof e == "string")
    if (mu.test(e)) {
      const o = (Number(e) + n) * t;
      return r ? o === 0 ? "0" : `${o}px` : `${o}`;
    } else {
      const o = wa.exec(e);
      return o ? e.replace(wa, String((Number(o[0]) + n) * t)) : e;
    }
  return e;
}
function Ca(e) {
  const {
    left: t,
    right: n,
    top: r,
    bottom: o
  } = mt(e);
  return `${r} ${t} ${o} ${n}`;
}
function vu(e, t) {
  if (!e) return;
  const n = document.createElement("a");
  n.href = e, t !== void 0 && (n.download = t), document.body.appendChild(n), n.click(), document.body.removeChild(n);
}
let Mo;
function xu() {
  return Mo === void 0 && (Mo = navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom")), Mo;
}
const Gl = /* @__PURE__ */ new WeakSet();
function yu(e) {
  Gl.add(e);
}
function wu(e) {
  return !Gl.has(e);
}
function Sa(e) {
  switch (typeof e) {
    case "string":
      return e || void 0;
    case "number":
      return String(e);
    default:
      return;
  }
}
function ka(e) {
  switch (e) {
    case "tiny":
      return "mini";
    case "small":
      return "tiny";
    case "medium":
      return "small";
    case "large":
      return "medium";
    case "huge":
      return "large";
  }
  throw new Error(`${e} has no smaller size.`);
}
function Kt(e, t) {
  console.error(`[naive/${e}]: ${t}`);
}
function ki(e, t) {
  throw new Error(`[naive/${e}]: ${t}`);
}
function oe(e, ...t) {
  if (Array.isArray(e))
    e.forEach((n) => oe(n, ...t));
  else
    return e(...t);
}
function Xl(e) {
  return (t) => {
    t ? e.value = t.$el : e.value = null;
  };
}
function an(e, t = !0, n = []) {
  return e.forEach((r) => {
    if (r !== null) {
      if (typeof r != "object") {
        (typeof r == "string" || typeof r == "number") && n.push(Ur(String(r)));
        return;
      }
      if (Array.isArray(r)) {
        an(r, t, n);
        return;
      }
      if (r.type === Pt) {
        if (r.children === null) return;
        Array.isArray(r.children) && an(r.children, t, n);
      } else {
        if (r.type === eo && t) return;
        n.push(r);
      }
    }
  }), n;
}
function Cu(e, t = "default", n = void 0) {
  const r = e[t];
  if (!r)
    return Kt("getFirstSlotVNode", `slot[${t}] is empty`), null;
  const o = an(r(n));
  return o.length === 1 ? o[0] : (Kt("getFirstSlotVNode", `slot[${t}] should have exactly one child`), null);
}
function Su(e, t, n) {
  if (!t)
    return null;
  const r = an(t(n));
  return r.length === 1 ? r[0] : (Kt("getFirstSlotVNode", `slot[${e}] should have exactly one child`), null);
}
function Yl(e, t = "default", n = []) {
  const o = e.$slots[t];
  return o === void 0 ? n : o();
}
function kn(e, t = [], n) {
  const r = {};
  return t.forEach((o) => {
    r[o] = e[o];
  }), Object.assign(r, n);
}
function Rn(e) {
  return Object.keys(e);
}
function hr(e) {
  const t = e.filter((n) => n !== void 0);
  if (t.length !== 0)
    return t.length === 1 ? t[0] : (n) => {
      e.forEach((r) => {
        r && r(n);
      });
    };
}
function kr(e, t = [], n) {
  const r = {};
  return Object.getOwnPropertyNames(e).forEach((i) => {
    t.includes(i) || (r[i] = e[i]);
  }), Object.assign(r, n);
}
function gt(e, ...t) {
  return typeof e == "function" ? e(...t) : typeof e == "string" ? Ur(e) : typeof e == "number" ? Ur(String(e)) : null;
}
function jt(e) {
  return e.some((t) => Pd(t) ? !(t.type === eo || t.type === Pt && !jt(t.children)) : !0) ? e : null;
}
function Et(e, t) {
  return e && jt(e()) || t();
}
function ku(e, t, n) {
  return e && jt(e(t)) || n(t);
}
function Ze(e, t) {
  const n = e && jt(e());
  return t(n || null);
}
function Xo(e) {
  return !(e && jt(e()));
}
const Yo = ie({
  render() {
    var e, t;
    return (t = (e = this.$slots).default) === null || t === void 0 ? void 0 : t.call(e);
  }
}), Ut = "n-config-provider", Zr = "n";
function _e(e = {}, t = {
  defaultBordered: !0
}) {
  const n = ke(Ut, null);
  return {
    // NConfigProvider,
    inlineThemeDisabled: n == null ? void 0 : n.inlineThemeDisabled,
    mergedRtlRef: n == null ? void 0 : n.mergedRtlRef,
    mergedComponentPropsRef: n == null ? void 0 : n.mergedComponentPropsRef,
    mergedBreakpointsRef: n == null ? void 0 : n.mergedBreakpointsRef,
    mergedBorderedRef: T(() => {
      var r, o;
      const {
        bordered: i
      } = e;
      return i !== void 0 ? i : (o = (r = n == null ? void 0 : n.mergedBorderedRef.value) !== null && r !== void 0 ? r : t.defaultBordered) !== null && o !== void 0 ? o : !0;
    }),
    mergedClsPrefixRef: n ? n.mergedClsPrefixRef : bl(Zr),
    namespaceRef: T(() => n == null ? void 0 : n.mergedNamespaceRef.value)
  };
}
function Zl() {
  const e = ke(Ut, null);
  return e ? e.mergedClsPrefixRef : bl(Zr);
}
function it(e, t, n, r) {
  n || ki("useThemeClass", "cssVarsRef is not passed");
  const o = ke(Ut, null), i = o == null ? void 0 : o.mergedThemeHashRef, l = o == null ? void 0 : o.styleMountTarget, a = L(""), s = hn();
  let d;
  const u = `__${e}`, h = () => {
    let b = u;
    const m = t ? t.value : void 0, f = i == null ? void 0 : i.value;
    f && (b += `-${f}`), m && (b += `-${m}`);
    const {
      themeOverrides: p,
      builtinThemeOverrides: v
    } = r;
    p && (b += `-${gr(JSON.stringify(p))}`), v && (b += `-${gr(JSON.stringify(v))}`), a.value = b, d = () => {
      const g = n.value;
      let y = "";
      for (const S in g)
        y += `${S}: ${g[S]};`;
      B(`.${b}`, y).mount({
        id: b,
        ssr: s,
        parent: l
      }), d = void 0;
    };
  };
  return Bt(() => {
    h();
  }), {
    themeClass: a,
    onRender: () => {
      d == null || d();
    }
  };
}
const Zo = "n-form-item";
function Tn(e, {
  defaultSize: t = "medium",
  mergedSize: n,
  mergedDisabled: r
} = {}) {
  const o = ke(Zo, null);
  We(Zo, null);
  const i = T(n ? () => n(o) : () => {
    const {
      size: s
    } = e;
    if (s) return s;
    if (o) {
      const {
        mergedSize: d
      } = o;
      if (d.value !== void 0)
        return d.value;
    }
    return t;
  }), l = T(r ? () => r(o) : () => {
    const {
      disabled: s
    } = e;
    return s !== void 0 ? s : o ? o.disabled.value : !1;
  }), a = T(() => {
    const {
      status: s
    } = e;
    return s || (o == null ? void 0 : o.mergedValidationStatus.value);
  });
  return ut(() => {
    o && o.restoreValidation();
  }), {
    mergedSizeRef: i,
    mergedDisabledRef: l,
    mergedStatusRef: a,
    nTriggerFormBlur() {
      o && o.handleContentBlur();
    },
    nTriggerFormChange() {
      o && o.handleContentChange();
    },
    nTriggerFormFocus() {
      o && o.handleContentFocus();
    },
    nTriggerFormInput() {
      o && o.handleContentInput();
    }
  };
}
const Ru = {
  name: "en-US",
  global: {
    undo: "Undo",
    redo: "Redo",
    confirm: "Confirm",
    clear: "Clear"
  },
  Popconfirm: {
    positiveText: "Confirm",
    negativeText: "Cancel"
  },
  Cascader: {
    placeholder: "Please Select",
    loading: "Loading",
    loadingRequiredMessage: (e) => `Please load all ${e}'s descendants before checking it.`
  },
  Time: {
    dateFormat: "yyyy-MM-dd",
    dateTimeFormat: "yyyy-MM-dd HH:mm:ss"
  },
  DatePicker: {
    yearFormat: "yyyy",
    monthFormat: "MMM",
    dayFormat: "eeeeee",
    yearTypeFormat: "yyyy",
    monthTypeFormat: "yyyy-MM",
    dateFormat: "yyyy-MM-dd",
    dateTimeFormat: "yyyy-MM-dd HH:mm:ss",
    quarterFormat: "yyyy-qqq",
    weekFormat: "YYYY-w",
    clear: "Clear",
    now: "Now",
    confirm: "Confirm",
    selectTime: "Select Time",
    selectDate: "Select Date",
    datePlaceholder: "Select Date",
    datetimePlaceholder: "Select Date and Time",
    monthPlaceholder: "Select Month",
    yearPlaceholder: "Select Year",
    quarterPlaceholder: "Select Quarter",
    weekPlaceholder: "Select Week",
    startDatePlaceholder: "Start Date",
    endDatePlaceholder: "End Date",
    startDatetimePlaceholder: "Start Date and Time",
    endDatetimePlaceholder: "End Date and Time",
    startMonthPlaceholder: "Start Month",
    endMonthPlaceholder: "End Month",
    monthBeforeYear: !0,
    firstDayOfWeek: 6,
    today: "Today"
  },
  DataTable: {
    checkTableAll: "Select all in the table",
    uncheckTableAll: "Unselect all in the table",
    confirm: "Confirm",
    clear: "Clear"
  },
  LegacyTransfer: {
    sourceTitle: "Source",
    targetTitle: "Target"
  },
  Transfer: {
    selectAll: "Select all",
    unselectAll: "Unselect all",
    clearAll: "Clear",
    total: (e) => `Total ${e} items`,
    selected: (e) => `${e} items selected`
  },
  Empty: {
    description: "No Data"
  },
  Select: {
    placeholder: "Please Select"
  },
  TimePicker: {
    placeholder: "Select Time",
    positiveText: "OK",
    negativeText: "Cancel",
    now: "Now",
    clear: "Clear"
  },
  Pagination: {
    goto: "Goto",
    selectionSuffix: "page"
  },
  DynamicTags: {
    add: "Add"
  },
  Log: {
    loading: "Loading"
  },
  Input: {
    placeholder: "Please Input"
  },
  InputNumber: {
    placeholder: "Please Input"
  },
  DynamicInput: {
    create: "Create"
  },
  ThemeEditor: {
    title: "Theme Editor",
    clearAllVars: "Clear All Variables",
    clearSearch: "Clear Search",
    filterCompName: "Filter Component Name",
    filterVarName: "Filter Variable Name",
    import: "Import",
    export: "Export",
    restore: "Reset to Default"
  },
  Image: {
    tipPrevious: "Previous picture (←)",
    tipNext: "Next picture (→)",
    tipCounterclockwise: "Counterclockwise",
    tipClockwise: "Clockwise",
    tipZoomOut: "Zoom out",
    tipZoomIn: "Zoom in",
    tipDownload: "Download",
    tipClose: "Close (Esc)",
    // TODO: translation
    tipOriginalSize: "Zoom to original size"
  }
}, lv = {
  name: "zh-CN",
  global: {
    undo: "撤销",
    redo: "重做",
    confirm: "确认",
    clear: "清除"
  },
  Popconfirm: {
    positiveText: "确认",
    negativeText: "取消"
  },
  Cascader: {
    placeholder: "请选择",
    loading: "加载中",
    loadingRequiredMessage: (e) => `加载全部 ${e} 的子节点后才可选中`
  },
  Time: {
    dateFormat: "yyyy-MM-dd",
    dateTimeFormat: "yyyy-MM-dd HH:mm:ss"
  },
  DatePicker: {
    yearFormat: "yyyy年",
    monthFormat: "MMM",
    dayFormat: "eeeeee",
    yearTypeFormat: "yyyy",
    monthTypeFormat: "yyyy-MM",
    dateFormat: "yyyy-MM-dd",
    dateTimeFormat: "yyyy-MM-dd HH:mm:ss",
    quarterFormat: "yyyy-qqq",
    weekFormat: "YYYY-w周",
    clear: "清除",
    now: "此刻",
    confirm: "确认",
    selectTime: "选择时间",
    selectDate: "选择日期",
    datePlaceholder: "选择日期",
    datetimePlaceholder: "选择日期时间",
    monthPlaceholder: "选择月份",
    yearPlaceholder: "选择年份",
    quarterPlaceholder: "选择季度",
    weekPlaceholder: "选择周",
    startDatePlaceholder: "开始日期",
    endDatePlaceholder: "结束日期",
    startDatetimePlaceholder: "开始日期时间",
    endDatetimePlaceholder: "结束日期时间",
    startMonthPlaceholder: "开始月份",
    endMonthPlaceholder: "结束月份",
    monthBeforeYear: !1,
    firstDayOfWeek: 0,
    today: "今天"
  },
  DataTable: {
    checkTableAll: "选择全部表格数据",
    uncheckTableAll: "取消选择全部表格数据",
    confirm: "确认",
    clear: "重置"
  },
  LegacyTransfer: {
    sourceTitle: "源项",
    targetTitle: "目标项"
  },
  Transfer: {
    selectAll: "全选",
    clearAll: "清除",
    unselectAll: "取消全选",
    total: (e) => `共 ${e} 项`,
    selected: (e) => `已选 ${e} 项`
  },
  Empty: {
    description: "无数据"
  },
  Select: {
    placeholder: "请选择"
  },
  TimePicker: {
    placeholder: "请选择时间",
    positiveText: "确认",
    negativeText: "取消",
    now: "此刻",
    clear: "清除"
  },
  Pagination: {
    goto: "跳至",
    selectionSuffix: "页"
  },
  DynamicTags: {
    add: "添加"
  },
  Log: {
    loading: "加载中"
  },
  Input: {
    placeholder: "请输入"
  },
  InputNumber: {
    placeholder: "请输入"
  },
  DynamicInput: {
    create: "添加"
  },
  ThemeEditor: {
    title: "主题编辑器",
    clearAllVars: "清除全部变量",
    clearSearch: "清除搜索",
    filterCompName: "过滤组件名",
    filterVarName: "过滤变量名",
    import: "导入",
    export: "导出",
    restore: "恢复默认"
  },
  Image: {
    tipPrevious: "上一张（←）",
    tipNext: "下一张（→）",
    tipCounterclockwise: "向左旋转",
    tipClockwise: "向右旋转",
    tipZoomOut: "缩小",
    tipZoomIn: "放大",
    tipDownload: "下载",
    tipClose: "关闭（Esc）",
    tipOriginalSize: "缩放到原始尺寸"
  }
};
function Hn(e) {
  return (t = {}) => {
    const n = t.width ? String(t.width) : e.defaultWidth;
    return e.formats[n] || e.formats[e.defaultWidth];
  };
}
function Yt(e) {
  return (t, n) => {
    const r = n != null && n.context ? String(n.context) : "standalone";
    let o;
    if (r === "formatting" && e.formattingValues) {
      const l = e.defaultFormattingWidth || e.defaultWidth, a = n != null && n.width ? String(n.width) : l;
      o = e.formattingValues[a] || e.formattingValues[l];
    } else {
      const l = e.defaultWidth, a = n != null && n.width ? String(n.width) : e.defaultWidth;
      o = e.values[a] || e.values[l];
    }
    const i = e.argumentCallback ? e.argumentCallback(t) : t;
    return o[i];
  };
}
function Zt(e) {
  return (t, n = {}) => {
    const r = n.width, o = r && e.matchPatterns[r] || e.matchPatterns[e.defaultMatchWidth], i = t.match(o);
    if (!i)
      return null;
    const l = i[0], a = r && e.parsePatterns[r] || e.parsePatterns[e.defaultParseWidth], s = Array.isArray(a) ? zu(a, (h) => h.test(l)) : (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
      Pu(a, (h) => h.test(l))
    );
    let d;
    d = e.valueCallback ? e.valueCallback(s) : s, d = n.valueCallback ? (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
      n.valueCallback(d)
    ) : d;
    const u = t.slice(l.length);
    return { value: d, rest: u };
  };
}
function Pu(e, t) {
  for (const n in e)
    if (Object.prototype.hasOwnProperty.call(e, n) && t(e[n]))
      return n;
}
function zu(e, t) {
  for (let n = 0; n < e.length; n++)
    if (t(e[n]))
      return n;
}
function Jl(e) {
  return (t, n = {}) => {
    const r = t.match(e.matchPattern);
    if (!r) return null;
    const o = r[0], i = t.match(e.parsePattern);
    if (!i) return null;
    let l = e.valueCallback ? e.valueCallback(i[0]) : i[0];
    l = n.valueCallback ? n.valueCallback(l) : l;
    const a = t.slice(o.length);
    return { value: l, rest: a };
  };
}
function $u(e) {
  const t = Object.prototype.toString.call(e);
  return e instanceof Date || typeof e == "object" && t === "[object Date]" ? new e.constructor(+e) : typeof e == "number" || t === "[object Number]" || typeof e == "string" || t === "[object String]" ? new Date(e) : /* @__PURE__ */ new Date(NaN);
}
let Tu = {};
function Mu() {
  return Tu;
}
function Ra(e, t) {
  var a, s, d, u, h, b, m, f;
  const n = Mu(), r = (f = (m = (u = (d = t == null ? void 0 : t.weekStartsOn) != null ? d : (s = (a = t == null ? void 0 : t.locale) == null ? void 0 : a.options) == null ? void 0 : s.weekStartsOn) != null ? u : n.weekStartsOn) != null ? m : (b = (h = n.locale) == null ? void 0 : h.options) == null ? void 0 : b.weekStartsOn) != null ? f : 0, o = $u(e), i = o.getDay(), l = (i < r ? 7 : 0) + i - r;
  return o.setDate(o.getDate() - l), o.setHours(0, 0, 0, 0), o;
}
function Fu(e, t, n) {
  const r = Ra(e, n), o = Ra(t, n);
  return +r == +o;
}
const Ou = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
}, Bu = (e, t, n) => {
  let r;
  const o = Ou[e];
  return typeof o == "string" ? r = o : t === 1 ? r = o.one : r = o.other.replace("{{count}}", t.toString()), n != null && n.addSuffix ? n.comparison && n.comparison > 0 ? "in " + r : r + " ago" : r;
}, Eu = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
}, Iu = (e, t, n, r) => Eu[e], _u = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
}, Au = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
}, Lu = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
}, Hu = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
}, Du = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
}, ju = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
}, Wu = (e, t) => {
  const n = Number(e), r = n % 100;
  if (r > 20 || r < 10)
    switch (r % 10) {
      case 1:
        return n + "st";
      case 2:
        return n + "nd";
      case 3:
        return n + "rd";
    }
  return n + "th";
}, Nu = {
  ordinalNumber: Wu,
  era: Yt({
    values: _u,
    defaultWidth: "wide"
  }),
  quarter: Yt({
    values: Au,
    defaultWidth: "wide",
    argumentCallback: (e) => e - 1
  }),
  month: Yt({
    values: Lu,
    defaultWidth: "wide"
  }),
  day: Yt({
    values: Hu,
    defaultWidth: "wide"
  }),
  dayPeriod: Yt({
    values: Du,
    defaultWidth: "wide",
    formattingValues: ju,
    defaultFormattingWidth: "wide"
  })
}, Vu = /^(\d+)(th|st|nd|rd)?/i, Ku = /\d+/i, Uu = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
}, qu = {
  any: [/^b/i, /^(a|c)/i]
}, Gu = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
}, Xu = {
  any: [/1/i, /2/i, /3/i, /4/i]
}, Yu = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
}, Zu = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
}, Ju = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
}, Qu = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
}, ef = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
}, tf = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
}, nf = {
  ordinalNumber: Jl({
    matchPattern: Vu,
    parsePattern: Ku,
    valueCallback: (e) => parseInt(e, 10)
  }),
  era: Zt({
    matchPatterns: Uu,
    defaultMatchWidth: "wide",
    parsePatterns: qu,
    defaultParseWidth: "any"
  }),
  quarter: Zt({
    matchPatterns: Gu,
    defaultMatchWidth: "wide",
    parsePatterns: Xu,
    defaultParseWidth: "any",
    valueCallback: (e) => e + 1
  }),
  month: Zt({
    matchPatterns: Yu,
    defaultMatchWidth: "wide",
    parsePatterns: Zu,
    defaultParseWidth: "any"
  }),
  day: Zt({
    matchPatterns: Ju,
    defaultMatchWidth: "wide",
    parsePatterns: Qu,
    defaultParseWidth: "any"
  }),
  dayPeriod: Zt({
    matchPatterns: ef,
    defaultMatchWidth: "any",
    parsePatterns: tf,
    defaultParseWidth: "any"
  })
}, rf = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
}, of = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
}, af = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
}, lf = {
  date: Hn({
    formats: rf,
    defaultWidth: "full"
  }),
  time: Hn({
    formats: of,
    defaultWidth: "full"
  }),
  dateTime: Hn({
    formats: af,
    defaultWidth: "full"
  })
}, sf = {
  code: "en-US",
  formatDistance: Bu,
  formatLong: lf,
  formatRelative: Iu,
  localize: Nu,
  match: nf,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
}, df = {
  lessThanXSeconds: {
    one: "不到 1 秒",
    other: "不到 {{count}} 秒"
  },
  xSeconds: {
    one: "1 秒",
    other: "{{count}} 秒"
  },
  halfAMinute: "半分钟",
  lessThanXMinutes: {
    one: "不到 1 分钟",
    other: "不到 {{count}} 分钟"
  },
  xMinutes: {
    one: "1 分钟",
    other: "{{count}} 分钟"
  },
  xHours: {
    one: "1 小时",
    other: "{{count}} 小时"
  },
  aboutXHours: {
    one: "大约 1 小时",
    other: "大约 {{count}} 小时"
  },
  xDays: {
    one: "1 天",
    other: "{{count}} 天"
  },
  aboutXWeeks: {
    one: "大约 1 个星期",
    other: "大约 {{count}} 个星期"
  },
  xWeeks: {
    one: "1 个星期",
    other: "{{count}} 个星期"
  },
  aboutXMonths: {
    one: "大约 1 个月",
    other: "大约 {{count}} 个月"
  },
  xMonths: {
    one: "1 个月",
    other: "{{count}} 个月"
  },
  aboutXYears: {
    one: "大约 1 年",
    other: "大约 {{count}} 年"
  },
  xYears: {
    one: "1 年",
    other: "{{count}} 年"
  },
  overXYears: {
    one: "超过 1 年",
    other: "超过 {{count}} 年"
  },
  almostXYears: {
    one: "将近 1 年",
    other: "将近 {{count}} 年"
  }
}, cf = (e, t, n) => {
  let r;
  const o = df[e];
  return typeof o == "string" ? r = o : t === 1 ? r = o.one : r = o.other.replace("{{count}}", String(t)), n != null && n.addSuffix ? n.comparison && n.comparison > 0 ? r + "内" : r + "前" : r;
}, uf = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd"
}, ff = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm"
}, hf = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
}, pf = {
  date: Hn({
    formats: uf,
    defaultWidth: "full"
  }),
  time: Hn({
    formats: ff,
    defaultWidth: "full"
  }),
  dateTime: Hn({
    formats: hf,
    defaultWidth: "full"
  })
};
function Pa(e, t, n) {
  const r = "eeee p";
  return Fu(e, t, n) ? r : e.getTime() > t.getTime() ? "'下个'" + r : "'上个'" + r;
}
const bf = {
  lastWeek: Pa,
  // days before yesterday, maybe in this week or last week
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: Pa,
  // days after tomorrow, maybe in this week or next week
  other: "PP p"
}, gf = (e, t, n, r) => {
  const o = bf[e];
  return typeof o == "function" ? o(t, n, r) : o;
}, mf = {
  narrow: ["前", "公元"],
  abbreviated: ["前", "公元"],
  wide: ["公元前", "公元"]
}, vf = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["第一季", "第二季", "第三季", "第四季"],
  wide: ["第一季度", "第二季度", "第三季度", "第四季度"]
}, xf = {
  narrow: [
    "一",
    "二",
    "三",
    "四",
    "五",
    "六",
    "七",
    "八",
    "九",
    "十",
    "十一",
    "十二"
  ],
  abbreviated: [
    "1月",
    "2月",
    "3月",
    "4月",
    "5月",
    "6月",
    "7月",
    "8月",
    "9月",
    "10月",
    "11月",
    "12月"
  ],
  wide: [
    "一月",
    "二月",
    "三月",
    "四月",
    "五月",
    "六月",
    "七月",
    "八月",
    "九月",
    "十月",
    "十一月",
    "十二月"
  ]
}, yf = {
  narrow: ["日", "一", "二", "三", "四", "五", "六"],
  short: ["日", "一", "二", "三", "四", "五", "六"],
  abbreviated: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
  wide: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
}, wf = {
  narrow: {
    am: "上",
    pm: "下",
    midnight: "凌晨",
    noon: "午",
    morning: "早",
    afternoon: "下午",
    evening: "晚",
    night: "夜"
  },
  abbreviated: {
    am: "上午",
    pm: "下午",
    midnight: "凌晨",
    noon: "中午",
    morning: "早晨",
    afternoon: "中午",
    evening: "晚上",
    night: "夜间"
  },
  wide: {
    am: "上午",
    pm: "下午",
    midnight: "凌晨",
    noon: "中午",
    morning: "早晨",
    afternoon: "中午",
    evening: "晚上",
    night: "夜间"
  }
}, Cf = {
  narrow: {
    am: "上",
    pm: "下",
    midnight: "凌晨",
    noon: "午",
    morning: "早",
    afternoon: "下午",
    evening: "晚",
    night: "夜"
  },
  abbreviated: {
    am: "上午",
    pm: "下午",
    midnight: "凌晨",
    noon: "中午",
    morning: "早晨",
    afternoon: "中午",
    evening: "晚上",
    night: "夜间"
  },
  wide: {
    am: "上午",
    pm: "下午",
    midnight: "凌晨",
    noon: "中午",
    morning: "早晨",
    afternoon: "中午",
    evening: "晚上",
    night: "夜间"
  }
}, Sf = (e, t) => {
  const n = Number(e);
  switch (t == null ? void 0 : t.unit) {
    case "date":
      return n.toString() + "日";
    case "hour":
      return n.toString() + "时";
    case "minute":
      return n.toString() + "分";
    case "second":
      return n.toString() + "秒";
    default:
      return "第 " + n.toString();
  }
}, kf = {
  ordinalNumber: Sf,
  era: Yt({
    values: mf,
    defaultWidth: "wide"
  }),
  quarter: Yt({
    values: vf,
    defaultWidth: "wide",
    argumentCallback: (e) => e - 1
  }),
  month: Yt({
    values: xf,
    defaultWidth: "wide"
  }),
  day: Yt({
    values: yf,
    defaultWidth: "wide"
  }),
  dayPeriod: Yt({
    values: wf,
    defaultWidth: "wide",
    formattingValues: Cf,
    defaultFormattingWidth: "wide"
  })
}, Rf = /^(第\s*)?\d+(日|时|分|秒)?/i, Pf = /\d+/i, zf = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
}, $f = {
  any: [/^(前)/i, /^(公元)/i]
}, Tf = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻钟/i
}, Mf = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
}, Ff = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
}, Of = {
  narrow: [
    /^一/i,
    /^二/i,
    /^三/i,
    /^四/i,
    /^五/i,
    /^六/i,
    /^七/i,
    /^八/i,
    /^九/i,
    /^十(?!(一|二))/i,
    /^十一/i,
    /^十二/i
  ],
  any: [
    /^一|1/i,
    /^二|2/i,
    /^三|3/i,
    /^四|4/i,
    /^五|5/i,
    /^六|6/i,
    /^七|7/i,
    /^八|8/i,
    /^九|9/i,
    /^十(?!(一|二))|10/i,
    /^十一|11/i,
    /^十二|12/i
  ]
}, Bf = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^周[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
}, Ef = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
}, If = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
}, _f = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
}, Af = {
  ordinalNumber: Jl({
    matchPattern: Rf,
    parsePattern: Pf,
    valueCallback: (e) => parseInt(e, 10)
  }),
  era: Zt({
    matchPatterns: zf,
    defaultMatchWidth: "wide",
    parsePatterns: $f,
    defaultParseWidth: "any"
  }),
  quarter: Zt({
    matchPatterns: Tf,
    defaultMatchWidth: "wide",
    parsePatterns: Mf,
    defaultParseWidth: "any",
    valueCallback: (e) => e + 1
  }),
  month: Zt({
    matchPatterns: Ff,
    defaultMatchWidth: "wide",
    parsePatterns: Of,
    defaultParseWidth: "any"
  }),
  day: Zt({
    matchPatterns: Bf,
    defaultMatchWidth: "wide",
    parsePatterns: Ef,
    defaultParseWidth: "any"
  }),
  dayPeriod: Zt({
    matchPatterns: If,
    defaultMatchWidth: "any",
    parsePatterns: _f,
    defaultParseWidth: "any"
  })
}, Lf = {
  code: "zh-CN",
  formatDistance: cf,
  formatLong: pf,
  formatRelative: gf,
  localize: kf,
  match: Af,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
}, Hf = {
  name: "en-US",
  locale: sf
}, sv = {
  name: "zh-CN",
  locale: Lf
};
function Pn(e) {
  const {
    mergedLocaleRef: t,
    mergedDateLocaleRef: n
  } = ke(Ut, null) || {}, r = T(() => {
    var i, l;
    return (l = (i = t == null ? void 0 : t.value) === null || i === void 0 ? void 0 : i[e]) !== null && l !== void 0 ? l : Ru[e];
  });
  return {
    dateLocaleRef: T(() => {
      var i;
      return (i = n == null ? void 0 : n.value) !== null && i !== void 0 ? i : Hf;
    }),
    localeRef: r
  };
}
const Wn = "naive-ui-style";
function $t(e, t, n) {
  if (!t) return;
  const r = hn(), o = T(() => {
    const {
      value: a
    } = t;
    if (!a)
      return;
    const s = a[e];
    if (s)
      return s;
  }), i = ke(Ut, null), l = () => {
    Bt(() => {
      const {
        value: a
      } = n, s = `${a}${e}Rtl`;
      if (Kd(s, r)) return;
      const {
        value: d
      } = o;
      d && d.style.mount({
        id: s,
        head: !0,
        anchorMetaName: Wn,
        props: {
          bPrefix: a ? `.${a}-` : void 0
        },
        ssr: r,
        parent: i == null ? void 0 : i.styleMountTarget
      });
    });
  };
  return r ? l() : $n(l), o;
}
const pn = {
  fontFamily: 'v-sans, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
  fontFamilyMono: "v-mono, SFMono-Regular, Menlo, Consolas, Courier, monospace",
  fontWeight: "400",
  fontWeightStrong: "500",
  cubicBezierEaseInOut: "cubic-bezier(.4, 0, .2, 1)",
  cubicBezierEaseOut: "cubic-bezier(0, 0, .2, 1)",
  cubicBezierEaseIn: "cubic-bezier(.4, 0, 1, 1)",
  borderRadius: "3px",
  borderRadiusSmall: "2px",
  fontSize: "14px",
  fontSizeMini: "12px",
  fontSizeTiny: "12px",
  fontSizeSmall: "14px",
  fontSizeMedium: "14px",
  fontSizeLarge: "15px",
  fontSizeHuge: "16px",
  lineHeight: "1.6",
  heightMini: "16px",
  // private now, it's too small
  heightTiny: "22px",
  heightSmall: "28px",
  heightMedium: "34px",
  heightLarge: "40px",
  heightHuge: "46px"
}, {
  fontSize: Df,
  fontFamily: jf,
  lineHeight: Wf
} = pn, Ql = B("body", `
 margin: 0;
 font-size: ${Df};
 font-family: ${jf};
 line-height: ${Wf};
 -webkit-text-size-adjust: 100%;
 -webkit-tap-highlight-color: transparent;
`, [B("input", `
 font-family: inherit;
 font-size: inherit;
 `)]);
function Mn(e, t, n) {
  if (!t)
    return;
  const r = hn(), o = ke(Ut, null), i = () => {
    const l = n.value;
    t.mount({
      id: l === void 0 ? e : l + e,
      head: !0,
      anchorMetaName: Wn,
      props: {
        bPrefix: l ? `.${l}-` : void 0
      },
      ssr: r,
      parent: o == null ? void 0 : o.styleMountTarget
    }), o != null && o.preflightStyleDisabled || Ql.mount({
      id: "n-global",
      head: !0,
      anchorMetaName: Wn,
      ssr: r,
      parent: o == null ? void 0 : o.styleMountTarget
    });
  };
  r ? i() : $n(i);
}
function we(e, t, n, r, o, i) {
  const l = hn(), a = ke(Ut, null);
  if (n) {
    const d = () => {
      const u = i == null ? void 0 : i.value;
      n.mount({
        id: u === void 0 ? t : u + t,
        head: !0,
        props: {
          bPrefix: u ? `.${u}-` : void 0
        },
        anchorMetaName: Wn,
        ssr: l,
        parent: a == null ? void 0 : a.styleMountTarget
      }), a != null && a.preflightStyleDisabled || Ql.mount({
        id: "n-global",
        head: !0,
        anchorMetaName: Wn,
        ssr: l,
        parent: a == null ? void 0 : a.styleMountTarget
      });
    };
    l ? d() : $n(d);
  }
  return T(() => {
    var d;
    const {
      theme: {
        common: u,
        self: h,
        peers: b = {}
      } = {},
      themeOverrides: m = {},
      builtinThemeOverrides: f = {}
    } = o, {
      common: p,
      peers: v
    } = m, {
      common: g = void 0,
      [e]: {
        common: y = void 0,
        self: S = void 0,
        peers: w = {}
      } = {}
    } = (a == null ? void 0 : a.mergedThemeRef.value) || {}, {
      common: C = void 0,
      [e]: k = {}
    } = (a == null ? void 0 : a.mergedThemeOverridesRef.value) || {}, {
      common: x,
      peers: z = {}
    } = k, $ = ar({}, u || y || g || r.common, C, x, p), M = ar(
      // {}, executed every time, no need for empty obj
      (d = h || S || r.self) === null || d === void 0 ? void 0 : d($),
      f,
      k,
      m
    );
    return {
      common: $,
      self: M,
      peers: ar({}, r.peers, w, b),
      peerOverrides: ar({}, f.peers, z, v)
    };
  });
}
we.props = {
  theme: Object,
  themeOverrides: Object,
  builtinThemeOverrides: Object
};
const Nf = R("base-icon", `
 height: 1em;
 width: 1em;
 line-height: 1em;
 text-align: center;
 display: inline-block;
 position: relative;
 fill: currentColor;
 transform: translateZ(0);
`, [B("svg", `
 height: 1em;
 width: 1em;
 `)]), ct = ie({
  name: "BaseIcon",
  props: {
    role: String,
    ariaLabel: String,
    ariaDisabled: {
      type: Boolean,
      default: void 0
    },
    ariaHidden: {
      type: Boolean,
      default: void 0
    },
    clsPrefix: {
      type: String,
      required: !0
    },
    onClick: Function,
    onMousedown: Function,
    onMouseup: Function
  },
  setup(e) {
    Mn("-base-icon", Nf, ae(e, "clsPrefix"));
  },
  render() {
    return c("i", {
      class: `${this.clsPrefix}-base-icon`,
      onClick: this.onClick,
      onMousedown: this.onMousedown,
      onMouseup: this.onMouseup,
      role: this.role,
      "aria-label": this.ariaLabel,
      "aria-hidden": this.ariaHidden,
      "aria-disabled": this.ariaDisabled
    }, this.$slots);
  }
}), Gn = ie({
  name: "BaseIconSwitchTransition",
  setup(e, {
    slots: t
  }) {
    const n = Cr();
    return () => c(Ht, {
      name: "icon-switch-transition",
      appear: n.value
    }, t);
  }
}), Vf = ie({
  name: "Add",
  render() {
    return c("svg", {
      width: "512",
      height: "512",
      viewBox: "0 0 512 512",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M256 112V400M400 256H112",
      stroke: "currentColor",
      "stroke-width": "32",
      "stroke-linecap": "round",
      "stroke-linejoin": "round"
    }));
  }
}), Kf = ie({
  name: "ArrowDown",
  render() {
    return c("svg", {
      viewBox: "0 0 28 28",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("g", {
      stroke: "none",
      "stroke-width": "1",
      "fill-rule": "evenodd"
    }, c("g", {
      "fill-rule": "nonzero"
    }, c("path", {
      d: "M23.7916,15.2664 C24.0788,14.9679 24.0696,14.4931 23.7711,14.206 C23.4726,13.9188 22.9978,13.928 22.7106,14.2265 L14.7511,22.5007 L14.7511,3.74792 C14.7511,3.33371 14.4153,2.99792 14.0011,2.99792 C13.5869,2.99792 13.2511,3.33371 13.2511,3.74793 L13.2511,22.4998 L5.29259,14.2265 C5.00543,13.928 4.53064,13.9188 4.23213,14.206 C3.93361,14.4931 3.9244,14.9679 4.21157,15.2664 L13.2809,24.6944 C13.6743,25.1034 14.3289,25.1034 14.7223,24.6944 L23.7916,15.2664 Z"
    }))));
  }
});
function Xn(e, t) {
  const n = ie({
    render() {
      return t();
    }
  });
  return ie({
    name: kd(e),
    setup() {
      var r;
      const o = (r = ke(Ut, null)) === null || r === void 0 ? void 0 : r.mergedIconsRef;
      return () => {
        var i;
        const l = (i = o == null ? void 0 : o.value) === null || i === void 0 ? void 0 : i[e];
        return l ? l() : c(n, null);
      };
    }
  });
}
const za = ie({
  name: "Backward",
  render() {
    return c("svg", {
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M12.2674 15.793C11.9675 16.0787 11.4927 16.0672 11.2071 15.7673L6.20572 10.5168C5.9298 10.2271 5.9298 9.7719 6.20572 9.48223L11.2071 4.23177C11.4927 3.93184 11.9675 3.92031 12.2674 4.206C12.5673 4.49169 12.5789 4.96642 12.2932 5.26634L7.78458 9.99952L12.2932 14.7327C12.5789 15.0326 12.5673 15.5074 12.2674 15.793Z",
      fill: "currentColor"
    }));
  }
}), Uf = ie({
  name: "Checkmark",
  render() {
    return c("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 16 16"
    }, c("g", {
      fill: "none"
    }, c("path", {
      d: "M14.046 3.486a.75.75 0 0 1-.032 1.06l-7.93 7.474a.85.85 0 0 1-1.188-.022l-2.68-2.72a.75.75 0 1 1 1.068-1.053l2.234 2.267l7.468-7.038a.75.75 0 0 1 1.06.032z",
      fill: "currentColor"
    })));
  }
}), es = ie({
  name: "ChevronDown",
  render() {
    return c("svg", {
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M3.14645 5.64645C3.34171 5.45118 3.65829 5.45118 3.85355 5.64645L8 9.79289L12.1464 5.64645C12.3417 5.45118 12.6583 5.45118 12.8536 5.64645C13.0488 5.84171 13.0488 6.15829 12.8536 6.35355L8.35355 10.8536C8.15829 11.0488 7.84171 11.0488 7.64645 10.8536L3.14645 6.35355C2.95118 6.15829 2.95118 5.84171 3.14645 5.64645Z",
      fill: "currentColor"
    }));
  }
}), ts = ie({
  name: "ChevronRight",
  render() {
    return c("svg", {
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M5.64645 3.14645C5.45118 3.34171 5.45118 3.65829 5.64645 3.85355L9.79289 8L5.64645 12.1464C5.45118 12.3417 5.45118 12.6583 5.64645 12.8536C5.84171 13.0488 6.15829 13.0488 6.35355 12.8536L10.8536 8.35355C11.0488 8.15829 11.0488 7.84171 10.8536 7.64645L6.35355 3.14645C6.15829 2.95118 5.84171 2.95118 5.64645 3.14645Z",
      fill: "currentColor"
    }));
  }
}), qf = Xn("clear", () => c("svg", {
  viewBox: "0 0 16 16",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  fill: "none",
  "fill-rule": "evenodd"
}, c("g", {
  fill: "currentColor",
  "fill-rule": "nonzero"
}, c("path", {
  d: "M8,2 C11.3137085,2 14,4.6862915 14,8 C14,11.3137085 11.3137085,14 8,14 C4.6862915,14 2,11.3137085 2,8 C2,4.6862915 4.6862915,2 8,2 Z M6.5343055,5.83859116 C6.33943736,5.70359511 6.07001296,5.72288026 5.89644661,5.89644661 L5.89644661,5.89644661 L5.83859116,5.9656945 C5.70359511,6.16056264 5.72288026,6.42998704 5.89644661,6.60355339 L5.89644661,6.60355339 L7.293,8 L5.89644661,9.39644661 L5.83859116,9.4656945 C5.70359511,9.66056264 5.72288026,9.92998704 5.89644661,10.1035534 L5.89644661,10.1035534 L5.9656945,10.1614088 C6.16056264,10.2964049 6.42998704,10.2771197 6.60355339,10.1035534 L6.60355339,10.1035534 L8,8.707 L9.39644661,10.1035534 L9.4656945,10.1614088 C9.66056264,10.2964049 9.92998704,10.2771197 10.1035534,10.1035534 L10.1035534,10.1035534 L10.1614088,10.0343055 C10.2964049,9.83943736 10.2771197,9.57001296 10.1035534,9.39644661 L10.1035534,9.39644661 L8.707,8 L10.1035534,6.60355339 L10.1614088,6.5343055 C10.2964049,6.33943736 10.2771197,6.07001296 10.1035534,5.89644661 L10.1035534,5.89644661 L10.0343055,5.83859116 C9.83943736,5.70359511 9.57001296,5.72288026 9.39644661,5.89644661 L9.39644661,5.89644661 L8,7.293 L6.60355339,5.89644661 Z"
}))))), ns = Xn("close", () => c("svg", {
  viewBox: "0 0 12 12",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "aria-hidden": !0
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  fill: "none",
  "fill-rule": "evenodd"
}, c("g", {
  fill: "currentColor",
  "fill-rule": "nonzero"
}, c("path", {
  d: "M2.08859116,2.2156945 L2.14644661,2.14644661 C2.32001296,1.97288026 2.58943736,1.95359511 2.7843055,2.08859116 L2.85355339,2.14644661 L6,5.293 L9.14644661,2.14644661 C9.34170876,1.95118446 9.65829124,1.95118446 9.85355339,2.14644661 C10.0488155,2.34170876 10.0488155,2.65829124 9.85355339,2.85355339 L6.707,6 L9.85355339,9.14644661 C10.0271197,9.32001296 10.0464049,9.58943736 9.91140884,9.7843055 L9.85355339,9.85355339 C9.67998704,10.0271197 9.41056264,10.0464049 9.2156945,9.91140884 L9.14644661,9.85355339 L6,6.707 L2.85355339,9.85355339 C2.65829124,10.0488155 2.34170876,10.0488155 2.14644661,9.85355339 C1.95118446,9.65829124 1.95118446,9.34170876 2.14644661,9.14644661 L5.293,6 L2.14644661,2.85355339 C1.97288026,2.67998704 1.95359511,2.41056264 2.08859116,2.2156945 L2.14644661,2.14644661 L2.08859116,2.2156945 Z"
}))))), Gf = ie({
  name: "Empty",
  render() {
    return c("svg", {
      viewBox: "0 0 28 28",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M26 7.5C26 11.0899 23.0899 14 19.5 14C15.9101 14 13 11.0899 13 7.5C13 3.91015 15.9101 1 19.5 1C23.0899 1 26 3.91015 26 7.5ZM16.8536 4.14645C16.6583 3.95118 16.3417 3.95118 16.1464 4.14645C15.9512 4.34171 15.9512 4.65829 16.1464 4.85355L18.7929 7.5L16.1464 10.1464C15.9512 10.3417 15.9512 10.6583 16.1464 10.8536C16.3417 11.0488 16.6583 11.0488 16.8536 10.8536L19.5 8.20711L22.1464 10.8536C22.3417 11.0488 22.6583 11.0488 22.8536 10.8536C23.0488 10.6583 23.0488 10.3417 22.8536 10.1464L20.2071 7.5L22.8536 4.85355C23.0488 4.65829 23.0488 4.34171 22.8536 4.14645C22.6583 3.95118 22.3417 3.95118 22.1464 4.14645L19.5 6.79289L16.8536 4.14645Z",
      fill: "currentColor"
    }), c("path", {
      d: "M25 22.75V12.5991C24.5572 13.0765 24.053 13.4961 23.5 13.8454V16H17.5L17.3982 16.0068C17.0322 16.0565 16.75 16.3703 16.75 16.75C16.75 18.2688 15.5188 19.5 14 19.5C12.4812 19.5 11.25 18.2688 11.25 16.75L11.2432 16.6482C11.1935 16.2822 10.8797 16 10.5 16H4.5V7.25C4.5 6.2835 5.2835 5.5 6.25 5.5H12.2696C12.4146 4.97463 12.6153 4.47237 12.865 4H6.25C4.45507 4 3 5.45507 3 7.25V22.75C3 24.5449 4.45507 26 6.25 26H21.75C23.5449 26 25 24.5449 25 22.75ZM4.5 22.75V17.5H9.81597L9.85751 17.7041C10.2905 19.5919 11.9808 21 14 21L14.215 20.9947C16.2095 20.8953 17.842 19.4209 18.184 17.5H23.5V22.75C23.5 23.7165 22.7165 24.5 21.75 24.5H6.25C5.2835 24.5 4.5 23.7165 4.5 22.75Z",
      fill: "currentColor"
    }));
  }
}), rs = Xn("error", () => c("svg", {
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  "fill-rule": "evenodd"
}, c("g", {
  "fill-rule": "nonzero"
}, c("path", {
  d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M17.8838835,16.1161165 L17.7823881,16.0249942 C17.3266086,15.6583353 16.6733914,15.6583353 16.2176119,16.0249942 L16.1161165,16.1161165 L16.0249942,16.2176119 C15.6583353,16.6733914 15.6583353,17.3266086 16.0249942,17.7823881 L16.1161165,17.8838835 L22.233,24 L16.1161165,30.1161165 L16.0249942,30.2176119 C15.6583353,30.6733914 15.6583353,31.3266086 16.0249942,31.7823881 L16.1161165,31.8838835 L16.2176119,31.9750058 C16.6733914,32.3416647 17.3266086,32.3416647 17.7823881,31.9750058 L17.8838835,31.8838835 L24,25.767 L30.1161165,31.8838835 L30.2176119,31.9750058 C30.6733914,32.3416647 31.3266086,32.3416647 31.7823881,31.9750058 L31.8838835,31.8838835 L31.9750058,31.7823881 C32.3416647,31.3266086 32.3416647,30.6733914 31.9750058,30.2176119 L31.8838835,30.1161165 L25.767,24 L31.8838835,17.8838835 L31.9750058,17.7823881 C32.3416647,17.3266086 32.3416647,16.6733914 31.9750058,16.2176119 L31.8838835,16.1161165 L31.7823881,16.0249942 C31.3266086,15.6583353 30.6733914,15.6583353 30.2176119,16.0249942 L30.1161165,16.1161165 L24,22.233 L17.8838835,16.1161165 L17.7823881,16.0249942 L17.8838835,16.1161165 Z"
}))))), Xf = ie({
  name: "Eye",
  render() {
    return c("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, c("path", {
      d: "M255.66 112c-77.94 0-157.89 45.11-220.83 135.33a16 16 0 0 0-.27 17.77C82.92 340.8 161.8 400 255.66 400c92.84 0 173.34-59.38 221.79-135.25a16.14 16.14 0 0 0 0-17.47C428.89 172.28 347.8 112 255.66 112z",
      fill: "none",
      stroke: "currentColor",
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-width": "32"
    }), c("circle", {
      cx: "256",
      cy: "256",
      r: "80",
      fill: "none",
      stroke: "currentColor",
      "stroke-miterlimit": "10",
      "stroke-width": "32"
    }));
  }
}), Yf = ie({
  name: "EyeOff",
  render() {
    return c("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, c("path", {
      d: "M432 448a15.92 15.92 0 0 1-11.31-4.69l-352-352a16 16 0 0 1 22.62-22.62l352 352A16 16 0 0 1 432 448z",
      fill: "currentColor"
    }), c("path", {
      d: "M255.66 384c-41.49 0-81.5-12.28-118.92-36.5c-34.07-22-64.74-53.51-88.7-91v-.08c19.94-28.57 41.78-52.73 65.24-72.21a2 2 0 0 0 .14-2.94L93.5 161.38a2 2 0 0 0-2.71-.12c-24.92 21-48.05 46.76-69.08 76.92a31.92 31.92 0 0 0-.64 35.54c26.41 41.33 60.4 76.14 98.28 100.65C162 402 207.9 416 255.66 416a239.13 239.13 0 0 0 75.8-12.58a2 2 0 0 0 .77-3.31l-21.58-21.58a4 4 0 0 0-3.83-1a204.8 204.8 0 0 1-51.16 6.47z",
      fill: "currentColor"
    }), c("path", {
      d: "M490.84 238.6c-26.46-40.92-60.79-75.68-99.27-100.53C349 110.55 302 96 255.66 96a227.34 227.34 0 0 0-74.89 12.83a2 2 0 0 0-.75 3.31l21.55 21.55a4 4 0 0 0 3.88 1a192.82 192.82 0 0 1 50.21-6.69c40.69 0 80.58 12.43 118.55 37c34.71 22.4 65.74 53.88 89.76 91a.13.13 0 0 1 0 .16a310.72 310.72 0 0 1-64.12 72.73a2 2 0 0 0-.15 2.95l19.9 19.89a2 2 0 0 0 2.7.13a343.49 343.49 0 0 0 68.64-78.48a32.2 32.2 0 0 0-.1-34.78z",
      fill: "currentColor"
    }), c("path", {
      d: "M256 160a95.88 95.88 0 0 0-21.37 2.4a2 2 0 0 0-1 3.38l112.59 112.56a2 2 0 0 0 3.38-1A96 96 0 0 0 256 160z",
      fill: "currentColor"
    }), c("path", {
      d: "M165.78 233.66a2 2 0 0 0-3.38 1a96 96 0 0 0 115 115a2 2 0 0 0 1-3.38z",
      fill: "currentColor"
    }));
  }
}), $a = ie({
  name: "FastBackward",
  render() {
    return c("svg", {
      viewBox: "0 0 20 20",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("g", {
      stroke: "none",
      "stroke-width": "1",
      fill: "none",
      "fill-rule": "evenodd"
    }, c("g", {
      fill: "currentColor",
      "fill-rule": "nonzero"
    }, c("path", {
      d: "M8.73171,16.7949 C9.03264,17.0795 9.50733,17.0663 9.79196,16.7654 C10.0766,16.4644 10.0634,15.9897 9.76243,15.7051 L4.52339,10.75 L17.2471,10.75 C17.6613,10.75 17.9971,10.4142 17.9971,10 C17.9971,9.58579 17.6613,9.25 17.2471,9.25 L4.52112,9.25 L9.76243,4.29275 C10.0634,4.00812 10.0766,3.53343 9.79196,3.2325 C9.50733,2.93156 9.03264,2.91834 8.73171,3.20297 L2.31449,9.27241 C2.14819,9.4297 2.04819,9.62981 2.01448,9.8386 C2.00308,9.89058 1.99707,9.94459 1.99707,10 C1.99707,10.0576 2.00356,10.1137 2.01585,10.1675 C2.05084,10.3733 2.15039,10.5702 2.31449,10.7254 L8.73171,16.7949 Z"
    }))));
  }
}), Ta = ie({
  name: "FastForward",
  render() {
    return c("svg", {
      viewBox: "0 0 20 20",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("g", {
      stroke: "none",
      "stroke-width": "1",
      fill: "none",
      "fill-rule": "evenodd"
    }, c("g", {
      fill: "currentColor",
      "fill-rule": "nonzero"
    }, c("path", {
      d: "M11.2654,3.20511 C10.9644,2.92049 10.4897,2.93371 10.2051,3.23464 C9.92049,3.53558 9.93371,4.01027 10.2346,4.29489 L15.4737,9.25 L2.75,9.25 C2.33579,9.25 2,9.58579 2,10.0000012 C2,10.4142 2.33579,10.75 2.75,10.75 L15.476,10.75 L10.2346,15.7073 C9.93371,15.9919 9.92049,16.4666 10.2051,16.7675 C10.4897,17.0684 10.9644,17.0817 11.2654,16.797 L17.6826,10.7276 C17.8489,10.5703 17.9489,10.3702 17.9826,10.1614 C17.994,10.1094 18,10.0554 18,10.0000012 C18,9.94241 17.9935,9.88633 17.9812,9.83246 C17.9462,9.62667 17.8467,9.42976 17.6826,9.27455 L11.2654,3.20511 Z"
    }))));
  }
}), Zf = ie({
  name: "Filter",
  render() {
    return c("svg", {
      viewBox: "0 0 28 28",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("g", {
      stroke: "none",
      "stroke-width": "1",
      "fill-rule": "evenodd"
    }, c("g", {
      "fill-rule": "nonzero"
    }, c("path", {
      d: "M17,19 C17.5522847,19 18,19.4477153 18,20 C18,20.5522847 17.5522847,21 17,21 L11,21 C10.4477153,21 10,20.5522847 10,20 C10,19.4477153 10.4477153,19 11,19 L17,19 Z M21,13 C21.5522847,13 22,13.4477153 22,14 C22,14.5522847 21.5522847,15 21,15 L7,15 C6.44771525,15 6,14.5522847 6,14 C6,13.4477153 6.44771525,13 7,13 L21,13 Z M24,7 C24.5522847,7 25,7.44771525 25,8 C25,8.55228475 24.5522847,9 24,9 L4,9 C3.44771525,9 3,8.55228475 3,8 C3,7.44771525 3.44771525,7 4,7 L24,7 Z"
    }))));
  }
}), Ma = ie({
  name: "Forward",
  render() {
    return c("svg", {
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("path", {
      d: "M7.73271 4.20694C8.03263 3.92125 8.50737 3.93279 8.79306 4.23271L13.7944 9.48318C14.0703 9.77285 14.0703 10.2281 13.7944 10.5178L8.79306 15.7682C8.50737 16.0681 8.03263 16.0797 7.73271 15.794C7.43279 15.5083 7.42125 15.0336 7.70694 14.7336L12.2155 10.0005L7.70694 5.26729C7.42125 4.96737 7.43279 4.49264 7.73271 4.20694Z",
      fill: "currentColor"
    }));
  }
}), Jo = Xn("info", () => c("svg", {
  viewBox: "0 0 28 28",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  "fill-rule": "evenodd"
}, c("g", {
  "fill-rule": "nonzero"
}, c("path", {
  d: "M14,2 C20.6274,2 26,7.37258 26,14 C26,20.6274 20.6274,26 14,26 C7.37258,26 2,20.6274 2,14 C2,7.37258 7.37258,2 14,2 Z M14,11 C13.4477,11 13,11.4477 13,12 L13,12 L13,20 C13,20.5523 13.4477,21 14,21 C14.5523,21 15,20.5523 15,20 L15,20 L15,12 C15,11.4477 14.5523,11 14,11 Z M14,6.75 C13.3096,6.75 12.75,7.30964 12.75,8 C12.75,8.69036 13.3096,9.25 14,9.25 C14.6904,9.25 15.25,8.69036 15.25,8 C15.25,7.30964 14.6904,6.75 14,6.75 Z"
}))))), Fa = ie({
  name: "More",
  render() {
    return c("svg", {
      viewBox: "0 0 16 16",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg"
    }, c("g", {
      stroke: "none",
      "stroke-width": "1",
      fill: "none",
      "fill-rule": "evenodd"
    }, c("g", {
      fill: "currentColor",
      "fill-rule": "nonzero"
    }, c("path", {
      d: "M4,7 C4.55228,7 5,7.44772 5,8 C5,8.55229 4.55228,9 4,9 C3.44772,9 3,8.55229 3,8 C3,7.44772 3.44772,7 4,7 Z M8,7 C8.55229,7 9,7.44772 9,8 C9,8.55229 8.55229,9 8,9 C7.44772,9 7,8.55229 7,8 C7,7.44772 7.44772,7 8,7 Z M12,7 C12.5523,7 13,7.44772 13,8 C13,8.55229 12.5523,9 12,9 C11.4477,9 11,8.55229 11,8 C11,7.44772 11.4477,7 12,7 Z"
    }))));
  }
}), os = Xn("success", () => c("svg", {
  viewBox: "0 0 48 48",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  "fill-rule": "evenodd"
}, c("g", {
  "fill-rule": "nonzero"
}, c("path", {
  d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M32.6338835,17.6161165 C32.1782718,17.1605048 31.4584514,17.1301307 30.9676119,17.5249942 L30.8661165,17.6161165 L20.75,27.732233 L17.1338835,24.1161165 C16.6457281,23.6279612 15.8542719,23.6279612 15.3661165,24.1161165 C14.9105048,24.5717282 14.8801307,25.2915486 15.2749942,25.7823881 L15.3661165,25.8838835 L19.8661165,30.3838835 C20.3217282,30.8394952 21.0415486,30.8698693 21.5323881,30.4750058 L21.6338835,30.3838835 L32.6338835,19.3838835 C33.1220388,18.8957281 33.1220388,18.1042719 32.6338835,17.6161165 Z"
}))))), Ri = Xn("warning", () => c("svg", {
  viewBox: "0 0 24 24",
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg"
}, c("g", {
  stroke: "none",
  "stroke-width": "1",
  "fill-rule": "evenodd"
}, c("g", {
  "fill-rule": "nonzero"
}, c("path", {
  d: "M12,2 C17.523,2 22,6.478 22,12 C22,17.522 17.523,22 12,22 C6.477,22 2,17.522 2,12 C2,6.478 6.477,2 12,2 Z M12.0018002,15.0037242 C11.450254,15.0037242 11.0031376,15.4508407 11.0031376,16.0023869 C11.0031376,16.553933 11.450254,17.0010495 12.0018002,17.0010495 C12.5533463,17.0010495 13.0004628,16.553933 13.0004628,16.0023869 C13.0004628,15.4508407 12.5533463,15.0037242 12.0018002,15.0037242 Z M11.99964,7 C11.4868042,7.00018474 11.0642719,7.38637706 11.0066858,7.8837365 L11,8.00036004 L11.0018003,13.0012393 L11.00857,13.117858 C11.0665141,13.6151758 11.4893244,14.0010638 12.0021602,14.0008793 C12.514996,14.0006946 12.9375283,13.6145023 12.9951144,13.1171428 L13.0018002,13.0005193 L13,7.99964009 L12.9932303,7.8830214 C12.9352861,7.38570354 12.5124758,6.99981552 11.99964,7 Z"
}))))), {
  cubicBezierEaseInOut: Jf
} = pn;
function Wt({
  originalTransform: e = "",
  left: t = 0,
  top: n = 0,
  transition: r = `all .3s ${Jf} !important`
} = {}) {
  return [B("&.icon-switch-transition-enter-from, &.icon-switch-transition-leave-to", {
    transform: `${e} scale(0.75)`,
    left: t,
    top: n,
    opacity: 0
  }), B("&.icon-switch-transition-enter-to, &.icon-switch-transition-leave-from", {
    transform: `scale(1) ${e}`,
    left: t,
    top: n,
    opacity: 1
  }), B("&.icon-switch-transition-enter-active, &.icon-switch-transition-leave-active", {
    transformOrigin: "center",
    position: "absolute",
    left: t,
    top: n,
    transition: r
  })];
}
const Qf = R("base-clear", `
 flex-shrink: 0;
 height: 1em;
 width: 1em;
 position: relative;
`, [B(">", [A("clear", `
 font-size: var(--n-clear-size);
 height: 1em;
 width: 1em;
 cursor: pointer;
 color: var(--n-clear-color);
 transition: color .3s var(--n-bezier);
 display: flex;
 `, [B("&:hover", `
 color: var(--n-clear-color-hover)!important;
 `), B("&:active", `
 color: var(--n-clear-color-pressed)!important;
 `)]), A("placeholder", `
 display: flex;
 `), A("clear, placeholder", `
 position: absolute;
 left: 50%;
 top: 50%;
 transform: translateX(-50%) translateY(-50%);
 `, [Wt({
  originalTransform: "translateX(-50%) translateY(-50%)",
  left: "50%",
  top: "50%"
})])])]), Qo = ie({
  name: "BaseClear",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    show: Boolean,
    onClear: Function
  },
  setup(e) {
    return Mn("-base-clear", Qf, ae(e, "clsPrefix")), {
      handleMouseDown(t) {
        t.preventDefault();
      }
    };
  },
  render() {
    const {
      clsPrefix: e
    } = this;
    return c("div", {
      class: `${e}-base-clear`
    }, c(Gn, null, {
      default: () => {
        var t, n;
        return this.show ? c("div", {
          key: "dismiss",
          class: `${e}-base-clear__clear`,
          onClick: this.onClear,
          onMousedown: this.handleMouseDown,
          "data-clear": !0
        }, Et(this.$slots.icon, () => [c(ct, {
          clsPrefix: e
        }, {
          default: () => c(qf, null)
        })])) : c("div", {
          key: "icon",
          class: `${e}-base-clear__placeholder`
        }, (n = (t = this.$slots).placeholder) === null || n === void 0 ? void 0 : n.call(t));
      }
    }));
  }
}), eh = R("base-close", `
 display: flex;
 align-items: center;
 justify-content: center;
 cursor: pointer;
 background-color: transparent;
 color: var(--n-close-icon-color);
 border-radius: var(--n-close-border-radius);
 height: var(--n-close-size);
 width: var(--n-close-size);
 font-size: var(--n-close-icon-size);
 outline: none;
 border: none;
 position: relative;
 padding: 0;
`, [_("absolute", `
 height: var(--n-close-icon-size);
 width: var(--n-close-icon-size);
 `), B("&::before", `
 content: "";
 position: absolute;
 width: var(--n-close-size);
 height: var(--n-close-size);
 left: 50%;
 top: 50%;
 transform: translateY(-50%) translateX(-50%);
 transition: inherit;
 border-radius: inherit;
 `), Je("disabled", [B("&:hover", `
 color: var(--n-close-icon-color-hover);
 `), B("&:hover::before", `
 background-color: var(--n-close-color-hover);
 `), B("&:focus::before", `
 background-color: var(--n-close-color-hover);
 `), B("&:active", `
 color: var(--n-close-icon-color-pressed);
 `), B("&:active::before", `
 background-color: var(--n-close-color-pressed);
 `)]), _("disabled", `
 cursor: not-allowed;
 color: var(--n-close-icon-color-disabled);
 background-color: transparent;
 `), _("round", [B("&::before", `
 border-radius: 50%;
 `)])]), Rr = ie({
  name: "BaseClose",
  props: {
    isButtonTag: {
      type: Boolean,
      default: !0
    },
    clsPrefix: {
      type: String,
      required: !0
    },
    disabled: {
      type: Boolean,
      default: void 0
    },
    focusable: {
      type: Boolean,
      default: !0
    },
    round: Boolean,
    onClick: Function,
    absolute: Boolean
  },
  setup(e) {
    return Mn("-base-close", eh, ae(e, "clsPrefix")), () => {
      const {
        clsPrefix: t,
        disabled: n,
        absolute: r,
        round: o,
        isButtonTag: i
      } = e;
      return c(i ? "button" : "div", {
        type: i ? "button" : void 0,
        tabindex: n || !e.focusable ? -1 : 0,
        "aria-disabled": n,
        "aria-label": "close",
        role: i ? void 0 : "button",
        disabled: n,
        class: [`${t}-base-close`, r && `${t}-base-close--absolute`, n && `${t}-base-close--disabled`, o && `${t}-base-close--round`],
        onMousedown: (a) => {
          e.focusable || a.preventDefault();
        },
        onClick: e.onClick
      }, c(ct, {
        clsPrefix: t
      }, {
        default: () => c(ns, null)
      }));
    };
  }
}), is = ie({
  name: "FadeInExpandTransition",
  props: {
    appear: Boolean,
    group: Boolean,
    mode: String,
    onLeave: Function,
    onAfterLeave: Function,
    onAfterEnter: Function,
    width: Boolean,
    // reverse mode is only used in tree
    // it make it from expanded to collapsed after mounted
    reverse: Boolean
  },
  setup(e, {
    slots: t
  }) {
    function n(a) {
      e.width ? a.style.maxWidth = `${a.offsetWidth}px` : a.style.maxHeight = `${a.offsetHeight}px`, a.offsetWidth;
    }
    function r(a) {
      e.width ? a.style.maxWidth = "0" : a.style.maxHeight = "0", a.offsetWidth;
      const {
        onLeave: s
      } = e;
      s && s();
    }
    function o(a) {
      e.width ? a.style.maxWidth = "" : a.style.maxHeight = "";
      const {
        onAfterLeave: s
      } = e;
      s && s();
    }
    function i(a) {
      if (a.style.transition = "none", e.width) {
        const s = a.offsetWidth;
        a.style.maxWidth = "0", a.offsetWidth, a.style.transition = "", a.style.maxWidth = `${s}px`;
      } else if (e.reverse)
        a.style.maxHeight = `${a.offsetHeight}px`, a.offsetHeight, a.style.transition = "", a.style.maxHeight = "0";
      else {
        const s = a.offsetHeight;
        a.style.maxHeight = "0", a.offsetWidth, a.style.transition = "", a.style.maxHeight = `${s}px`;
      }
      a.offsetWidth;
    }
    function l(a) {
      var s;
      e.width ? a.style.maxWidth = "" : e.reverse || (a.style.maxHeight = ""), (s = e.onAfterEnter) === null || s === void 0 || s.call(e);
    }
    return () => {
      const {
        group: a,
        width: s,
        appear: d,
        mode: u
      } = e, h = a ? gl : Ht, b = {
        name: s ? "fade-in-width-expand-transition" : "fade-in-height-expand-transition",
        appear: d,
        onEnter: i,
        onAfterEnter: l,
        onBeforeLeave: n,
        onLeave: r,
        onAfterLeave: o
      };
      return a || (b.mode = u), c(h, b, t);
    };
  }
}), th = ie({
  props: {
    onFocus: Function,
    onBlur: Function
  },
  setup(e) {
    return () => c("div", {
      style: "width: 0; height: 0",
      tabindex: 0,
      onFocus: e.onFocus,
      onBlur: e.onBlur
    });
  }
}), nh = B([B("@keyframes rotator", `
 0% {
 -webkit-transform: rotate(0deg);
 transform: rotate(0deg);
 }
 100% {
 -webkit-transform: rotate(360deg);
 transform: rotate(360deg);
 }`), R("base-loading", `
 position: relative;
 line-height: 0;
 width: 1em;
 height: 1em;
 `, [A("transition-wrapper", `
 position: absolute;
 width: 100%;
 height: 100%;
 `, [Wt()]), A("placeholder", `
 position: absolute;
 left: 50%;
 top: 50%;
 transform: translateX(-50%) translateY(-50%);
 `, [Wt({
  left: "50%",
  top: "50%",
  originalTransform: "translateX(-50%) translateY(-50%)"
})]), A("container", `
 animation: rotator 3s linear infinite both;
 `, [A("icon", `
 height: 1em;
 width: 1em;
 `)])])]), Fo = "1.6s", rh = {
  strokeWidth: {
    type: Number,
    default: 28
  },
  stroke: {
    type: String,
    default: void 0
  }
}, Yn = ie({
  name: "BaseLoading",
  props: Object.assign({
    clsPrefix: {
      type: String,
      required: !0
    },
    show: {
      type: Boolean,
      default: !0
    },
    scale: {
      type: Number,
      default: 1
    },
    radius: {
      type: Number,
      default: 100
    }
  }, rh),
  setup(e) {
    Mn("-base-loading", nh, ae(e, "clsPrefix"));
  },
  render() {
    const {
      clsPrefix: e,
      radius: t,
      strokeWidth: n,
      stroke: r,
      scale: o
    } = this, i = t / o;
    return c("div", {
      class: `${e}-base-loading`,
      role: "img",
      "aria-label": "loading"
    }, c(Gn, null, {
      default: () => this.show ? c("div", {
        key: "icon",
        class: `${e}-base-loading__transition-wrapper`
      }, c("div", {
        class: `${e}-base-loading__container`
      }, c("svg", {
        class: `${e}-base-loading__icon`,
        viewBox: `0 0 ${2 * i} ${2 * i}`,
        xmlns: "http://www.w3.org/2000/svg",
        style: {
          color: r
        }
      }, c("g", null, c("animateTransform", {
        attributeName: "transform",
        type: "rotate",
        values: `0 ${i} ${i};270 ${i} ${i}`,
        begin: "0s",
        dur: Fo,
        fill: "freeze",
        repeatCount: "indefinite"
      }), c("circle", {
        class: `${e}-base-loading__icon`,
        fill: "none",
        stroke: "currentColor",
        "stroke-width": n,
        "stroke-linecap": "round",
        cx: i,
        cy: i,
        r: t - n / 2,
        "stroke-dasharray": 5.67 * t,
        "stroke-dashoffset": 18.48 * t
      }, c("animateTransform", {
        attributeName: "transform",
        type: "rotate",
        values: `0 ${i} ${i};135 ${i} ${i};450 ${i} ${i}`,
        begin: "0s",
        dur: Fo,
        fill: "freeze",
        repeatCount: "indefinite"
      }), c("animate", {
        attributeName: "stroke-dashoffset",
        values: `${5.67 * t};${1.42 * t};${5.67 * t}`,
        begin: "0s",
        dur: Fo,
        fill: "freeze",
        repeatCount: "indefinite"
      })))))) : c("div", {
        key: "placeholder",
        class: `${e}-base-loading__placeholder`
      }, this.$slots)
    }));
  }
}), {
  cubicBezierEaseInOut: Oa
} = pn;
function as({
  name: e = "fade-in",
  enterDuration: t = "0.2s",
  leaveDuration: n = "0.2s",
  enterCubicBezier: r = Oa,
  leaveCubicBezier: o = Oa
} = {}) {
  return [B(`&.${e}-transition-enter-active`, {
    transition: `all ${t} ${r}!important`
  }), B(`&.${e}-transition-leave-active`, {
    transition: `all ${n} ${o}!important`
  }), B(`&.${e}-transition-enter-from, &.${e}-transition-leave-to`, {
    opacity: 0
  }), B(`&.${e}-transition-leave-from, &.${e}-transition-enter-to`, {
    opacity: 1
  })];
}
const $e = {
  neutralBase: "#FFF",
  neutralInvertBase: "#000",
  neutralTextBase: "#000",
  neutralPopover: "#fff",
  neutralCard: "#fff",
  neutralModal: "#fff",
  neutralBody: "#fff",
  alpha1: "0.82",
  alpha2: "0.72",
  alpha3: "0.38",
  alpha4: "0.24",
  // disabled text, placeholder, icon
  alpha5: "0.18",
  // disabled placeholder
  alphaClose: "0.6",
  alphaDisabled: "0.5",
  alphaDisabledInput: "0.02",
  alphaPending: "0.05",
  alphaTablePending: "0.02",
  alphaPressed: "0.07",
  alphaAvatar: "0.2",
  alphaRail: "0.14",
  alphaProgressRail: ".08",
  alphaBorder: "0.12",
  alphaDivider: "0.06",
  alphaInput: "0",
  alphaAction: "0.02",
  alphaTab: "0.04",
  alphaScrollbar: "0.25",
  alphaScrollbarHover: "0.4",
  alphaCode: "0.05",
  alphaTag: "0.02",
  // primary
  primaryHover: "#36ad6a",
  primaryDefault: "#18a058",
  primaryActive: "#0c7a43",
  primarySuppl: "#36ad6a",
  // info
  infoHover: "#4098fc",
  infoDefault: "#2080f0",
  infoActive: "#1060c9",
  infoSuppl: "#4098fc",
  // error
  errorHover: "#de576d",
  errorDefault: "#d03050",
  errorActive: "#ab1f3f",
  errorSuppl: "#de576d",
  // warning
  warningHover: "#fcb040",
  warningDefault: "#f0a020",
  warningActive: "#c97c10",
  warningSuppl: "#fcb040",
  // success
  successHover: "#36ad6a",
  successDefault: "#18a058",
  successActive: "#0c7a43",
  successSuppl: "#36ad6a"
}, oh = Sn($e.neutralBase), ls = Sn($e.neutralInvertBase), ih = `rgba(${ls.slice(0, 3).join(", ")}, `;
function Ba(e) {
  return `${ih + String(e)})`;
}
function kt(e) {
  const t = Array.from(ls);
  return t[3] = Number(e), Ke(oh, t);
}
const rt = Object.assign(Object.assign({
  name: "common"
}, pn), {
  baseColor: $e.neutralBase,
  // primary color
  primaryColor: $e.primaryDefault,
  primaryColorHover: $e.primaryHover,
  primaryColorPressed: $e.primaryActive,
  primaryColorSuppl: $e.primarySuppl,
  // info color
  infoColor: $e.infoDefault,
  infoColorHover: $e.infoHover,
  infoColorPressed: $e.infoActive,
  infoColorSuppl: $e.infoSuppl,
  // success color
  successColor: $e.successDefault,
  successColorHover: $e.successHover,
  successColorPressed: $e.successActive,
  successColorSuppl: $e.successSuppl,
  // warning color
  warningColor: $e.warningDefault,
  warningColorHover: $e.warningHover,
  warningColorPressed: $e.warningActive,
  warningColorSuppl: $e.warningSuppl,
  // error color
  errorColor: $e.errorDefault,
  errorColorHover: $e.errorHover,
  errorColorPressed: $e.errorActive,
  errorColorSuppl: $e.errorSuppl,
  // text color
  textColorBase: $e.neutralTextBase,
  textColor1: "rgb(31, 34, 37)",
  textColor2: "rgb(51, 54, 57)",
  textColor3: "rgb(118, 124, 130)",
  // textColor4: neutral(base.alpha4), // disabled, placeholder, icon
  // textColor5: neutral(base.alpha5),
  textColorDisabled: kt($e.alpha4),
  placeholderColor: kt($e.alpha4),
  placeholderColorDisabled: kt($e.alpha5),
  iconColor: kt($e.alpha4),
  iconColorHover: Mr(kt($e.alpha4), {
    lightness: 0.75
  }),
  iconColorPressed: Mr(kt($e.alpha4), {
    lightness: 0.9
  }),
  iconColorDisabled: kt($e.alpha5),
  opacity1: $e.alpha1,
  opacity2: $e.alpha2,
  opacity3: $e.alpha3,
  opacity4: $e.alpha4,
  opacity5: $e.alpha5,
  dividerColor: "rgb(239, 239, 245)",
  borderColor: "rgb(224, 224, 230)",
  // close
  closeIconColor: kt(Number($e.alphaClose)),
  closeIconColorHover: kt(Number($e.alphaClose)),
  closeIconColorPressed: kt(Number($e.alphaClose)),
  closeColorHover: "rgba(0, 0, 0, .09)",
  closeColorPressed: "rgba(0, 0, 0, .13)",
  // clear
  clearColor: kt($e.alpha4),
  clearColorHover: Mr(kt($e.alpha4), {
    lightness: 0.75
  }),
  clearColorPressed: Mr(kt($e.alpha4), {
    lightness: 0.9
  }),
  scrollbarColor: Ba($e.alphaScrollbar),
  scrollbarColorHover: Ba($e.alphaScrollbarHover),
  scrollbarWidth: "5px",
  scrollbarHeight: "5px",
  scrollbarBorderRadius: "5px",
  progressRailColor: kt($e.alphaProgressRail),
  railColor: "rgb(219, 219, 223)",
  popoverColor: $e.neutralPopover,
  tableColor: $e.neutralCard,
  cardColor: $e.neutralCard,
  modalColor: $e.neutralModal,
  bodyColor: $e.neutralBody,
  tagColor: "#eee",
  avatarColor: kt($e.alphaAvatar),
  invertedColor: "rgb(0, 20, 40)",
  inputColor: kt($e.alphaInput),
  codeColor: "rgb(244, 244, 248)",
  tabColor: "rgb(247, 247, 250)",
  actionColor: "rgb(250, 250, 252)",
  tableHeaderColor: "rgb(250, 250, 252)",
  hoverColor: "rgb(243, 243, 245)",
  // use color with alpha since it can be nested with header filter & sorter effect
  tableColorHover: "rgba(0, 0, 100, 0.03)",
  tableColorStriped: "rgba(0, 0, 100, 0.02)",
  pressedColor: "rgb(237, 237, 239)",
  opacityDisabled: $e.alphaDisabled,
  inputColorDisabled: "rgb(250, 250, 252)",
  // secondary button color
  // can also be used in tertiary button & quaternary button
  buttonColor2: "rgba(46, 51, 56, .05)",
  buttonColor2Hover: "rgba(46, 51, 56, .09)",
  buttonColor2Pressed: "rgba(46, 51, 56, .13)",
  boxShadow1: "0 1px 2px -2px rgba(0, 0, 0, .08), 0 3px 6px 0 rgba(0, 0, 0, .06), 0 5px 12px 4px rgba(0, 0, 0, .04)",
  boxShadow2: "0 3px 6px -4px rgba(0, 0, 0, .12), 0 6px 16px 0 rgba(0, 0, 0, .08), 0 9px 28px 8px rgba(0, 0, 0, .05)",
  boxShadow3: "0 6px 16px -9px rgba(0, 0, 0, .08), 0 9px 28px 0 rgba(0, 0, 0, .05), 0 12px 48px 16px rgba(0, 0, 0, .03)"
}), ah = {
  railInsetHorizontalBottom: "auto 2px 4px 2px",
  railInsetHorizontalTop: "4px 2px auto 2px",
  railInsetVerticalRight: "2px 4px 2px auto",
  railInsetVerticalLeft: "2px auto 2px 4px",
  railColor: "transparent"
};
function lh(e) {
  const {
    scrollbarColor: t,
    scrollbarColorHover: n,
    scrollbarHeight: r,
    scrollbarWidth: o,
    scrollbarBorderRadius: i
  } = e;
  return Object.assign(Object.assign({}, ah), {
    height: r,
    width: o,
    borderRadius: i,
    color: t,
    colorHover: n
  });
}
const ao = {
  name: "Scrollbar",
  common: rt,
  self: lh
}, sh = R("scrollbar", `
 overflow: hidden;
 position: relative;
 z-index: auto;
 height: 100%;
 width: 100%;
`, [B(">", [R("scrollbar-container", `
 width: 100%;
 overflow: scroll;
 height: 100%;
 min-height: inherit;
 max-height: inherit;
 scrollbar-width: none;
 `, [B("&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb", `
 width: 0;
 height: 0;
 display: none;
 `), B(">", [
  // We can't set overflow hidden since it affects positioning.
  R("scrollbar-content", `
 box-sizing: border-box;
 min-width: 100%;
 `)
])])]), B(">, +", [R("scrollbar-rail", `
 position: absolute;
 pointer-events: none;
 user-select: none;
 background: var(--n-scrollbar-rail-color);
 -webkit-user-select: none;
 `, [_("horizontal", `
 height: var(--n-scrollbar-height);
 `, [B(">", [A("scrollbar", `
 height: var(--n-scrollbar-height);
 border-radius: var(--n-scrollbar-border-radius);
 right: 0;
 `)])]), _("horizontal--top", `
 top: var(--n-scrollbar-rail-top-horizontal-top); 
 right: var(--n-scrollbar-rail-right-horizontal-top); 
 bottom: var(--n-scrollbar-rail-bottom-horizontal-top); 
 left: var(--n-scrollbar-rail-left-horizontal-top); 
 `), _("horizontal--bottom", `
 top: var(--n-scrollbar-rail-top-horizontal-bottom); 
 right: var(--n-scrollbar-rail-right-horizontal-bottom); 
 bottom: var(--n-scrollbar-rail-bottom-horizontal-bottom); 
 left: var(--n-scrollbar-rail-left-horizontal-bottom); 
 `), _("vertical", `
 width: var(--n-scrollbar-width);
 `, [B(">", [A("scrollbar", `
 width: var(--n-scrollbar-width);
 border-radius: var(--n-scrollbar-border-radius);
 bottom: 0;
 `)])]), _("vertical--left", `
 top: var(--n-scrollbar-rail-top-vertical-left); 
 right: var(--n-scrollbar-rail-right-vertical-left); 
 bottom: var(--n-scrollbar-rail-bottom-vertical-left); 
 left: var(--n-scrollbar-rail-left-vertical-left); 
 `), _("vertical--right", `
 top: var(--n-scrollbar-rail-top-vertical-right); 
 right: var(--n-scrollbar-rail-right-vertical-right); 
 bottom: var(--n-scrollbar-rail-bottom-vertical-right); 
 left: var(--n-scrollbar-rail-left-vertical-right); 
 `), _("disabled", [B(">", [A("scrollbar", "pointer-events: none;")])]), B(">", [A("scrollbar", `
 z-index: 1;
 position: absolute;
 cursor: pointer;
 pointer-events: all;
 background-color: var(--n-scrollbar-color);
 transition: background-color .2s var(--n-scrollbar-bezier);
 `, [as(), B("&:hover", "background-color: var(--n-scrollbar-color-hover);")])])])])]), dh = Object.assign(Object.assign({}, we.props), {
  duration: {
    type: Number,
    default: 0
  },
  scrollable: {
    type: Boolean,
    default: !0
  },
  xScrollable: Boolean,
  trigger: {
    type: String,
    default: "hover"
  },
  useUnifiedContainer: Boolean,
  triggerDisplayManually: Boolean,
  // If container is set, resize observer won't not attached
  container: Function,
  content: Function,
  containerClass: String,
  containerStyle: [String, Object],
  contentClass: [String, Array],
  contentStyle: [String, Object],
  horizontalRailStyle: [String, Object],
  verticalRailStyle: [String, Object],
  onScroll: Function,
  onWheel: Function,
  onResize: Function,
  internalOnUpdateScrollLeft: Function,
  internalHoistYRail: Boolean,
  yPlacement: {
    type: String,
    default: "right"
  },
  xPlacement: {
    type: String,
    default: "bottom"
  }
}), Zn = ie({
  name: "Scrollbar",
  props: dh,
  inheritAttrs: !1,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      inlineThemeDisabled: n,
      mergedRtlRef: r
    } = _e(e), o = $t("Scrollbar", r, t), i = L(null), l = L(null), a = L(null), s = L(null), d = L(null), u = L(null), h = L(null), b = L(null), m = L(null), f = L(null), p = L(null), v = L(0), g = L(0), y = L(!1), S = L(!1);
    let w = !1, C = !1, k, x, z = 0, $ = 0, M = 0, V = 0;
    const O = vc(), E = we("Scrollbar", "-scrollbar", sh, ao, e, t), I = T(() => {
      const {
        value: P
      } = b, {
        value: D
      } = u, {
        value: ee
      } = f;
      return P === null || D === null || ee === null ? 0 : Math.min(P, ee * P / D + Nt(E.value.self.width) * 1.5);
    }), F = T(() => `${I.value}px`), N = T(() => {
      const {
        value: P
      } = m, {
        value: D
      } = h, {
        value: ee
      } = p;
      return P === null || D === null || ee === null ? 0 : ee * P / D + Nt(E.value.self.height) * 1.5;
    }), W = T(() => `${N.value}px`), X = T(() => {
      const {
        value: P
      } = b, {
        value: D
      } = v, {
        value: ee
      } = u, {
        value: se
      } = f;
      if (P === null || ee === null || se === null)
        return 0;
      {
        const he = ee - P;
        return he ? D / he * (se - I.value) : 0;
      }
    }), re = T(() => `${X.value}px`), Q = T(() => {
      const {
        value: P
      } = m, {
        value: D
      } = g, {
        value: ee
      } = h, {
        value: se
      } = p;
      if (P === null || ee === null || se === null)
        return 0;
      {
        const he = ee - P;
        return he ? D / he * (se - N.value) : 0;
      }
    }), G = T(() => `${Q.value}px`), j = T(() => {
      const {
        value: P
      } = b, {
        value: D
      } = u;
      return P !== null && D !== null && D > P;
    }), q = T(() => {
      const {
        value: P
      } = m, {
        value: D
      } = h;
      return P !== null && D !== null && D > P;
    }), Z = T(() => {
      const {
        trigger: P
      } = e;
      return P === "none" || y.value;
    }), le = T(() => {
      const {
        trigger: P
      } = e;
      return P === "none" || S.value;
    }), ue = T(() => {
      const {
        container: P
      } = e;
      return P ? P() : l.value;
    }), be = T(() => {
      const {
        content: P
      } = e;
      return P ? P() : a.value;
    }), Re = (P, D) => {
      if (!e.scrollable) return;
      if (typeof P == "number") {
        Fe(P, D != null ? D : 0, 0, !1, "auto");
        return;
      }
      const {
        left: ee,
        top: se,
        index: he,
        elSize: ge,
        position: ve,
        behavior: Se,
        el: Ee,
        debounce: Ye = !0
      } = P;
      (ee !== void 0 || se !== void 0) && Fe(ee != null ? ee : 0, se != null ? se : 0, 0, !1, Se), Ee !== void 0 ? Fe(0, Ee.offsetTop, Ee.offsetHeight, Ye, Se) : he !== void 0 && ge !== void 0 ? Fe(0, he * ge, ge, Ye, Se) : ve === "bottom" ? Fe(0, Number.MAX_SAFE_INTEGER, 0, !1, Se) : ve === "top" && Fe(0, 0, 0, !1, Se);
    }, K = Rc(() => {
      e.container || Re({
        top: v.value,
        left: g.value
      });
    }), fe = () => {
      K.isDeactivated || ce();
    }, Me = (P) => {
      if (K.isDeactivated) return;
      const {
        onResize: D
      } = e;
      D && D(P), ce();
    }, ye = (P, D) => {
      if (!e.scrollable) return;
      const {
        value: ee
      } = ue;
      ee && (typeof P == "object" ? ee.scrollBy(P) : ee.scrollBy(P, D || 0));
    };
    function Fe(P, D, ee, se, he) {
      const {
        value: ge
      } = ue;
      if (ge) {
        if (se) {
          const {
            scrollTop: ve,
            offsetHeight: Se
          } = ge;
          if (D > ve) {
            D + ee <= ve + Se || ge.scrollTo({
              left: P,
              top: D + ee - Se,
              behavior: he
            });
            return;
          }
        }
        ge.scrollTo({
          left: P,
          top: D,
          behavior: he
        });
      }
    }
    function Te() {
      me(), U(), ce();
    }
    function Qe() {
      qe();
    }
    function qe() {
      tt(), et();
    }
    function tt() {
      x !== void 0 && window.clearTimeout(x), x = window.setTimeout(() => {
        S.value = !1;
      }, e.duration);
    }
    function et() {
      k !== void 0 && window.clearTimeout(k), k = window.setTimeout(() => {
        y.value = !1;
      }, e.duration);
    }
    function me() {
      k !== void 0 && window.clearTimeout(k), y.value = !0;
    }
    function U() {
      x !== void 0 && window.clearTimeout(x), S.value = !0;
    }
    function Y(P) {
      const {
        onScroll: D
      } = e;
      D && D(P), de();
    }
    function de() {
      const {
        value: P
      } = ue;
      P && (v.value = P.scrollTop, g.value = P.scrollLeft * (o != null && o.value ? -1 : 1));
    }
    function xe() {
      const {
        value: P
      } = be;
      P && (u.value = P.offsetHeight, h.value = P.offsetWidth);
      const {
        value: D
      } = ue;
      D && (b.value = D.offsetHeight, m.value = D.offsetWidth);
      const {
        value: ee
      } = d, {
        value: se
      } = s;
      ee && (p.value = ee.offsetWidth), se && (f.value = se.offsetHeight);
    }
    function te() {
      const {
        value: P
      } = ue;
      P && (v.value = P.scrollTop, g.value = P.scrollLeft * (o != null && o.value ? -1 : 1), b.value = P.offsetHeight, m.value = P.offsetWidth, u.value = P.scrollHeight, h.value = P.scrollWidth);
      const {
        value: D
      } = d, {
        value: ee
      } = s;
      D && (p.value = D.offsetWidth), ee && (f.value = ee.offsetHeight);
    }
    function ce() {
      e.scrollable && (e.useUnifiedContainer ? te() : (xe(), de()));
    }
    function ze(P) {
      var D;
      return !(!((D = i.value) === null || D === void 0) && D.contains(Dn(P)));
    }
    function Ne(P) {
      P.preventDefault(), P.stopPropagation(), C = !0, De("mousemove", window, st, !0), De("mouseup", window, ft, !0), $ = g.value, M = o != null && o.value ? window.innerWidth - P.clientX : P.clientX;
    }
    function st(P) {
      if (!C) return;
      k !== void 0 && window.clearTimeout(k), x !== void 0 && window.clearTimeout(x);
      const {
        value: D
      } = m, {
        value: ee
      } = h, {
        value: se
      } = N;
      if (D === null || ee === null) return;
      const ge = (o != null && o.value ? window.innerWidth - P.clientX - M : P.clientX - M) * (ee - D) / (D - se), ve = ee - D;
      let Se = $ + ge;
      Se = Math.min(ve, Se), Se = Math.max(Se, 0);
      const {
        value: Ee
      } = ue;
      if (Ee) {
        Ee.scrollLeft = Se * (o != null && o.value ? -1 : 1);
        const {
          internalOnUpdateScrollLeft: Ye
        } = e;
        Ye && Ye(Se);
      }
    }
    function ft(P) {
      P.preventDefault(), P.stopPropagation(), He("mousemove", window, st, !0), He("mouseup", window, ft, !0), C = !1, ce(), ze(P) && qe();
    }
    function at(P) {
      P.preventDefault(), P.stopPropagation(), w = !0, De("mousemove", window, Xe, !0), De("mouseup", window, dt, !0), z = v.value, V = P.clientY;
    }
    function Xe(P) {
      if (!w) return;
      k !== void 0 && window.clearTimeout(k), x !== void 0 && window.clearTimeout(x);
      const {
        value: D
      } = b, {
        value: ee
      } = u, {
        value: se
      } = I;
      if (D === null || ee === null) return;
      const ge = (P.clientY - V) * (ee - D) / (D - se), ve = ee - D;
      let Se = z + ge;
      Se = Math.min(ve, Se), Se = Math.max(Se, 0);
      const {
        value: Ee
      } = ue;
      Ee && (Ee.scrollTop = Se);
    }
    function dt(P) {
      P.preventDefault(), P.stopPropagation(), He("mousemove", window, Xe, !0), He("mouseup", window, dt, !0), w = !1, ce(), ze(P) && qe();
    }
    Bt(() => {
      const {
        value: P
      } = q, {
        value: D
      } = j, {
        value: ee
      } = t, {
        value: se
      } = d, {
        value: he
      } = s;
      se && (P ? se.classList.remove(`${ee}-scrollbar-rail--disabled`) : se.classList.add(`${ee}-scrollbar-rail--disabled`)), he && (D ? he.classList.remove(`${ee}-scrollbar-rail--disabled`) : he.classList.add(`${ee}-scrollbar-rail--disabled`));
    }), vt(() => {
      e.container || ce();
    }), ut(() => {
      k !== void 0 && window.clearTimeout(k), x !== void 0 && window.clearTimeout(x), He("mousemove", window, Xe, !0), He("mouseup", window, dt, !0);
    });
    const Ge = T(() => {
      const {
        common: {
          cubicBezierEaseInOut: P
        },
        self: {
          color: D,
          colorHover: ee,
          height: se,
          width: he,
          borderRadius: ge,
          railInsetHorizontalTop: ve,
          railInsetHorizontalBottom: Se,
          railInsetVerticalRight: Ee,
          railInsetVerticalLeft: Ye,
          railColor: Le
        }
      } = E.value, {
        top: bt,
        right: xt,
        bottom: yt,
        left: Ct
      } = mt(ve), {
        top: St,
        right: Mt,
        bottom: Ft,
        left: H
      } = mt(Se), {
        top: ne,
        right: Ce,
        bottom: Be,
        left: Ve
      } = mt(o != null && o.value ? Ca(Ee) : Ee), {
        top: Ae,
        right: nt,
        bottom: lt,
        left: It
      } = mt(o != null && o.value ? Ca(Ye) : Ye);
      return {
        "--n-scrollbar-bezier": P,
        "--n-scrollbar-color": D,
        "--n-scrollbar-color-hover": ee,
        "--n-scrollbar-border-radius": ge,
        "--n-scrollbar-width": he,
        "--n-scrollbar-height": se,
        "--n-scrollbar-rail-top-horizontal-top": bt,
        "--n-scrollbar-rail-right-horizontal-top": xt,
        "--n-scrollbar-rail-bottom-horizontal-top": yt,
        "--n-scrollbar-rail-left-horizontal-top": Ct,
        "--n-scrollbar-rail-top-horizontal-bottom": St,
        "--n-scrollbar-rail-right-horizontal-bottom": Mt,
        "--n-scrollbar-rail-bottom-horizontal-bottom": Ft,
        "--n-scrollbar-rail-left-horizontal-bottom": H,
        "--n-scrollbar-rail-top-vertical-right": ne,
        "--n-scrollbar-rail-right-vertical-right": Ce,
        "--n-scrollbar-rail-bottom-vertical-right": Be,
        "--n-scrollbar-rail-left-vertical-right": Ve,
        "--n-scrollbar-rail-top-vertical-left": Ae,
        "--n-scrollbar-rail-right-vertical-left": nt,
        "--n-scrollbar-rail-bottom-vertical-left": lt,
        "--n-scrollbar-rail-left-vertical-left": It,
        "--n-scrollbar-rail-color": Le
      };
    }), pe = n ? it("scrollbar", void 0, Ge, e) : void 0;
    return Object.assign(Object.assign({}, {
      scrollTo: Re,
      scrollBy: ye,
      sync: ce,
      syncUnifiedContainer: te,
      handleMouseEnterWrapper: Te,
      handleMouseLeaveWrapper: Qe
    }), {
      mergedClsPrefix: t,
      rtlEnabled: o,
      containerScrollTop: v,
      wrapperRef: i,
      containerRef: l,
      contentRef: a,
      yRailRef: s,
      xRailRef: d,
      needYBar: j,
      needXBar: q,
      yBarSizePx: F,
      xBarSizePx: W,
      yBarTopPx: re,
      xBarLeftPx: G,
      isShowXBar: Z,
      isShowYBar: le,
      isIos: O,
      handleScroll: Y,
      handleContentResize: fe,
      handleContainerResize: Me,
      handleYScrollMouseDown: at,
      handleXScrollMouseDown: Ne,
      cssVars: n ? void 0 : Ge,
      themeClass: pe == null ? void 0 : pe.themeClass,
      onRender: pe == null ? void 0 : pe.onRender
    });
  },
  render() {
    var e;
    const {
      $slots: t,
      mergedClsPrefix: n,
      triggerDisplayManually: r,
      rtlEnabled: o,
      internalHoistYRail: i,
      yPlacement: l,
      xPlacement: a,
      xScrollable: s
    } = this;
    if (!this.scrollable) return (e = t.default) === null || e === void 0 ? void 0 : e.call(t);
    const d = this.trigger === "none", u = (m, f) => c("div", {
      ref: "yRailRef",
      class: [`${n}-scrollbar-rail`, `${n}-scrollbar-rail--vertical`, `${n}-scrollbar-rail--vertical--${l}`, m],
      "data-scrollbar-rail": !0,
      style: [f || "", this.verticalRailStyle],
      "aria-hidden": !0
    }, c(d ? Yo : Ht, d ? null : {
      name: "fade-in-transition"
    }, {
      default: () => this.needYBar && this.isShowYBar && !this.isIos ? c("div", {
        class: `${n}-scrollbar-rail__scrollbar`,
        style: {
          height: this.yBarSizePx,
          top: this.yBarTopPx
        },
        onMousedown: this.handleYScrollMouseDown
      }) : null
    })), h = () => {
      var m, f;
      return (m = this.onRender) === null || m === void 0 || m.call(this), c("div", Vt(this.$attrs, {
        role: "none",
        ref: "wrapperRef",
        class: [`${n}-scrollbar`, this.themeClass, o && `${n}-scrollbar--rtl`],
        style: this.cssVars,
        onMouseenter: r ? void 0 : this.handleMouseEnterWrapper,
        onMouseleave: r ? void 0 : this.handleMouseLeaveWrapper
      }), [this.container ? (f = t.default) === null || f === void 0 ? void 0 : f.call(t) : c("div", {
        role: "none",
        ref: "containerRef",
        class: [`${n}-scrollbar-container`, this.containerClass],
        style: this.containerStyle,
        onScroll: this.handleScroll,
        onWheel: this.onWheel
      }, c(on, {
        onResize: this.handleContentResize
      }, {
        default: () => c("div", {
          ref: "contentRef",
          role: "none",
          style: [{
            width: this.xScrollable ? "fit-content" : null
          }, this.contentStyle],
          class: [`${n}-scrollbar-content`, this.contentClass]
        }, t)
      })), i ? null : u(void 0, void 0), s && c("div", {
        ref: "xRailRef",
        class: [`${n}-scrollbar-rail`, `${n}-scrollbar-rail--horizontal`, `${n}-scrollbar-rail--horizontal--${a}`],
        style: this.horizontalRailStyle,
        "data-scrollbar-rail": !0,
        "aria-hidden": !0
      }, c(d ? Yo : Ht, d ? null : {
        name: "fade-in-transition"
      }, {
        default: () => this.needXBar && this.isShowXBar && !this.isIos ? c("div", {
          class: `${n}-scrollbar-rail__scrollbar`,
          style: {
            width: this.xBarSizePx,
            right: o ? this.xBarLeftPx : void 0,
            left: o ? void 0 : this.xBarLeftPx
          },
          onMousedown: this.handleXScrollMouseDown
        }) : null
      }))]);
    }, b = this.container ? h() : c(on, {
      onResize: this.handleContainerResize
    }, {
      default: h
    });
    return i ? c(Pt, null, b, u(this.themeClass, this.cssVars)) : b;
  }
}), ss = Zn;
function Ea(e) {
  return Array.isArray(e) ? e : [e];
}
const ei = {
  STOP: "STOP"
};
function ds(e, t) {
  const n = t(e);
  e.children !== void 0 && n !== ei.STOP && e.children.forEach((r) => ds(r, t));
}
function ch(e, t = {}) {
  const { preserveGroup: n = !1 } = t, r = [], o = n ? (l) => {
    l.isLeaf || (r.push(l.key), i(l.children));
  } : (l) => {
    l.isLeaf || (l.isGroup || r.push(l.key), i(l.children));
  };
  function i(l) {
    l.forEach(o);
  }
  return i(e), r;
}
function uh(e, t) {
  const { isLeaf: n } = e;
  return n !== void 0 ? n : !t(e);
}
function fh(e) {
  return e.children;
}
function hh(e) {
  return e.key;
}
function ph() {
  return !1;
}
function bh(e, t) {
  const { isLeaf: n } = e;
  return !(n === !1 && !Array.isArray(t(e)));
}
function gh(e) {
  return e.disabled === !0;
}
function mh(e, t) {
  return e.isLeaf === !1 && !Array.isArray(t(e));
}
function Oo(e) {
  var t;
  return e == null ? [] : Array.isArray(e) ? e : (t = e.checkedKeys) !== null && t !== void 0 ? t : [];
}
function Bo(e) {
  var t;
  return e == null || Array.isArray(e) ? [] : (t = e.indeterminateKeys) !== null && t !== void 0 ? t : [];
}
function vh(e, t) {
  const n = new Set(e);
  return t.forEach((r) => {
    n.has(r) || n.add(r);
  }), Array.from(n);
}
function xh(e, t) {
  const n = new Set(e);
  return t.forEach((r) => {
    n.has(r) && n.delete(r);
  }), Array.from(n);
}
function yh(e) {
  return (e == null ? void 0 : e.type) === "group";
}
function wh(e) {
  const t = /* @__PURE__ */ new Map();
  return e.forEach((n, r) => {
    t.set(n.key, r);
  }), (n) => {
    var r;
    return (r = t.get(n)) !== null && r !== void 0 ? r : null;
  };
}
class Ch extends Error {
  constructor() {
    super(), this.message = "SubtreeNotLoadedError: checking a subtree whose required nodes are not fully loaded.";
  }
}
function Sh(e, t, n, r) {
  return Jr(t.concat(e), n, r, !1);
}
function kh(e, t) {
  const n = /* @__PURE__ */ new Set();
  return e.forEach((r) => {
    const o = t.treeNodeMap.get(r);
    if (o !== void 0) {
      let i = o.parent;
      for (; i !== null && !(i.disabled || n.has(i.key)); )
        n.add(i.key), i = i.parent;
    }
  }), n;
}
function Rh(e, t, n, r) {
  const o = Jr(t, n, r, !1), i = Jr(e, n, r, !0), l = kh(e, n), a = [];
  return o.forEach((s) => {
    (i.has(s) || l.has(s)) && a.push(s);
  }), a.forEach((s) => o.delete(s)), o;
}
function Eo(e, t) {
  const { checkedKeys: n, keysToCheck: r, keysToUncheck: o, indeterminateKeys: i, cascade: l, leafOnly: a, checkStrategy: s, allowNotLoaded: d } = e;
  if (!l)
    return r !== void 0 ? {
      checkedKeys: vh(n, r),
      indeterminateKeys: Array.from(i)
    } : o !== void 0 ? {
      checkedKeys: xh(n, o),
      indeterminateKeys: Array.from(i)
    } : {
      checkedKeys: Array.from(n),
      indeterminateKeys: Array.from(i)
    };
  const { levelTreeNodeMap: u } = t;
  let h;
  o !== void 0 ? h = Rh(o, n, t, d) : r !== void 0 ? h = Sh(r, n, t, d) : h = Jr(n, t, d, !1);
  const b = s === "parent", m = s === "child" || a, f = h, p = /* @__PURE__ */ new Set(), v = Math.max.apply(null, Array.from(u.keys()));
  for (let g = v; g >= 0; g -= 1) {
    const y = g === 0, S = u.get(g);
    for (const w of S) {
      if (w.isLeaf)
        continue;
      const { key: C, shallowLoaded: k } = w;
      if (m && k && w.children.forEach((M) => {
        !M.disabled && !M.isLeaf && M.shallowLoaded && f.has(M.key) && f.delete(M.key);
      }), w.disabled || !k)
        continue;
      let x = !0, z = !1, $ = !0;
      for (const M of w.children) {
        const V = M.key;
        if (!M.disabled) {
          if ($ && ($ = !1), f.has(V))
            z = !0;
          else if (p.has(V)) {
            z = !0, x = !1;
            break;
          } else if (x = !1, z)
            break;
        }
      }
      x && !$ ? (b && w.children.forEach((M) => {
        !M.disabled && f.has(M.key) && f.delete(M.key);
      }), f.add(C)) : z && p.add(C), y && m && f.has(C) && f.delete(C);
    }
  }
  return {
    checkedKeys: Array.from(f),
    indeterminateKeys: Array.from(p)
  };
}
function Jr(e, t, n, r) {
  const { treeNodeMap: o, getChildren: i } = t, l = /* @__PURE__ */ new Set(), a = new Set(e);
  return e.forEach((s) => {
    const d = o.get(s);
    d !== void 0 && ds(d, (u) => {
      if (u.disabled)
        return ei.STOP;
      const { key: h } = u;
      if (!l.has(h) && (l.add(h), a.add(h), mh(u.rawNode, i))) {
        if (r)
          return ei.STOP;
        if (!n)
          throw new Ch();
      }
    });
  }), a;
}
function Ph(e, { includeGroup: t = !1, includeSelf: n = !0 }, r) {
  var o;
  const i = r.treeNodeMap;
  let l = e == null ? null : (o = i.get(e)) !== null && o !== void 0 ? o : null;
  const a = {
    keyPath: [],
    treeNodePath: [],
    treeNode: l
  };
  if (l != null && l.ignored)
    return a.treeNode = null, a;
  for (; l; )
    !l.ignored && (t || !l.isGroup) && a.treeNodePath.push(l), l = l.parent;
  return a.treeNodePath.reverse(), n || a.treeNodePath.pop(), a.keyPath = a.treeNodePath.map((s) => s.key), a;
}
function zh(e) {
  if (e.length === 0)
    return null;
  const t = e[0];
  return t.isGroup || t.ignored || t.disabled ? t.getNext() : t;
}
function $h(e, t) {
  const n = e.siblings, r = n.length, { index: o } = e;
  return t ? n[(o + 1) % r] : o === n.length - 1 ? null : n[o + 1];
}
function Ia(e, t, { loop: n = !1, includeDisabled: r = !1 } = {}) {
  const o = t === "prev" ? Th : $h, i = {
    reverse: t === "prev"
  };
  let l = !1, a = null;
  function s(d) {
    if (d !== null) {
      if (d === e) {
        if (!l)
          l = !0;
        else if (!e.disabled && !e.isGroup) {
          a = e;
          return;
        }
      } else if ((!d.disabled || r) && !d.ignored && !d.isGroup) {
        a = d;
        return;
      }
      if (d.isGroup) {
        const u = Pi(d, i);
        u !== null ? a = u : s(o(d, n));
      } else {
        const u = o(d, !1);
        if (u !== null)
          s(u);
        else {
          const h = Mh(d);
          h != null && h.isGroup ? s(o(h, n)) : n && s(o(d, !0));
        }
      }
    }
  }
  return s(e), a;
}
function Th(e, t) {
  const n = e.siblings, r = n.length, { index: o } = e;
  return t ? n[(o - 1 + r) % r] : o === 0 ? null : n[o - 1];
}
function Mh(e) {
  return e.parent;
}
function Pi(e, t = {}) {
  const { reverse: n = !1 } = t, { children: r } = e;
  if (r) {
    const { length: o } = r, i = n ? o - 1 : 0, l = n ? -1 : o, a = n ? -1 : 1;
    for (let s = i; s !== l; s += a) {
      const d = r[s];
      if (!d.disabled && !d.ignored)
        if (d.isGroup) {
          const u = Pi(d, t);
          if (u !== null)
            return u;
        } else
          return d;
    }
  }
  return null;
}
const Fh = {
  getChild() {
    return this.ignored ? null : Pi(this);
  },
  getParent() {
    const { parent: e } = this;
    return e != null && e.isGroup ? e.getParent() : e;
  },
  getNext(e = {}) {
    return Ia(this, "next", e);
  },
  getPrev(e = {}) {
    return Ia(this, "prev", e);
  }
};
function Oh(e, t) {
  const n = t ? new Set(t) : void 0, r = [];
  function o(i) {
    i.forEach((l) => {
      r.push(l), !(l.isLeaf || !l.children || l.ignored) && (l.isGroup || // normal non-leaf node
      n === void 0 || n.has(l.key)) && o(l.children);
    });
  }
  return o(e), r;
}
function Bh(e, t) {
  const n = e.key;
  for (; t; ) {
    if (t.key === n)
      return !0;
    t = t.parent;
  }
  return !1;
}
function cs(e, t, n, r, o, i = null, l = 0) {
  const a = [];
  return e.forEach((s, d) => {
    var u;
    const h = Object.create(r);
    if (h.rawNode = s, h.siblings = a, h.level = l, h.index = d, h.isFirstChild = d === 0, h.isLastChild = d + 1 === e.length, h.parent = i, !h.ignored) {
      const b = o(s);
      Array.isArray(b) && (h.children = cs(b, t, n, r, o, h, l + 1));
    }
    a.push(h), t.set(h.key, h), n.has(l) || n.set(l, []), (u = n.get(l)) === null || u === void 0 || u.push(h);
  }), a;
}
function lo(e, t = {}) {
  var n;
  const r = /* @__PURE__ */ new Map(), o = /* @__PURE__ */ new Map(), { getDisabled: i = gh, getIgnored: l = ph, getIsGroup: a = yh, getKey: s = hh } = t, d = (n = t.getChildren) !== null && n !== void 0 ? n : fh, u = t.ignoreEmptyChildren ? (w) => {
    const C = d(w);
    return Array.isArray(C) ? C.length ? C : null : C;
  } : d, h = Object.assign({
    get key() {
      return s(this.rawNode);
    },
    get disabled() {
      return i(this.rawNode);
    },
    get isGroup() {
      return a(this.rawNode);
    },
    get isLeaf() {
      return uh(this.rawNode, u);
    },
    get shallowLoaded() {
      return bh(this.rawNode, u);
    },
    get ignored() {
      return l(this.rawNode);
    },
    contains(w) {
      return Bh(this, w);
    }
  }, Fh), b = cs(e, r, o, h, u);
  function m(w) {
    if (w == null)
      return null;
    const C = r.get(w);
    return C && !C.isGroup && !C.ignored ? C : null;
  }
  function f(w) {
    if (w == null)
      return null;
    const C = r.get(w);
    return C && !C.ignored ? C : null;
  }
  function p(w, C) {
    const k = f(w);
    return k ? k.getPrev(C) : null;
  }
  function v(w, C) {
    const k = f(w);
    return k ? k.getNext(C) : null;
  }
  function g(w) {
    const C = f(w);
    return C ? C.getParent() : null;
  }
  function y(w) {
    const C = f(w);
    return C ? C.getChild() : null;
  }
  const S = {
    treeNodes: b,
    treeNodeMap: r,
    levelTreeNodeMap: o,
    maxLevel: Math.max(...o.keys()),
    getChildren: u,
    getFlattenedNodes(w) {
      return Oh(b, w);
    },
    getNode: m,
    getPrev: p,
    getNext: v,
    getParent: g,
    getChild: y,
    getFirstAvailableNode() {
      return zh(b);
    },
    getPath(w, C = {}) {
      return Ph(w, C, S);
    },
    getCheckedKeys(w, C = {}) {
      const { cascade: k = !0, leafOnly: x = !1, checkStrategy: z = "all", allowNotLoaded: $ = !1 } = C;
      return Eo({
        checkedKeys: Oo(w),
        indeterminateKeys: Bo(w),
        cascade: k,
        leafOnly: x,
        checkStrategy: z,
        allowNotLoaded: $
      }, S);
    },
    check(w, C, k = {}) {
      const { cascade: x = !0, leafOnly: z = !1, checkStrategy: $ = "all", allowNotLoaded: M = !1 } = k;
      return Eo({
        checkedKeys: Oo(C),
        indeterminateKeys: Bo(C),
        keysToCheck: w == null ? [] : Ea(w),
        cascade: x,
        leafOnly: z,
        checkStrategy: $,
        allowNotLoaded: M
      }, S);
    },
    uncheck(w, C, k = {}) {
      const { cascade: x = !0, leafOnly: z = !1, checkStrategy: $ = "all", allowNotLoaded: M = !1 } = k;
      return Eo({
        checkedKeys: Oo(C),
        indeterminateKeys: Bo(C),
        keysToUncheck: w == null ? [] : Ea(w),
        cascade: x,
        leafOnly: z,
        checkStrategy: $,
        allowNotLoaded: M
      }, S);
    },
    getNonLeafKeys(w = {}) {
      return ch(b, w);
    }
  };
  return S;
}
const Eh = {
  iconSizeTiny: "28px",
  iconSizeSmall: "34px",
  iconSizeMedium: "40px",
  iconSizeLarge: "46px",
  iconSizeHuge: "52px"
};
function Ih(e) {
  const {
    textColorDisabled: t,
    iconColor: n,
    textColor2: r,
    fontSizeTiny: o,
    fontSizeSmall: i,
    fontSizeMedium: l,
    fontSizeLarge: a,
    fontSizeHuge: s
  } = e;
  return Object.assign(Object.assign({}, Eh), {
    fontSizeTiny: o,
    fontSizeSmall: i,
    fontSizeMedium: l,
    fontSizeLarge: a,
    fontSizeHuge: s,
    textColor: t,
    iconColor: n,
    extraTextColor: r
  });
}
const zi = {
  name: "Empty",
  common: rt,
  self: Ih
}, _h = R("empty", `
 display: flex;
 flex-direction: column;
 align-items: center;
 font-size: var(--n-font-size);
`, [A("icon", `
 width: var(--n-icon-size);
 height: var(--n-icon-size);
 font-size: var(--n-icon-size);
 line-height: var(--n-icon-size);
 color: var(--n-icon-color);
 transition:
 color .3s var(--n-bezier);
 `, [B("+", [A("description", `
 margin-top: 8px;
 `)])]), A("description", `
 transition: color .3s var(--n-bezier);
 color: var(--n-text-color);
 `), A("extra", `
 text-align: center;
 transition: color .3s var(--n-bezier);
 margin-top: 12px;
 color: var(--n-extra-text-color);
 `)]), Ah = Object.assign(Object.assign({}, we.props), {
  description: String,
  showDescription: {
    type: Boolean,
    default: !0
  },
  showIcon: {
    type: Boolean,
    default: !0
  },
  size: {
    type: String,
    default: "medium"
  },
  renderIcon: Function
}), us = ie({
  name: "Empty",
  props: Ah,
  slots: Object,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      inlineThemeDisabled: n,
      mergedComponentPropsRef: r
    } = _e(e), o = we("Empty", "-empty", _h, zi, e, t), {
      localeRef: i
    } = Pn("Empty"), l = T(() => {
      var u, h, b;
      return (u = e.description) !== null && u !== void 0 ? u : (b = (h = r == null ? void 0 : r.value) === null || h === void 0 ? void 0 : h.Empty) === null || b === void 0 ? void 0 : b.description;
    }), a = T(() => {
      var u, h;
      return ((h = (u = r == null ? void 0 : r.value) === null || u === void 0 ? void 0 : u.Empty) === null || h === void 0 ? void 0 : h.renderIcon) || (() => c(Gf, null));
    }), s = T(() => {
      const {
        size: u
      } = e, {
        common: {
          cubicBezierEaseInOut: h
        },
        self: {
          [J("iconSize", u)]: b,
          [J("fontSize", u)]: m,
          textColor: f,
          iconColor: p,
          extraTextColor: v
        }
      } = o.value;
      return {
        "--n-icon-size": b,
        "--n-font-size": m,
        "--n-bezier": h,
        "--n-text-color": f,
        "--n-icon-color": p,
        "--n-extra-text-color": v
      };
    }), d = n ? it("empty", T(() => {
      let u = "";
      const {
        size: h
      } = e;
      return u += h[0], u;
    }), s, e) : void 0;
    return {
      mergedClsPrefix: t,
      mergedRenderIcon: a,
      localizedDescription: T(() => l.value || i.value.description),
      cssVars: n ? void 0 : s,
      themeClass: d == null ? void 0 : d.themeClass,
      onRender: d == null ? void 0 : d.onRender
    };
  },
  render() {
    const {
      $slots: e,
      mergedClsPrefix: t,
      onRender: n
    } = this;
    return n == null || n(), c("div", {
      class: [`${t}-empty`, this.themeClass],
      style: this.cssVars
    }, this.showIcon ? c("div", {
      class: `${t}-empty__icon`
    }, e.icon ? e.icon() : c(ct, {
      clsPrefix: t
    }, {
      default: this.mergedRenderIcon
    })) : null, this.showDescription ? c("div", {
      class: `${t}-empty__description`
    }, e.default ? e.default() : this.localizedDescription) : null, e.extra ? c("div", {
      class: `${t}-empty__extra`
    }, e.extra()) : null);
  }
}), Lh = {
  height: "calc(var(--n-option-height) * 7.6)",
  paddingTiny: "4px 0",
  paddingSmall: "4px 0",
  paddingMedium: "4px 0",
  paddingLarge: "4px 0",
  paddingHuge: "4px 0",
  optionPaddingTiny: "0 12px",
  optionPaddingSmall: "0 12px",
  optionPaddingMedium: "0 12px",
  optionPaddingLarge: "0 12px",
  optionPaddingHuge: "0 12px",
  loadingSize: "18px"
};
function Hh(e) {
  const {
    borderRadius: t,
    popoverColor: n,
    textColor3: r,
    dividerColor: o,
    textColor2: i,
    primaryColorPressed: l,
    textColorDisabled: a,
    primaryColor: s,
    opacityDisabled: d,
    hoverColor: u,
    fontSizeTiny: h,
    fontSizeSmall: b,
    fontSizeMedium: m,
    fontSizeLarge: f,
    fontSizeHuge: p,
    heightTiny: v,
    heightSmall: g,
    heightMedium: y,
    heightLarge: S,
    heightHuge: w
  } = e;
  return Object.assign(Object.assign({}, Lh), {
    optionFontSizeTiny: h,
    optionFontSizeSmall: b,
    optionFontSizeMedium: m,
    optionFontSizeLarge: f,
    optionFontSizeHuge: p,
    optionHeightTiny: v,
    optionHeightSmall: g,
    optionHeightMedium: y,
    optionHeightLarge: S,
    optionHeightHuge: w,
    borderRadius: t,
    color: n,
    groupHeaderTextColor: r,
    actionDividerColor: o,
    optionTextColor: i,
    optionTextColorPressed: l,
    optionTextColorDisabled: a,
    optionTextColorActive: s,
    optionOpacityDisabled: d,
    optionCheckColor: s,
    optionColorPending: u,
    optionColorActive: "rgba(0, 0, 0, 0)",
    optionColorActivePending: u,
    actionTextColor: i,
    loadingColor: s
  });
}
const $i = {
  name: "InternalSelectMenu",
  common: rt,
  peers: {
    Scrollbar: ao,
    Empty: zi
  },
  self: Hh
}, _a = ie({
  name: "NBaseSelectGroupHeader",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNode: {
      type: Object,
      required: !0
    }
  },
  setup() {
    const {
      renderLabelRef: e,
      renderOptionRef: t,
      labelFieldRef: n,
      nodePropsRef: r
    } = ke(gi);
    return {
      labelField: n,
      nodeProps: r,
      renderLabel: e,
      renderOption: t
    };
  },
  render() {
    const {
      clsPrefix: e,
      renderLabel: t,
      renderOption: n,
      nodeProps: r,
      tmNode: {
        rawNode: o
      }
    } = this, i = r == null ? void 0 : r(o), l = t ? t(o, !1) : gt(o[this.labelField], o, !1), a = c("div", Object.assign({}, i, {
      class: [`${e}-base-select-group-header`, i == null ? void 0 : i.class]
    }), l);
    return o.render ? o.render({
      node: a,
      option: o
    }) : n ? n({
      node: a,
      option: o,
      selected: !1
    }) : a;
  }
});
function Dh(e, t) {
  return c(Ht, {
    name: "fade-in-scale-up-transition"
  }, {
    default: () => e ? c(ct, {
      clsPrefix: t,
      class: `${t}-base-select-option__check`
    }, {
      default: () => c(Uf)
    }) : null
  });
}
const Aa = ie({
  name: "NBaseSelectOption",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNode: {
      type: Object,
      required: !0
    }
  },
  setup(e) {
    const {
      valueRef: t,
      pendingTmNodeRef: n,
      multipleRef: r,
      valueSetRef: o,
      renderLabelRef: i,
      renderOptionRef: l,
      labelFieldRef: a,
      valueFieldRef: s,
      showCheckmarkRef: d,
      nodePropsRef: u,
      handleOptionClick: h,
      handleOptionMouseEnter: b
    } = ke(gi), m = Ue(() => {
      const {
        value: g
      } = n;
      return g ? e.tmNode.key === g.key : !1;
    });
    function f(g) {
      const {
        tmNode: y
      } = e;
      y.disabled || h(g, y);
    }
    function p(g) {
      const {
        tmNode: y
      } = e;
      y.disabled || b(g, y);
    }
    function v(g) {
      const {
        tmNode: y
      } = e, {
        value: S
      } = m;
      y.disabled || S || b(g, y);
    }
    return {
      multiple: r,
      isGrouped: Ue(() => {
        const {
          tmNode: g
        } = e, {
          parent: y
        } = g;
        return y && y.rawNode.type === "group";
      }),
      showCheckmark: d,
      nodeProps: u,
      isPending: m,
      isSelected: Ue(() => {
        const {
          value: g
        } = t, {
          value: y
        } = r;
        if (g === null) return !1;
        const S = e.tmNode.rawNode[s.value];
        if (y) {
          const {
            value: w
          } = o;
          return w.has(S);
        } else
          return g === S;
      }),
      labelField: a,
      renderLabel: i,
      renderOption: l,
      handleMouseMove: v,
      handleMouseEnter: p,
      handleClick: f
    };
  },
  render() {
    const {
      clsPrefix: e,
      tmNode: {
        rawNode: t
      },
      isSelected: n,
      isPending: r,
      isGrouped: o,
      showCheckmark: i,
      nodeProps: l,
      renderOption: a,
      renderLabel: s,
      handleClick: d,
      handleMouseEnter: u,
      handleMouseMove: h
    } = this, b = Dh(n, e), m = s ? [s(t, n), i && b] : [gt(t[this.labelField], t, n), i && b], f = l == null ? void 0 : l(t), p = c("div", Object.assign({}, f, {
      class: [`${e}-base-select-option`, t.class, f == null ? void 0 : f.class, {
        [`${e}-base-select-option--disabled`]: t.disabled,
        [`${e}-base-select-option--selected`]: n,
        [`${e}-base-select-option--grouped`]: o,
        [`${e}-base-select-option--pending`]: r,
        [`${e}-base-select-option--show-checkmark`]: i
      }],
      style: [(f == null ? void 0 : f.style) || "", t.style || ""],
      onClick: hr([d, f == null ? void 0 : f.onClick]),
      onMouseenter: hr([u, f == null ? void 0 : f.onMouseenter]),
      onMousemove: hr([h, f == null ? void 0 : f.onMousemove])
    }), c("div", {
      class: `${e}-base-select-option__content`
    }, m));
    return t.render ? t.render({
      node: p,
      option: t,
      selected: n
    }) : a ? a({
      node: p,
      option: t,
      selected: n
    }) : p;
  }
}), {
  cubicBezierEaseIn: La,
  cubicBezierEaseOut: Ha
} = pn;
function Pr({
  transformOrigin: e = "inherit",
  duration: t = ".2s",
  enterScale: n = ".9",
  originalTransform: r = "",
  originalTransition: o = ""
} = {}) {
  return [B("&.fade-in-scale-up-transition-leave-active", {
    transformOrigin: e,
    transition: `opacity ${t} ${La}, transform ${t} ${La} ${o && `,${o}`}`
  }), B("&.fade-in-scale-up-transition-enter-active", {
    transformOrigin: e,
    transition: `opacity ${t} ${Ha}, transform ${t} ${Ha} ${o && `,${o}`}`
  }), B("&.fade-in-scale-up-transition-enter-from, &.fade-in-scale-up-transition-leave-to", {
    opacity: 0,
    transform: `${r} scale(${n})`
  }), B("&.fade-in-scale-up-transition-leave-from, &.fade-in-scale-up-transition-enter-to", {
    opacity: 1,
    transform: `${r} scale(1)`
  })];
}
const jh = R("base-select-menu", `
 line-height: 1.5;
 outline: none;
 z-index: 0;
 position: relative;
 border-radius: var(--n-border-radius);
 transition:
 background-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier);
 background-color: var(--n-color);
`, [R("scrollbar", `
 max-height: var(--n-height);
 `), R("virtual-list", `
 max-height: var(--n-height);
 `), R("base-select-option", `
 min-height: var(--n-option-height);
 font-size: var(--n-option-font-size);
 display: flex;
 align-items: center;
 `, [A("content", `
 z-index: 1;
 white-space: nowrap;
 text-overflow: ellipsis;
 overflow: hidden;
 `)]), R("base-select-group-header", `
 min-height: var(--n-option-height);
 font-size: .93em;
 display: flex;
 align-items: center;
 `), R("base-select-menu-option-wrapper", `
 position: relative;
 width: 100%;
 `), A("loading, empty", `
 display: flex;
 padding: 12px 32px;
 flex: 1;
 justify-content: center;
 `), A("loading", `
 color: var(--n-loading-color);
 font-size: var(--n-loading-size);
 `), A("header", `
 padding: 8px var(--n-option-padding-left);
 font-size: var(--n-option-font-size);
 transition: 
 color .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 border-bottom: 1px solid var(--n-action-divider-color);
 color: var(--n-action-text-color);
 `), A("action", `
 padding: 8px var(--n-option-padding-left);
 font-size: var(--n-option-font-size);
 transition: 
 color .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 border-top: 1px solid var(--n-action-divider-color);
 color: var(--n-action-text-color);
 `), R("base-select-group-header", `
 position: relative;
 cursor: default;
 padding: var(--n-option-padding);
 color: var(--n-group-header-text-color);
 `), R("base-select-option", `
 cursor: pointer;
 position: relative;
 padding: var(--n-option-padding);
 transition:
 color .3s var(--n-bezier),
 opacity .3s var(--n-bezier);
 box-sizing: border-box;
 color: var(--n-option-text-color);
 opacity: 1;
 `, [_("show-checkmark", `
 padding-right: calc(var(--n-option-padding-right) + 20px);
 `), B("&::before", `
 content: "";
 position: absolute;
 left: 4px;
 right: 4px;
 top: 0;
 bottom: 0;
 border-radius: var(--n-border-radius);
 transition: background-color .3s var(--n-bezier);
 `), B("&:active", `
 color: var(--n-option-text-color-pressed);
 `), _("grouped", `
 padding-left: calc(var(--n-option-padding-left) * 1.5);
 `), _("pending", [B("&::before", `
 background-color: var(--n-option-color-pending);
 `)]), _("selected", `
 color: var(--n-option-text-color-active);
 `, [B("&::before", `
 background-color: var(--n-option-color-active);
 `), _("pending", [B("&::before", `
 background-color: var(--n-option-color-active-pending);
 `)])]), _("disabled", `
 cursor: not-allowed;
 `, [Je("selected", `
 color: var(--n-option-text-color-disabled);
 `), _("selected", `
 opacity: var(--n-option-opacity-disabled);
 `)]), A("check", `
 font-size: 16px;
 position: absolute;
 right: calc(var(--n-option-padding-right) - 4px);
 top: calc(50% - 7px);
 color: var(--n-option-check-color);
 transition: color .3s var(--n-bezier);
 `, [Pr({
  enterScale: "0.5"
})])])]), fs = ie({
  name: "InternalSelectMenu",
  props: Object.assign(Object.assign({}, we.props), {
    clsPrefix: {
      type: String,
      required: !0
    },
    scrollable: {
      type: Boolean,
      default: !0
    },
    treeMate: {
      type: Object,
      required: !0
    },
    multiple: Boolean,
    size: {
      type: String,
      default: "medium"
    },
    value: {
      type: [String, Number, Array],
      default: null
    },
    autoPending: Boolean,
    virtualScroll: {
      type: Boolean,
      default: !0
    },
    // show is used to toggle pending state initialization
    show: {
      type: Boolean,
      default: !0
    },
    labelField: {
      type: String,
      default: "label"
    },
    valueField: {
      type: String,
      default: "value"
    },
    loading: Boolean,
    focusable: Boolean,
    renderLabel: Function,
    renderOption: Function,
    nodeProps: Function,
    showCheckmark: {
      type: Boolean,
      default: !0
    },
    onMousedown: Function,
    onScroll: Function,
    onFocus: Function,
    onBlur: Function,
    onKeyup: Function,
    onKeydown: Function,
    onTabOut: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onResize: Function,
    resetMenuOnOptionsChange: {
      type: Boolean,
      default: !0
    },
    inlineThemeDisabled: Boolean,
    // deprecated
    onToggle: Function
  }),
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedRtlRef: n
    } = _e(e), r = $t("InternalSelectMenu", n, t), o = we("InternalSelectMenu", "-internal-select-menu", jh, $i, e, ae(e, "clsPrefix")), i = L(null), l = L(null), a = L(null), s = T(() => e.treeMate.getFlattenedNodes()), d = T(() => wh(s.value)), u = L(null);
    function h() {
      const {
        treeMate: j
      } = e;
      let q = null;
      const {
        value: Z
      } = e;
      Z === null ? q = j.getFirstAvailableNode() : (e.multiple ? q = j.getNode((Z || [])[(Z || []).length - 1]) : q = j.getNode(Z), (!q || q.disabled) && (q = j.getFirstAvailableNode())), I(q || null);
    }
    function b() {
      const {
        value: j
      } = u;
      j && !e.treeMate.getNode(j.key) && (u.value = null);
    }
    let m;
    je(() => e.show, (j) => {
      j ? m = je(() => e.treeMate, () => {
        e.resetMenuOnOptionsChange ? (e.autoPending ? h() : b(), Tt(F)) : b();
      }, {
        immediate: !0
      }) : m == null || m();
    }, {
      immediate: !0
    }), ut(() => {
      m == null || m();
    });
    const f = T(() => Nt(o.value.self[J("optionHeight", e.size)])), p = T(() => mt(o.value.self[J("padding", e.size)])), v = T(() => e.multiple && Array.isArray(e.value) ? new Set(e.value) : /* @__PURE__ */ new Set()), g = T(() => {
      const j = s.value;
      return j && j.length === 0;
    });
    function y(j) {
      const {
        onToggle: q
      } = e;
      q && q(j);
    }
    function S(j) {
      const {
        onScroll: q
      } = e;
      q && q(j);
    }
    function w(j) {
      var q;
      (q = a.value) === null || q === void 0 || q.sync(), S(j);
    }
    function C() {
      var j;
      (j = a.value) === null || j === void 0 || j.sync();
    }
    function k() {
      const {
        value: j
      } = u;
      return j || null;
    }
    function x(j, q) {
      q.disabled || I(q, !1);
    }
    function z(j, q) {
      q.disabled || y(q);
    }
    function $(j) {
      var q;
      Lt(j, "action") || (q = e.onKeyup) === null || q === void 0 || q.call(e, j);
    }
    function M(j) {
      var q;
      Lt(j, "action") || (q = e.onKeydown) === null || q === void 0 || q.call(e, j);
    }
    function V(j) {
      var q;
      (q = e.onMousedown) === null || q === void 0 || q.call(e, j), !e.focusable && j.preventDefault();
    }
    function O() {
      const {
        value: j
      } = u;
      j && I(j.getNext({
        loop: !0
      }), !0);
    }
    function E() {
      const {
        value: j
      } = u;
      j && I(j.getPrev({
        loop: !0
      }), !0);
    }
    function I(j, q = !1) {
      u.value = j, q && F();
    }
    function F() {
      var j, q;
      const Z = u.value;
      if (!Z) return;
      const le = d.value(Z.key);
      le !== null && (e.virtualScroll ? (j = l.value) === null || j === void 0 || j.scrollTo({
        index: le
      }) : (q = a.value) === null || q === void 0 || q.scrollTo({
        index: le,
        elSize: f.value
      }));
    }
    function N(j) {
      var q, Z;
      !((q = i.value) === null || q === void 0) && q.contains(j.target) && ((Z = e.onFocus) === null || Z === void 0 || Z.call(e, j));
    }
    function W(j) {
      var q, Z;
      !((q = i.value) === null || q === void 0) && q.contains(j.relatedTarget) || (Z = e.onBlur) === null || Z === void 0 || Z.call(e, j);
    }
    We(gi, {
      handleOptionMouseEnter: x,
      handleOptionClick: z,
      valueSetRef: v,
      pendingTmNodeRef: u,
      nodePropsRef: ae(e, "nodeProps"),
      showCheckmarkRef: ae(e, "showCheckmark"),
      multipleRef: ae(e, "multiple"),
      valueRef: ae(e, "value"),
      renderLabelRef: ae(e, "renderLabel"),
      renderOptionRef: ae(e, "renderOption"),
      labelFieldRef: ae(e, "labelField"),
      valueFieldRef: ae(e, "valueField")
    }), We($l, i), vt(() => {
      const {
        value: j
      } = a;
      j && j.sync();
    });
    const X = T(() => {
      const {
        size: j
      } = e, {
        common: {
          cubicBezierEaseInOut: q
        },
        self: {
          height: Z,
          borderRadius: le,
          color: ue,
          groupHeaderTextColor: be,
          actionDividerColor: Re,
          optionTextColorPressed: K,
          optionTextColor: fe,
          optionTextColorDisabled: Me,
          optionTextColorActive: ye,
          optionOpacityDisabled: Fe,
          optionCheckColor: Te,
          actionTextColor: Qe,
          optionColorPending: qe,
          optionColorActive: tt,
          loadingColor: et,
          loadingSize: me,
          optionColorActivePending: U,
          [J("optionFontSize", j)]: Y,
          [J("optionHeight", j)]: de,
          [J("optionPadding", j)]: xe
        }
      } = o.value;
      return {
        "--n-height": Z,
        "--n-action-divider-color": Re,
        "--n-action-text-color": Qe,
        "--n-bezier": q,
        "--n-border-radius": le,
        "--n-color": ue,
        "--n-option-font-size": Y,
        "--n-group-header-text-color": be,
        "--n-option-check-color": Te,
        "--n-option-color-pending": qe,
        "--n-option-color-active": tt,
        "--n-option-color-active-pending": U,
        "--n-option-height": de,
        "--n-option-opacity-disabled": Fe,
        "--n-option-text-color": fe,
        "--n-option-text-color-active": ye,
        "--n-option-text-color-disabled": Me,
        "--n-option-text-color-pressed": K,
        "--n-option-padding": xe,
        "--n-option-padding-left": mt(xe, "left"),
        "--n-option-padding-right": mt(xe, "right"),
        "--n-loading-color": et,
        "--n-loading-size": me
      };
    }), {
      inlineThemeDisabled: re
    } = e, Q = re ? it("internal-select-menu", T(() => e.size[0]), X, e) : void 0, G = {
      selfRef: i,
      next: O,
      prev: E,
      getPendingTmNode: k
    };
    return ql(i, e.onResize), Object.assign({
      mergedTheme: o,
      mergedClsPrefix: t,
      rtlEnabled: r,
      virtualListRef: l,
      scrollbarRef: a,
      itemSize: f,
      padding: p,
      flattenedNodes: s,
      empty: g,
      virtualListContainer() {
        const {
          value: j
        } = l;
        return j == null ? void 0 : j.listElRef;
      },
      virtualListContent() {
        const {
          value: j
        } = l;
        return j == null ? void 0 : j.itemsElRef;
      },
      doScroll: S,
      handleFocusin: N,
      handleFocusout: W,
      handleKeyUp: $,
      handleKeyDown: M,
      handleMouseDown: V,
      handleVirtualListResize: C,
      handleVirtualListScroll: w,
      cssVars: re ? void 0 : X,
      themeClass: Q == null ? void 0 : Q.themeClass,
      onRender: Q == null ? void 0 : Q.onRender
    }, G);
  },
  render() {
    const {
      $slots: e,
      virtualScroll: t,
      clsPrefix: n,
      mergedTheme: r,
      themeClass: o,
      onRender: i
    } = this;
    return i == null || i(), c("div", {
      ref: "selfRef",
      tabindex: this.focusable ? 0 : -1,
      class: [`${n}-base-select-menu`, this.rtlEnabled && `${n}-base-select-menu--rtl`, o, this.multiple && `${n}-base-select-menu--multiple`],
      style: this.cssVars,
      onFocusin: this.handleFocusin,
      onFocusout: this.handleFocusout,
      onKeyup: this.handleKeyUp,
      onKeydown: this.handleKeyDown,
      onMousedown: this.handleMouseDown,
      onMouseenter: this.onMouseenter,
      onMouseleave: this.onMouseleave
    }, Ze(e.header, (l) => l && c("div", {
      class: `${n}-base-select-menu__header`,
      "data-header": !0,
      key: "header"
    }, l)), this.loading ? c("div", {
      class: `${n}-base-select-menu__loading`
    }, c(Yn, {
      clsPrefix: n,
      strokeWidth: 20
    })) : this.empty ? c("div", {
      class: `${n}-base-select-menu__empty`,
      "data-empty": !0
    }, Et(e.empty, () => [c(us, {
      theme: r.peers.Empty,
      themeOverrides: r.peerOverrides.Empty,
      size: this.size
    })])) : c(Zn, {
      ref: "scrollbarRef",
      theme: r.peers.Scrollbar,
      themeOverrides: r.peerOverrides.Scrollbar,
      scrollable: this.scrollable,
      container: t ? this.virtualListContainer : void 0,
      content: t ? this.virtualListContent : void 0,
      onScroll: t ? void 0 : this.doScroll
    }, {
      default: () => t ? c(Si, {
        ref: "virtualListRef",
        class: `${n}-virtual-list`,
        items: this.flattenedNodes,
        itemSize: this.itemSize,
        showScrollbar: !1,
        paddingTop: this.padding.top,
        paddingBottom: this.padding.bottom,
        onResize: this.handleVirtualListResize,
        onScroll: this.handleVirtualListScroll,
        itemResizable: !0
      }, {
        default: ({
          item: l
        }) => l.isGroup ? c(_a, {
          key: l.key,
          clsPrefix: n,
          tmNode: l
        }) : l.ignored ? null : c(Aa, {
          clsPrefix: n,
          key: l.key,
          tmNode: l
        })
      }) : c("div", {
        class: `${n}-base-select-menu-option-wrapper`,
        style: {
          paddingTop: this.padding.top,
          paddingBottom: this.padding.bottom
        }
      }, this.flattenedNodes.map((l) => l.isGroup ? c(_a, {
        key: l.key,
        clsPrefix: n,
        tmNode: l
      }) : c(Aa, {
        clsPrefix: n,
        key: l.key,
        tmNode: l
      })))
    }), Ze(e.action, (l) => l && [c("div", {
      class: `${n}-base-select-menu__action`,
      "data-action": !0,
      key: "action"
    }, l), c(th, {
      onFocus: this.onTabOut,
      key: "focus-detector"
    })]));
  }
}), Wh = {
  space: "6px",
  spaceArrow: "10px",
  arrowOffset: "10px",
  arrowOffsetVertical: "10px",
  arrowHeight: "6px",
  padding: "8px 14px"
};
function Nh(e) {
  const {
    boxShadow2: t,
    popoverColor: n,
    textColor2: r,
    borderRadius: o,
    fontSize: i,
    dividerColor: l
  } = e;
  return Object.assign(Object.assign({}, Wh), {
    fontSize: i,
    borderRadius: o,
    color: n,
    dividerColor: l,
    textColor: r,
    boxShadow: t
  });
}
const Fn = {
  name: "Popover",
  common: rt,
  self: Nh
}, Io = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
}, ht = "var(--n-arrow-height) * 1.414", Vh = B([R("popover", `
 transition:
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 position: relative;
 font-size: var(--n-font-size);
 color: var(--n-text-color);
 box-shadow: var(--n-box-shadow);
 word-break: break-word;
 `, [B(">", [R("scrollbar", `
 height: inherit;
 max-height: inherit;
 `)]), Je("raw", `
 background-color: var(--n-color);
 border-radius: var(--n-border-radius);
 `, [Je("scrollable", [Je("show-header-or-footer", "padding: var(--n-padding);")])]), A("header", `
 padding: var(--n-padding);
 border-bottom: 1px solid var(--n-divider-color);
 transition: border-color .3s var(--n-bezier);
 `), A("footer", `
 padding: var(--n-padding);
 border-top: 1px solid var(--n-divider-color);
 transition: border-color .3s var(--n-bezier);
 `), _("scrollable, show-header-or-footer", [A("content", `
 padding: var(--n-padding);
 `)])]), R("popover-shared", `
 transform-origin: inherit;
 `, [
  R("popover-arrow-wrapper", `
 position: absolute;
 overflow: hidden;
 pointer-events: none;
 `, [R("popover-arrow", `
 transition: background-color .3s var(--n-bezier);
 position: absolute;
 display: block;
 width: calc(${ht});
 height: calc(${ht});
 box-shadow: 0 0 8px 0 rgba(0, 0, 0, .12);
 transform: rotate(45deg);
 background-color: var(--n-color);
 pointer-events: all;
 `)]),
  // body transition
  B("&.popover-transition-enter-from, &.popover-transition-leave-to", `
 opacity: 0;
 transform: scale(.85);
 `),
  B("&.popover-transition-enter-to, &.popover-transition-leave-from", `
 transform: scale(1);
 opacity: 1;
 `),
  B("&.popover-transition-enter-active", `
 transition:
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier),
 opacity .15s var(--n-bezier-ease-out),
 transform .15s var(--n-bezier-ease-out);
 `),
  B("&.popover-transition-leave-active", `
 transition:
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier),
 opacity .15s var(--n-bezier-ease-in),
 transform .15s var(--n-bezier-ease-in);
 `)
]), At("top-start", `
 top: calc(${ht} / -2);
 left: calc(${rn("top-start")} - var(--v-offset-left));
 `), At("top", `
 top: calc(${ht} / -2);
 transform: translateX(calc(${ht} / -2)) rotate(45deg);
 left: 50%;
 `), At("top-end", `
 top: calc(${ht} / -2);
 right: calc(${rn("top-end")} + var(--v-offset-left));
 `), At("bottom-start", `
 bottom: calc(${ht} / -2);
 left: calc(${rn("bottom-start")} - var(--v-offset-left));
 `), At("bottom", `
 bottom: calc(${ht} / -2);
 transform: translateX(calc(${ht} / -2)) rotate(45deg);
 left: 50%;
 `), At("bottom-end", `
 bottom: calc(${ht} / -2);
 right: calc(${rn("bottom-end")} + var(--v-offset-left));
 `), At("left-start", `
 left: calc(${ht} / -2);
 top: calc(${rn("left-start")} - var(--v-offset-top));
 `), At("left", `
 left: calc(${ht} / -2);
 transform: translateY(calc(${ht} / -2)) rotate(45deg);
 top: 50%;
 `), At("left-end", `
 left: calc(${ht} / -2);
 bottom: calc(${rn("left-end")} + var(--v-offset-top));
 `), At("right-start", `
 right: calc(${ht} / -2);
 top: calc(${rn("right-start")} - var(--v-offset-top));
 `), At("right", `
 right: calc(${ht} / -2);
 transform: translateY(calc(${ht} / -2)) rotate(45deg);
 top: 50%;
 `), At("right-end", `
 right: calc(${ht} / -2);
 bottom: calc(${rn("right-end")} + var(--v-offset-top));
 `), ...Rd({
  top: ["right-start", "left-start"],
  right: ["top-end", "bottom-end"],
  bottom: ["right-end", "left-end"],
  left: ["top-start", "bottom-start"]
}, (e, t) => {
  const n = ["right", "left"].includes(t), r = n ? "width" : "height";
  return e.map((o) => {
    const i = o.split("-")[1] === "end", a = `calc((${`var(--v-target-${r}, 0px)`} - ${ht}) / 2)`, s = rn(o);
    return B(`[v-placement="${o}"] >`, [R("popover-shared", [_("center-arrow", [R("popover-arrow", `${t}: calc(max(${a}, ${s}) ${i ? "+" : "-"} var(--v-offset-${n ? "left" : "top"}));`)])])]);
  });
})]);
function rn(e) {
  return ["top", "bottom"].includes(e.split("-")[0]) ? "var(--n-arrow-offset)" : "var(--n-arrow-offset-vertical)";
}
function At(e, t) {
  const n = e.split("-")[0], r = ["top", "bottom"].includes(n) ? "height: var(--n-space-arrow);" : "width: var(--n-space-arrow);";
  return B(`[v-placement="${e}"] >`, [R("popover-shared", `
 margin-${Io[n]}: var(--n-space);
 `, [_("show-arrow", `
 margin-${Io[n]}: var(--n-space-arrow);
 `), _("overlap", `
 margin: 0;
 `), Xd("popover-arrow-wrapper", `
 right: 0;
 left: 0;
 top: 0;
 bottom: 0;
 ${n}: 100%;
 ${Io[n]}: auto;
 ${r}
 `, [R("popover-arrow", t)])])]);
}
const hs = Object.assign(Object.assign({}, we.props), {
  to: Qt.propTo,
  show: Boolean,
  trigger: String,
  showArrow: Boolean,
  delay: Number,
  duration: Number,
  raw: Boolean,
  arrowPointToCenter: Boolean,
  arrowClass: String,
  arrowStyle: [String, Object],
  arrowWrapperClass: String,
  arrowWrapperStyle: [String, Object],
  displayDirective: String,
  x: Number,
  y: Number,
  flip: Boolean,
  overlap: Boolean,
  placement: String,
  width: [Number, String],
  keepAliveOnHover: Boolean,
  scrollable: Boolean,
  contentClass: String,
  contentStyle: [Object, String],
  headerClass: String,
  headerStyle: [Object, String],
  footerClass: String,
  footerStyle: [Object, String],
  // private
  internalDeactivateImmediately: Boolean,
  animated: Boolean,
  onClickoutside: Function,
  internalTrapFocus: Boolean,
  internalOnAfterLeave: Function,
  // deprecated
  minWidth: Number,
  maxWidth: Number
});
function ps({
  arrowClass: e,
  arrowStyle: t,
  arrowWrapperClass: n,
  arrowWrapperStyle: r,
  clsPrefix: o
}) {
  return c("div", {
    key: "__popover-arrow__",
    style: r,
    class: [`${o}-popover-arrow-wrapper`, n]
  }, c("div", {
    class: [`${o}-popover-arrow`, e],
    style: t
  }));
}
const Kh = ie({
  name: "PopoverBody",
  inheritAttrs: !1,
  props: hs,
  setup(e, {
    slots: t,
    attrs: n
  }) {
    const {
      namespaceRef: r,
      mergedClsPrefixRef: o,
      inlineThemeDisabled: i
    } = _e(e), l = we("Popover", "-popover", Vh, Fn, e, o), a = L(null), s = ke("NPopover"), d = L(null), u = L(e.show), h = L(!1);
    Bt(() => {
      const {
        show: x
      } = e;
      x && !xu() && !e.internalDeactivateImmediately && (h.value = !0);
    });
    const b = T(() => {
      const {
        trigger: x,
        onClickoutside: z
      } = e, $ = [], {
        positionManuallyRef: {
          value: M
        }
      } = s;
      return M || (x === "click" && !z && $.push([vr, w, void 0, {
        capture: !0
      }]), x === "hover" && $.push([$c, S])), z && $.push([vr, w, void 0, {
        capture: !0
      }]), (e.displayDirective === "show" || e.animated && h.value) && $.push([br, e.show]), $;
    }), m = T(() => {
      const {
        common: {
          cubicBezierEaseInOut: x,
          cubicBezierEaseIn: z,
          cubicBezierEaseOut: $
        },
        self: {
          space: M,
          spaceArrow: V,
          padding: O,
          fontSize: E,
          textColor: I,
          dividerColor: F,
          color: N,
          boxShadow: W,
          borderRadius: X,
          arrowHeight: re,
          arrowOffset: Q,
          arrowOffsetVertical: G
        }
      } = l.value;
      return {
        "--n-box-shadow": W,
        "--n-bezier": x,
        "--n-bezier-ease-in": z,
        "--n-bezier-ease-out": $,
        "--n-font-size": E,
        "--n-text-color": I,
        "--n-color": N,
        "--n-divider-color": F,
        "--n-border-radius": X,
        "--n-arrow-height": re,
        "--n-arrow-offset": Q,
        "--n-arrow-offset-vertical": G,
        "--n-padding": O,
        "--n-space": M,
        "--n-space-arrow": V
      };
    }), f = T(() => {
      const x = e.width === "trigger" ? void 0 : ot(e.width), z = [];
      x && z.push({
        width: x
      });
      const {
        maxWidth: $,
        minWidth: M
      } = e;
      return $ && z.push({
        maxWidth: ot($)
      }), M && z.push({
        maxWidth: ot(M)
      }), i || z.push(m.value), z;
    }), p = i ? it("popover", void 0, m, e) : void 0;
    s.setBodyInstance({
      syncPosition: v
    }), ut(() => {
      s.setBodyInstance(null);
    }), je(ae(e, "show"), (x) => {
      e.animated || (x ? u.value = !0 : u.value = !1);
    });
    function v() {
      var x;
      (x = a.value) === null || x === void 0 || x.syncPosition();
    }
    function g(x) {
      e.trigger === "hover" && e.keepAliveOnHover && e.show && s.handleMouseEnter(x);
    }
    function y(x) {
      e.trigger === "hover" && e.keepAliveOnHover && s.handleMouseLeave(x);
    }
    function S(x) {
      e.trigger === "hover" && !C().contains(Dn(x)) && s.handleMouseMoveOutside(x);
    }
    function w(x) {
      (e.trigger === "click" && !C().contains(Dn(x)) || e.onClickoutside) && s.handleClickOutside(x);
    }
    function C() {
      return s.getTriggerElement();
    }
    We(Sr, d), We(ro, null), We(oo, null);
    function k() {
      if (p == null || p.onRender(), !(e.displayDirective === "show" || e.show || e.animated && h.value))
        return null;
      let z;
      const $ = s.internalRenderBodyRef.value, {
        value: M
      } = o;
      if ($)
        z = $(
          // The popover class and overlap class must exists, they will be used
          // to place the body & transition animation.
          // Shadow class exists for reuse box-shadow.
          [`${M}-popover-shared`, p == null ? void 0 : p.themeClass.value, e.overlap && `${M}-popover-shared--overlap`, e.showArrow && `${M}-popover-shared--show-arrow`, e.arrowPointToCenter && `${M}-popover-shared--center-arrow`],
          d,
          f.value,
          g,
          y
        );
      else {
        const {
          value: V
        } = s.extraClassRef, {
          internalTrapFocus: O
        } = e, E = !Xo(t.header) || !Xo(t.footer), I = () => {
          var F, N;
          const W = E ? c(Pt, null, Ze(t.header, (Q) => Q ? c("div", {
            class: [`${M}-popover__header`, e.headerClass],
            style: e.headerStyle
          }, Q) : null), Ze(t.default, (Q) => Q ? c("div", {
            class: [`${M}-popover__content`, e.contentClass],
            style: e.contentStyle
          }, t) : null), Ze(t.footer, (Q) => Q ? c("div", {
            class: [`${M}-popover__footer`, e.footerClass],
            style: e.footerStyle
          }, Q) : null)) : e.scrollable ? (F = t.default) === null || F === void 0 ? void 0 : F.call(t) : c("div", {
            class: [`${M}-popover__content`, e.contentClass],
            style: e.contentStyle
          }, t), X = e.scrollable ? c(ss, {
            contentClass: E ? void 0 : `${M}-popover__content ${(N = e.contentClass) !== null && N !== void 0 ? N : ""}`,
            contentStyle: E ? void 0 : e.contentStyle
          }, {
            default: () => W
          }) : W, re = e.showArrow ? ps({
            arrowClass: e.arrowClass,
            arrowStyle: e.arrowStyle,
            arrowWrapperClass: e.arrowWrapperClass,
            arrowWrapperStyle: e.arrowWrapperStyle,
            clsPrefix: M
          }) : null;
          return [X, re];
        };
        z = c("div", Vt({
          class: [`${M}-popover`, `${M}-popover-shared`, p == null ? void 0 : p.themeClass.value, V.map((F) => `${M}-${F}`), {
            [`${M}-popover--scrollable`]: e.scrollable,
            [`${M}-popover--show-header-or-footer`]: E,
            [`${M}-popover--raw`]: e.raw,
            [`${M}-popover-shared--overlap`]: e.overlap,
            [`${M}-popover-shared--show-arrow`]: e.showArrow,
            [`${M}-popover-shared--center-arrow`]: e.arrowPointToCenter
          }],
          ref: d,
          style: f.value,
          onKeydown: s.handleKeydown,
          onMouseenter: g,
          onMouseleave: y
        }, n), O ? c(Ul, {
          active: e.show,
          autoFocus: !0
        }, {
          default: I
        }) : I());
      }
      return ln(z, b.value);
    }
    return {
      displayed: h,
      namespace: r,
      isMounted: s.isMountedRef,
      zIndex: s.zIndexRef,
      followerRef: a,
      adjustedTo: Qt(e),
      followerEnabled: u,
      renderContentNode: k
    };
  },
  render() {
    return c(wi, {
      ref: "followerRef",
      zIndex: this.zIndex,
      show: this.show,
      enabled: this.followerEnabled,
      to: this.adjustedTo,
      x: this.x,
      y: this.y,
      flip: this.flip,
      placement: this.placement,
      containerClass: this.namespace,
      overlap: this.overlap,
      width: this.width === "trigger" ? "target" : void 0,
      teleportDisabled: this.adjustedTo === Qt.tdkey
    }, {
      default: () => this.animated ? c(Ht, {
        name: "popover-transition",
        appear: this.isMounted,
        // Don't use watch to enable follower, since the transition may
        // make position sync timing very subtle and buggy.
        onEnter: () => {
          this.followerEnabled = !0;
        },
        onAfterLeave: () => {
          var e;
          (e = this.internalOnAfterLeave) === null || e === void 0 || e.call(this), this.followerEnabled = !1, this.displayed = !1;
        }
      }, {
        default: this.renderContentNode
      }) : this.renderContentNode()
    });
  }
}), Uh = Object.keys(hs), qh = {
  focus: ["onFocus", "onBlur"],
  click: ["onClick"],
  hover: ["onMouseenter", "onMouseleave"],
  manual: [],
  nested: ["onFocus", "onBlur", "onMouseenter", "onMouseleave", "onClick"]
};
function Gh(e, t, n) {
  qh[t].forEach((r) => {
    e.props ? e.props = Object.assign({}, e.props) : e.props = {};
    const o = e.props[r], i = n[r];
    o ? e.props[r] = (...l) => {
      o(...l), i(...l);
    } : e.props[r] = i;
  });
}
const zn = {
  show: {
    type: Boolean,
    default: void 0
  },
  defaultShow: Boolean,
  showArrow: {
    type: Boolean,
    default: !0
  },
  trigger: {
    type: String,
    default: "hover"
  },
  delay: {
    type: Number,
    default: 100
  },
  duration: {
    type: Number,
    default: 100
  },
  raw: Boolean,
  placement: {
    type: String,
    default: "top"
  },
  x: Number,
  y: Number,
  arrowPointToCenter: Boolean,
  disabled: Boolean,
  getDisabled: Function,
  displayDirective: {
    type: String,
    default: "if"
  },
  arrowClass: String,
  arrowStyle: [String, Object],
  arrowWrapperClass: String,
  arrowWrapperStyle: [String, Object],
  flip: {
    type: Boolean,
    default: !0
  },
  animated: {
    type: Boolean,
    default: !0
  },
  width: {
    type: [Number, String],
    default: void 0
  },
  overlap: Boolean,
  keepAliveOnHover: {
    type: Boolean,
    default: !0
  },
  zIndex: Number,
  to: Qt.propTo,
  scrollable: Boolean,
  contentClass: String,
  contentStyle: [Object, String],
  headerClass: String,
  headerStyle: [Object, String],
  footerClass: String,
  footerStyle: [Object, String],
  // events
  onClickoutside: Function,
  "onUpdate:show": [Function, Array],
  onUpdateShow: [Function, Array],
  // internal
  internalDeactivateImmediately: Boolean,
  internalSyncTargetWithParent: Boolean,
  internalInheritedEventHandlers: {
    type: Array,
    default: () => []
  },
  internalTrapFocus: Boolean,
  internalExtraClass: {
    type: Array,
    default: () => []
  },
  // deprecated
  onShow: [Function, Array],
  onHide: [Function, Array],
  arrow: {
    type: Boolean,
    default: void 0
  },
  minWidth: Number,
  maxWidth: Number
}, Xh = Object.assign(Object.assign(Object.assign({}, we.props), zn), {
  internalOnAfterLeave: Function,
  internalRenderBody: Function
}), Jn = ie({
  name: "Popover",
  inheritAttrs: !1,
  props: Xh,
  slots: Object,
  __popover__: !0,
  setup(e) {
    const t = Cr(), n = L(null), r = T(() => e.show), o = L(e.defaultShow), i = zt(r, o), l = Ue(() => e.disabled ? !1 : i.value), a = () => {
      if (e.disabled) return !0;
      const {
        getDisabled: F
      } = e;
      return !!(F != null && F());
    }, s = () => a() ? !1 : i.value, d = Xr(e, ["arrow", "showArrow"]), u = T(() => e.overlap ? !1 : d.value);
    let h = null;
    const b = L(null), m = L(null), f = Ue(() => e.x !== void 0 && e.y !== void 0);
    function p(F) {
      const {
        "onUpdate:show": N,
        onUpdateShow: W,
        onShow: X,
        onHide: re
      } = e;
      o.value = F, N && oe(N, F), W && oe(W, F), F && X && oe(X, !0), F && re && oe(re, !1);
    }
    function v() {
      h && h.syncPosition();
    }
    function g() {
      const {
        value: F
      } = b;
      F && (window.clearTimeout(F), b.value = null);
    }
    function y() {
      const {
        value: F
      } = m;
      F && (window.clearTimeout(F), m.value = null);
    }
    function S() {
      const F = a();
      if (e.trigger === "focus" && !F) {
        if (s()) return;
        p(!0);
      }
    }
    function w() {
      const F = a();
      if (e.trigger === "focus" && !F) {
        if (!s()) return;
        p(!1);
      }
    }
    function C() {
      const F = a();
      if (e.trigger === "hover" && !F) {
        if (y(), b.value !== null || s()) return;
        const N = () => {
          p(!0), b.value = null;
        }, {
          delay: W
        } = e;
        W === 0 ? N() : b.value = window.setTimeout(N, W);
      }
    }
    function k() {
      const F = a();
      if (e.trigger === "hover" && !F) {
        if (g(), m.value !== null || !s()) return;
        const N = () => {
          p(!1), m.value = null;
        }, {
          duration: W
        } = e;
        W === 0 ? N() : m.value = window.setTimeout(N, W);
      }
    }
    function x() {
      k();
    }
    function z(F) {
      var N;
      s() && (e.trigger === "click" && (g(), y(), p(!1)), (N = e.onClickoutside) === null || N === void 0 || N.call(e, F));
    }
    function $() {
      if (e.trigger === "click" && !a()) {
        g(), y();
        const F = !s();
        p(F);
      }
    }
    function M(F) {
      e.internalTrapFocus && F.key === "Escape" && (g(), y(), p(!1));
    }
    function V(F) {
      o.value = F;
    }
    function O() {
      var F;
      return (F = n.value) === null || F === void 0 ? void 0 : F.targetRef;
    }
    function E(F) {
      h = F;
    }
    return We("NPopover", {
      getTriggerElement: O,
      handleKeydown: M,
      handleMouseEnter: C,
      handleMouseLeave: k,
      handleClickOutside: z,
      handleMouseMoveOutside: x,
      setBodyInstance: E,
      positionManuallyRef: f,
      isMountedRef: t,
      zIndexRef: ae(e, "zIndex"),
      extraClassRef: ae(e, "internalExtraClass"),
      internalRenderBodyRef: ae(e, "internalRenderBody")
    }), Bt(() => {
      i.value && a() && p(!1);
    }), {
      binderInstRef: n,
      positionManually: f,
      mergedShowConsideringDisabledProp: l,
      // if to show popover body
      uncontrolledShow: o,
      mergedShowArrow: u,
      getMergedShow: s,
      setShow: V,
      handleClick: $,
      handleMouseEnter: C,
      handleMouseLeave: k,
      handleFocus: S,
      handleBlur: w,
      syncPosition: v
    };
  },
  render() {
    var e;
    const {
      positionManually: t,
      $slots: n
    } = this;
    let r, o = !1;
    if (!t && (r = Cu(n, "trigger"), r)) {
      r = fi(r), r = r.type === zd ? c("span", [r]) : r;
      const i = {
        onClick: this.handleClick,
        onMouseenter: this.handleMouseEnter,
        onMouseleave: this.handleMouseLeave,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      };
      if (!((e = r.type) === null || e === void 0) && e.__popover__)
        o = !0, r.props || (r.props = {
          internalSyncTargetWithParent: !0,
          internalInheritedEventHandlers: []
        }), r.props.internalSyncTargetWithParent = !0, r.props.internalInheritedEventHandlers ? r.props.internalInheritedEventHandlers = [i, ...r.props.internalInheritedEventHandlers] : r.props.internalInheritedEventHandlers = [i];
      else {
        const {
          internalInheritedEventHandlers: l
        } = this, a = [i, ...l], s = {
          onBlur: (d) => {
            a.forEach((u) => {
              u.onBlur(d);
            });
          },
          onFocus: (d) => {
            a.forEach((u) => {
              u.onFocus(d);
            });
          },
          onClick: (d) => {
            a.forEach((u) => {
              u.onClick(d);
            });
          },
          onMouseenter: (d) => {
            a.forEach((u) => {
              u.onMouseenter(d);
            });
          },
          onMouseleave: (d) => {
            a.forEach((u) => {
              u.onMouseleave(d);
            });
          }
        };
        Gh(r, l ? "nested" : t ? "manual" : this.trigger, s);
      }
    }
    return c(vi, {
      ref: "binderInstRef",
      syncTarget: !o,
      syncTargetWithParent: this.internalSyncTargetWithParent
    }, {
      default: () => {
        this.mergedShowConsideringDisabledProp;
        const i = this.getMergedShow();
        return [this.internalTrapFocus && i ? ln(c("div", {
          style: {
            position: "fixed",
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          }
        }), [[yi, {
          enabled: i,
          zIndex: this.zIndex
        }]]) : null, t ? null : c(xi, null, {
          default: () => r
        }), c(Kh, kn(this.$props, Uh, Object.assign(Object.assign({}, this.$attrs), {
          showArrow: this.mergedShowArrow,
          show: i
        })), {
          default: () => {
            var l, a;
            return (a = (l = this.$slots).default) === null || a === void 0 ? void 0 : a.call(l);
          },
          header: () => {
            var l, a;
            return (a = (l = this.$slots).header) === null || a === void 0 ? void 0 : a.call(l);
          },
          footer: () => {
            var l, a;
            return (a = (l = this.$slots).footer) === null || a === void 0 ? void 0 : a.call(l);
          }
        })];
      }
    });
  }
}), Yh = {
  closeIconSizeTiny: "12px",
  closeIconSizeSmall: "12px",
  closeIconSizeMedium: "14px",
  closeIconSizeLarge: "14px",
  closeSizeTiny: "16px",
  closeSizeSmall: "16px",
  closeSizeMedium: "18px",
  closeSizeLarge: "18px",
  padding: "0 7px",
  closeMargin: "0 0 0 4px"
};
function Zh(e) {
  const {
    textColor2: t,
    primaryColorHover: n,
    primaryColorPressed: r,
    primaryColor: o,
    infoColor: i,
    successColor: l,
    warningColor: a,
    errorColor: s,
    baseColor: d,
    borderColor: u,
    opacityDisabled: h,
    tagColor: b,
    closeIconColor: m,
    closeIconColorHover: f,
    closeIconColorPressed: p,
    borderRadiusSmall: v,
    fontSizeMini: g,
    fontSizeTiny: y,
    fontSizeSmall: S,
    fontSizeMedium: w,
    heightMini: C,
    heightTiny: k,
    heightSmall: x,
    heightMedium: z,
    closeColorHover: $,
    closeColorPressed: M,
    buttonColor2Hover: V,
    buttonColor2Pressed: O,
    fontWeightStrong: E
  } = e;
  return Object.assign(Object.assign({}, Yh), {
    closeBorderRadius: v,
    heightTiny: C,
    heightSmall: k,
    heightMedium: x,
    heightLarge: z,
    borderRadius: v,
    opacityDisabled: h,
    fontSizeTiny: g,
    fontSizeSmall: y,
    fontSizeMedium: S,
    fontSizeLarge: w,
    fontWeightStrong: E,
    // checked
    textColorCheckable: t,
    textColorHoverCheckable: t,
    textColorPressedCheckable: t,
    textColorChecked: d,
    colorCheckable: "#0000",
    colorHoverCheckable: V,
    colorPressedCheckable: O,
    colorChecked: o,
    colorCheckedHover: n,
    colorCheckedPressed: r,
    // default
    border: `1px solid ${u}`,
    textColor: t,
    color: b,
    colorBordered: "rgb(250, 250, 252)",
    closeIconColor: m,
    closeIconColorHover: f,
    closeIconColorPressed: p,
    closeColorHover: $,
    closeColorPressed: M,
    borderPrimary: `1px solid ${Oe(o, {
      alpha: 0.3
    })}`,
    textColorPrimary: o,
    colorPrimary: Oe(o, {
      alpha: 0.12
    }),
    colorBorderedPrimary: Oe(o, {
      alpha: 0.1
    }),
    closeIconColorPrimary: o,
    closeIconColorHoverPrimary: o,
    closeIconColorPressedPrimary: o,
    closeColorHoverPrimary: Oe(o, {
      alpha: 0.12
    }),
    closeColorPressedPrimary: Oe(o, {
      alpha: 0.18
    }),
    borderInfo: `1px solid ${Oe(i, {
      alpha: 0.3
    })}`,
    textColorInfo: i,
    colorInfo: Oe(i, {
      alpha: 0.12
    }),
    colorBorderedInfo: Oe(i, {
      alpha: 0.1
    }),
    closeIconColorInfo: i,
    closeIconColorHoverInfo: i,
    closeIconColorPressedInfo: i,
    closeColorHoverInfo: Oe(i, {
      alpha: 0.12
    }),
    closeColorPressedInfo: Oe(i, {
      alpha: 0.18
    }),
    borderSuccess: `1px solid ${Oe(l, {
      alpha: 0.3
    })}`,
    textColorSuccess: l,
    colorSuccess: Oe(l, {
      alpha: 0.12
    }),
    colorBorderedSuccess: Oe(l, {
      alpha: 0.1
    }),
    closeIconColorSuccess: l,
    closeIconColorHoverSuccess: l,
    closeIconColorPressedSuccess: l,
    closeColorHoverSuccess: Oe(l, {
      alpha: 0.12
    }),
    closeColorPressedSuccess: Oe(l, {
      alpha: 0.18
    }),
    borderWarning: `1px solid ${Oe(a, {
      alpha: 0.35
    })}`,
    textColorWarning: a,
    colorWarning: Oe(a, {
      alpha: 0.15
    }),
    colorBorderedWarning: Oe(a, {
      alpha: 0.12
    }),
    closeIconColorWarning: a,
    closeIconColorHoverWarning: a,
    closeIconColorPressedWarning: a,
    closeColorHoverWarning: Oe(a, {
      alpha: 0.12
    }),
    closeColorPressedWarning: Oe(a, {
      alpha: 0.18
    }),
    borderError: `1px solid ${Oe(s, {
      alpha: 0.23
    })}`,
    textColorError: s,
    colorError: Oe(s, {
      alpha: 0.1
    }),
    colorBorderedError: Oe(s, {
      alpha: 0.08
    }),
    closeIconColorError: s,
    closeIconColorHoverError: s,
    closeIconColorPressedError: s,
    closeColorHoverError: Oe(s, {
      alpha: 0.12
    }),
    closeColorPressedError: Oe(s, {
      alpha: 0.18
    })
  });
}
const Jh = {
  name: "Tag",
  common: rt,
  self: Zh
}, Qh = {
  color: Object,
  type: {
    type: String,
    default: "default"
  },
  round: Boolean,
  size: {
    type: String,
    default: "medium"
  },
  closable: Boolean,
  disabled: {
    type: Boolean,
    default: void 0
  }
}, ep = R("tag", `
 --n-close-margin: var(--n-close-margin-top) var(--n-close-margin-right) var(--n-close-margin-bottom) var(--n-close-margin-left);
 white-space: nowrap;
 position: relative;
 box-sizing: border-box;
 cursor: default;
 display: inline-flex;
 align-items: center;
 flex-wrap: nowrap;
 padding: var(--n-padding);
 border-radius: var(--n-border-radius);
 color: var(--n-text-color);
 background-color: var(--n-color);
 transition: 
 border-color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 opacity .3s var(--n-bezier);
 line-height: 1;
 height: var(--n-height);
 font-size: var(--n-font-size);
`, [_("strong", `
 font-weight: var(--n-font-weight-strong);
 `), A("border", `
 pointer-events: none;
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 border-radius: inherit;
 border: var(--n-border);
 transition: border-color .3s var(--n-bezier);
 `), A("icon", `
 display: flex;
 margin: 0 4px 0 0;
 color: var(--n-text-color);
 transition: color .3s var(--n-bezier);
 font-size: var(--n-avatar-size-override);
 `), A("avatar", `
 display: flex;
 margin: 0 6px 0 0;
 `), A("close", `
 margin: var(--n-close-margin);
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 `), _("round", `
 padding: 0 calc(var(--n-height) / 3);
 border-radius: calc(var(--n-height) / 2);
 `, [A("icon", `
 margin: 0 4px 0 calc((var(--n-height) - 8px) / -2);
 `), A("avatar", `
 margin: 0 6px 0 calc((var(--n-height) - 8px) / -2);
 `), _("closable", `
 padding: 0 calc(var(--n-height) / 4) 0 calc(var(--n-height) / 3);
 `)]), _("icon, avatar", [_("round", `
 padding: 0 calc(var(--n-height) / 3) 0 calc(var(--n-height) / 2);
 `)]), _("disabled", `
 cursor: not-allowed !important;
 opacity: var(--n-opacity-disabled);
 `), _("checkable", `
 cursor: pointer;
 box-shadow: none;
 color: var(--n-text-color-checkable);
 background-color: var(--n-color-checkable);
 `, [Je("disabled", [B("&:hover", "background-color: var(--n-color-hover-checkable);", [Je("checked", "color: var(--n-text-color-hover-checkable);")]), B("&:active", "background-color: var(--n-color-pressed-checkable);", [Je("checked", "color: var(--n-text-color-pressed-checkable);")])]), _("checked", `
 color: var(--n-text-color-checked);
 background-color: var(--n-color-checked);
 `, [Je("disabled", [B("&:hover", "background-color: var(--n-color-checked-hover);"), B("&:active", "background-color: var(--n-color-checked-pressed);")])])])]), tp = Object.assign(Object.assign(Object.assign({}, we.props), Qh), {
  bordered: {
    type: Boolean,
    default: void 0
  },
  checked: Boolean,
  checkable: Boolean,
  strong: Boolean,
  triggerClickOnClose: Boolean,
  onClose: [Array, Function],
  onMouseenter: Function,
  onMouseleave: Function,
  "onUpdate:checked": Function,
  onUpdateChecked: Function,
  // private
  internalCloseFocusable: {
    type: Boolean,
    default: !0
  },
  internalCloseIsButtonTag: {
    type: Boolean,
    default: !0
  },
  // deprecated
  onCheckedChange: Function
}), np = "n-tag", _o = ie({
  name: "Tag",
  props: tp,
  slots: Object,
  setup(e) {
    const t = L(null), {
      mergedBorderedRef: n,
      mergedClsPrefixRef: r,
      inlineThemeDisabled: o,
      mergedRtlRef: i
    } = _e(e), l = we("Tag", "-tag", ep, Jh, e, r);
    We(np, {
      roundRef: ae(e, "round")
    });
    function a() {
      if (!e.disabled && e.checkable) {
        const {
          checked: m,
          onCheckedChange: f,
          onUpdateChecked: p,
          "onUpdate:checked": v
        } = e;
        p && p(!m), v && v(!m), f && f(!m);
      }
    }
    function s(m) {
      if (e.triggerClickOnClose || m.stopPropagation(), !e.disabled) {
        const {
          onClose: f
        } = e;
        f && oe(f, m);
      }
    }
    const d = {
      setTextContent(m) {
        const {
          value: f
        } = t;
        f && (f.textContent = m);
      }
    }, u = $t("Tag", i, r), h = T(() => {
      const {
        type: m,
        size: f,
        color: {
          color: p,
          textColor: v
        } = {}
      } = e, {
        common: {
          cubicBezierEaseInOut: g
        },
        self: {
          padding: y,
          closeMargin: S,
          borderRadius: w,
          opacityDisabled: C,
          textColorCheckable: k,
          textColorHoverCheckable: x,
          textColorPressedCheckable: z,
          textColorChecked: $,
          colorCheckable: M,
          colorHoverCheckable: V,
          colorPressedCheckable: O,
          colorChecked: E,
          colorCheckedHover: I,
          colorCheckedPressed: F,
          closeBorderRadius: N,
          fontWeightStrong: W,
          [J("colorBordered", m)]: X,
          [J("closeSize", f)]: re,
          [J("closeIconSize", f)]: Q,
          [J("fontSize", f)]: G,
          [J("height", f)]: j,
          [J("color", m)]: q,
          [J("textColor", m)]: Z,
          [J("border", m)]: le,
          [J("closeIconColor", m)]: ue,
          [J("closeIconColorHover", m)]: be,
          [J("closeIconColorPressed", m)]: Re,
          [J("closeColorHover", m)]: K,
          [J("closeColorPressed", m)]: fe
        }
      } = l.value, Me = mt(S);
      return {
        "--n-font-weight-strong": W,
        "--n-avatar-size-override": `calc(${j} - 8px)`,
        "--n-bezier": g,
        "--n-border-radius": w,
        "--n-border": le,
        "--n-close-icon-size": Q,
        "--n-close-color-pressed": fe,
        "--n-close-color-hover": K,
        "--n-close-border-radius": N,
        "--n-close-icon-color": ue,
        "--n-close-icon-color-hover": be,
        "--n-close-icon-color-pressed": Re,
        "--n-close-icon-color-disabled": ue,
        "--n-close-margin-top": Me.top,
        "--n-close-margin-right": Me.right,
        "--n-close-margin-bottom": Me.bottom,
        "--n-close-margin-left": Me.left,
        "--n-close-size": re,
        "--n-color": p || (n.value ? X : q),
        "--n-color-checkable": M,
        "--n-color-checked": E,
        "--n-color-checked-hover": I,
        "--n-color-checked-pressed": F,
        "--n-color-hover-checkable": V,
        "--n-color-pressed-checkable": O,
        "--n-font-size": G,
        "--n-height": j,
        "--n-opacity-disabled": C,
        "--n-padding": y,
        "--n-text-color": v || Z,
        "--n-text-color-checkable": k,
        "--n-text-color-checked": $,
        "--n-text-color-hover-checkable": x,
        "--n-text-color-pressed-checkable": z
      };
    }), b = o ? it("tag", T(() => {
      let m = "";
      const {
        type: f,
        size: p,
        color: {
          color: v,
          textColor: g
        } = {}
      } = e;
      return m += f[0], m += p[0], v && (m += `a${Yr(v)}`), g && (m += `b${Yr(g)}`), n.value && (m += "c"), m;
    }), h, e) : void 0;
    return Object.assign(Object.assign({}, d), {
      rtlEnabled: u,
      mergedClsPrefix: r,
      contentRef: t,
      mergedBordered: n,
      handleClick: a,
      handleCloseClick: s,
      cssVars: o ? void 0 : h,
      themeClass: b == null ? void 0 : b.themeClass,
      onRender: b == null ? void 0 : b.onRender
    });
  },
  render() {
    var e, t;
    const {
      mergedClsPrefix: n,
      rtlEnabled: r,
      closable: o,
      color: {
        borderColor: i
      } = {},
      round: l,
      onRender: a,
      $slots: s
    } = this;
    a == null || a();
    const d = Ze(s.avatar, (h) => h && c("div", {
      class: `${n}-tag__avatar`
    }, h)), u = Ze(s.icon, (h) => h && c("div", {
      class: `${n}-tag__icon`
    }, h));
    return c("div", {
      class: [`${n}-tag`, this.themeClass, {
        [`${n}-tag--rtl`]: r,
        [`${n}-tag--strong`]: this.strong,
        [`${n}-tag--disabled`]: this.disabled,
        [`${n}-tag--checkable`]: this.checkable,
        [`${n}-tag--checked`]: this.checkable && this.checked,
        [`${n}-tag--round`]: l,
        [`${n}-tag--avatar`]: d,
        [`${n}-tag--icon`]: u,
        [`${n}-tag--closable`]: o
      }],
      style: this.cssVars,
      onClick: this.handleClick,
      onMouseenter: this.onMouseenter,
      onMouseleave: this.onMouseleave
    }, u || d, c("span", {
      class: `${n}-tag__content`,
      ref: "contentRef"
    }, (t = (e = this.$slots).default) === null || t === void 0 ? void 0 : t.call(e)), !this.checkable && o ? c(Rr, {
      clsPrefix: n,
      class: `${n}-tag__close`,
      disabled: this.disabled,
      onClick: this.handleCloseClick,
      focusable: this.internalCloseFocusable,
      round: l,
      isButtonTag: this.internalCloseIsButtonTag,
      absolute: !0
    }) : null, !this.checkable && this.mergedBordered ? c("div", {
      class: `${n}-tag__border`,
      style: {
        borderColor: i
      }
    }) : null);
  }
}), bs = ie({
  name: "InternalSelectionSuffix",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    showArrow: {
      type: Boolean,
      default: void 0
    },
    showClear: {
      type: Boolean,
      default: void 0
    },
    loading: {
      type: Boolean,
      default: !1
    },
    onClear: Function
  },
  setup(e, {
    slots: t
  }) {
    return () => {
      const {
        clsPrefix: n
      } = e;
      return c(Yn, {
        clsPrefix: n,
        class: `${n}-base-suffix`,
        strokeWidth: 24,
        scale: 0.85,
        show: e.loading
      }, {
        default: () => e.showArrow ? c(Qo, {
          clsPrefix: n,
          show: e.showClear,
          onClear: e.onClear
        }, {
          placeholder: () => c(ct, {
            clsPrefix: n,
            class: `${n}-base-suffix__arrow`
          }, {
            default: () => Et(t.default, () => [c(es, null)])
          })
        }) : null
      });
    };
  }
}), rp = {
  paddingSingle: "0 26px 0 12px",
  paddingMultiple: "3px 26px 0 12px",
  clearSize: "16px",
  arrowSize: "16px"
};
function op(e) {
  const {
    borderRadius: t,
    textColor2: n,
    textColorDisabled: r,
    inputColor: o,
    inputColorDisabled: i,
    primaryColor: l,
    primaryColorHover: a,
    warningColor: s,
    warningColorHover: d,
    errorColor: u,
    errorColorHover: h,
    borderColor: b,
    iconColor: m,
    iconColorDisabled: f,
    clearColor: p,
    clearColorHover: v,
    clearColorPressed: g,
    placeholderColor: y,
    placeholderColorDisabled: S,
    fontSizeTiny: w,
    fontSizeSmall: C,
    fontSizeMedium: k,
    fontSizeLarge: x,
    heightTiny: z,
    heightSmall: $,
    heightMedium: M,
    heightLarge: V,
    fontWeight: O
  } = e;
  return Object.assign(Object.assign({}, rp), {
    fontSizeTiny: w,
    fontSizeSmall: C,
    fontSizeMedium: k,
    fontSizeLarge: x,
    heightTiny: z,
    heightSmall: $,
    heightMedium: M,
    heightLarge: V,
    borderRadius: t,
    fontWeight: O,
    // default
    textColor: n,
    textColorDisabled: r,
    placeholderColor: y,
    placeholderColorDisabled: S,
    color: o,
    colorDisabled: i,
    colorActive: o,
    border: `1px solid ${b}`,
    borderHover: `1px solid ${a}`,
    borderActive: `1px solid ${l}`,
    borderFocus: `1px solid ${a}`,
    boxShadowHover: "none",
    boxShadowActive: `0 0 0 2px ${Oe(l, {
      alpha: 0.2
    })}`,
    boxShadowFocus: `0 0 0 2px ${Oe(l, {
      alpha: 0.2
    })}`,
    caretColor: l,
    arrowColor: m,
    arrowColorDisabled: f,
    loadingColor: l,
    // warning
    borderWarning: `1px solid ${s}`,
    borderHoverWarning: `1px solid ${d}`,
    borderActiveWarning: `1px solid ${s}`,
    borderFocusWarning: `1px solid ${d}`,
    boxShadowHoverWarning: "none",
    boxShadowActiveWarning: `0 0 0 2px ${Oe(s, {
      alpha: 0.2
    })}`,
    boxShadowFocusWarning: `0 0 0 2px ${Oe(s, {
      alpha: 0.2
    })}`,
    colorActiveWarning: o,
    caretColorWarning: s,
    // error
    borderError: `1px solid ${u}`,
    borderHoverError: `1px solid ${h}`,
    borderActiveError: `1px solid ${u}`,
    borderFocusError: `1px solid ${h}`,
    boxShadowHoverError: "none",
    boxShadowActiveError: `0 0 0 2px ${Oe(u, {
      alpha: 0.2
    })}`,
    boxShadowFocusError: `0 0 0 2px ${Oe(u, {
      alpha: 0.2
    })}`,
    colorActiveError: o,
    caretColorError: u,
    clearColor: p,
    clearColorHover: v,
    clearColorPressed: g
  });
}
const gs = {
  name: "InternalSelection",
  common: rt,
  peers: {
    Popover: Fn
  },
  self: op
}, ip = B([R("base-selection", `
 --n-padding-single: var(--n-padding-single-top) var(--n-padding-single-right) var(--n-padding-single-bottom) var(--n-padding-single-left);
 --n-padding-multiple: var(--n-padding-multiple-top) var(--n-padding-multiple-right) var(--n-padding-multiple-bottom) var(--n-padding-multiple-left);
 position: relative;
 z-index: auto;
 box-shadow: none;
 width: 100%;
 max-width: 100%;
 display: inline-block;
 vertical-align: bottom;
 border-radius: var(--n-border-radius);
 min-height: var(--n-height);
 line-height: 1.5;
 font-size: var(--n-font-size);
 `, [R("base-loading", `
 color: var(--n-loading-color);
 `), R("base-selection-tags", "min-height: var(--n-height);"), A("border, state-border", `
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 pointer-events: none;
 border: var(--n-border);
 border-radius: inherit;
 transition:
 box-shadow .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 `), A("state-border", `
 z-index: 1;
 border-color: #0000;
 `), R("base-suffix", `
 cursor: pointer;
 position: absolute;
 top: 50%;
 transform: translateY(-50%);
 right: 10px;
 `, [A("arrow", `
 font-size: var(--n-arrow-size);
 color: var(--n-arrow-color);
 transition: color .3s var(--n-bezier);
 `)]), R("base-selection-overlay", `
 display: flex;
 align-items: center;
 white-space: nowrap;
 pointer-events: none;
 position: absolute;
 top: 0;
 right: 0;
 bottom: 0;
 left: 0;
 padding: var(--n-padding-single);
 transition: color .3s var(--n-bezier);
 `, [A("wrapper", `
 flex-basis: 0;
 flex-grow: 1;
 overflow: hidden;
 text-overflow: ellipsis;
 `)]), R("base-selection-placeholder", `
 color: var(--n-placeholder-color);
 `, [A("inner", `
 max-width: 100%;
 overflow: hidden;
 `)]), R("base-selection-tags", `
 cursor: pointer;
 outline: none;
 box-sizing: border-box;
 position: relative;
 z-index: auto;
 display: flex;
 padding: var(--n-padding-multiple);
 flex-wrap: wrap;
 align-items: center;
 width: 100%;
 vertical-align: bottom;
 background-color: var(--n-color);
 border-radius: inherit;
 transition:
 color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier);
 `), R("base-selection-label", `
 height: var(--n-height);
 display: inline-flex;
 width: 100%;
 vertical-align: bottom;
 cursor: pointer;
 outline: none;
 z-index: auto;
 box-sizing: border-box;
 position: relative;
 transition:
 color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier);
 border-radius: inherit;
 background-color: var(--n-color);
 align-items: center;
 `, [R("base-selection-input", `
 font-size: inherit;
 line-height: inherit;
 outline: none;
 cursor: pointer;
 box-sizing: border-box;
 border:none;
 width: 100%;
 padding: var(--n-padding-single);
 background-color: #0000;
 color: var(--n-text-color);
 transition: color .3s var(--n-bezier);
 caret-color: var(--n-caret-color);
 `, [A("content", `
 text-overflow: ellipsis;
 overflow: hidden;
 white-space: nowrap; 
 `)]), A("render-label", `
 color: var(--n-text-color);
 `)]), Je("disabled", [B("&:hover", [A("state-border", `
 box-shadow: var(--n-box-shadow-hover);
 border: var(--n-border-hover);
 `)]), _("focus", [A("state-border", `
 box-shadow: var(--n-box-shadow-focus);
 border: var(--n-border-focus);
 `)]), _("active", [A("state-border", `
 box-shadow: var(--n-box-shadow-active);
 border: var(--n-border-active);
 `), R("base-selection-label", "background-color: var(--n-color-active);"), R("base-selection-tags", "background-color: var(--n-color-active);")])]), _("disabled", "cursor: not-allowed;", [A("arrow", `
 color: var(--n-arrow-color-disabled);
 `), R("base-selection-label", `
 cursor: not-allowed;
 background-color: var(--n-color-disabled);
 `, [R("base-selection-input", `
 cursor: not-allowed;
 color: var(--n-text-color-disabled);
 `), A("render-label", `
 color: var(--n-text-color-disabled);
 `)]), R("base-selection-tags", `
 cursor: not-allowed;
 background-color: var(--n-color-disabled);
 `), R("base-selection-placeholder", `
 cursor: not-allowed;
 color: var(--n-placeholder-color-disabled);
 `)]), R("base-selection-input-tag", `
 height: calc(var(--n-height) - 6px);
 line-height: calc(var(--n-height) - 6px);
 outline: none;
 display: none;
 position: relative;
 margin-bottom: 3px;
 max-width: 100%;
 vertical-align: bottom;
 `, [A("input", `
 font-size: inherit;
 font-family: inherit;
 min-width: 1px;
 padding: 0;
 background-color: #0000;
 outline: none;
 border: none;
 max-width: 100%;
 overflow: hidden;
 width: 1em;
 line-height: inherit;
 cursor: pointer;
 color: var(--n-text-color);
 caret-color: var(--n-caret-color);
 `), A("mirror", `
 position: absolute;
 left: 0;
 top: 0;
 white-space: pre;
 visibility: hidden;
 user-select: none;
 -webkit-user-select: none;
 opacity: 0;
 `)]), ["warning", "error"].map((e) => _(`${e}-status`, [A("state-border", `border: var(--n-border-${e});`), Je("disabled", [B("&:hover", [A("state-border", `
 box-shadow: var(--n-box-shadow-hover-${e});
 border: var(--n-border-hover-${e});
 `)]), _("active", [A("state-border", `
 box-shadow: var(--n-box-shadow-active-${e});
 border: var(--n-border-active-${e});
 `), R("base-selection-label", `background-color: var(--n-color-active-${e});`), R("base-selection-tags", `background-color: var(--n-color-active-${e});`)]), _("focus", [A("state-border", `
 box-shadow: var(--n-box-shadow-focus-${e});
 border: var(--n-border-focus-${e});
 `)])])]))]), R("base-selection-popover", `
 margin-bottom: -3px;
 display: flex;
 flex-wrap: wrap;
 margin-right: -8px;
 `), R("base-selection-tag-wrapper", `
 max-width: 100%;
 display: inline-flex;
 padding: 0 7px 3px 0;
 `, [B("&:last-child", "padding-right: 0;"), R("tag", `
 font-size: 14px;
 max-width: 100%;
 `, [A("content", `
 line-height: 1.25;
 text-overflow: ellipsis;
 overflow: hidden;
 `)])])]), ap = ie({
  name: "InternalSelection",
  props: Object.assign(Object.assign({}, we.props), {
    clsPrefix: {
      type: String,
      required: !0
    },
    bordered: {
      type: Boolean,
      default: void 0
    },
    active: Boolean,
    pattern: {
      type: String,
      default: ""
    },
    placeholder: String,
    selectedOption: {
      type: Object,
      default: null
    },
    selectedOptions: {
      type: Array,
      default: null
    },
    labelField: {
      type: String,
      default: "label"
    },
    valueField: {
      type: String,
      default: "value"
    },
    multiple: Boolean,
    filterable: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    size: {
      type: String,
      default: "medium"
    },
    loading: Boolean,
    autofocus: Boolean,
    showArrow: {
      type: Boolean,
      default: !0
    },
    inputProps: Object,
    focused: Boolean,
    renderTag: Function,
    onKeydown: Function,
    onClick: Function,
    onBlur: Function,
    onFocus: Function,
    onDeleteOption: Function,
    maxTagCount: [String, Number],
    ellipsisTagPopoverProps: Object,
    onClear: Function,
    onPatternInput: Function,
    onPatternFocus: Function,
    onPatternBlur: Function,
    renderLabel: Function,
    status: String,
    inlineThemeDisabled: Boolean,
    ignoreComposition: {
      type: Boolean,
      default: !0
    },
    onResize: Function
  }),
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedRtlRef: n
    } = _e(e), r = $t("InternalSelection", n, t), o = L(null), i = L(null), l = L(null), a = L(null), s = L(null), d = L(null), u = L(null), h = L(null), b = L(null), m = L(null), f = L(!1), p = L(!1), v = L(!1), g = we("InternalSelection", "-internal-selection", ip, gs, e, ae(e, "clsPrefix")), y = T(() => e.clearable && !e.disabled && (v.value || e.active)), S = T(() => e.selectedOption ? e.renderTag ? e.renderTag({
      option: e.selectedOption,
      handleClose: () => {
      }
    }) : e.renderLabel ? e.renderLabel(e.selectedOption, !0) : gt(e.selectedOption[e.labelField], e.selectedOption, !0) : e.placeholder), w = T(() => {
      const te = e.selectedOption;
      if (te)
        return te[e.labelField];
    }), C = T(() => e.multiple ? !!(Array.isArray(e.selectedOptions) && e.selectedOptions.length) : e.selectedOption !== null);
    function k() {
      var te;
      const {
        value: ce
      } = o;
      if (ce) {
        const {
          value: ze
        } = i;
        ze && (ze.style.width = `${ce.offsetWidth}px`, e.maxTagCount !== "responsive" && ((te = b.value) === null || te === void 0 || te.sync({
          showAllItemsBeforeCalculate: !1
        })));
      }
    }
    function x() {
      const {
        value: te
      } = m;
      te && (te.style.display = "none");
    }
    function z() {
      const {
        value: te
      } = m;
      te && (te.style.display = "inline-block");
    }
    je(ae(e, "active"), (te) => {
      te || x();
    }), je(ae(e, "pattern"), () => {
      e.multiple && Tt(k);
    });
    function $(te) {
      const {
        onFocus: ce
      } = e;
      ce && ce(te);
    }
    function M(te) {
      const {
        onBlur: ce
      } = e;
      ce && ce(te);
    }
    function V(te) {
      const {
        onDeleteOption: ce
      } = e;
      ce && ce(te);
    }
    function O(te) {
      const {
        onClear: ce
      } = e;
      ce && ce(te);
    }
    function E(te) {
      const {
        onPatternInput: ce
      } = e;
      ce && ce(te);
    }
    function I(te) {
      var ce;
      (!te.relatedTarget || !(!((ce = l.value) === null || ce === void 0) && ce.contains(te.relatedTarget))) && $(te);
    }
    function F(te) {
      var ce;
      !((ce = l.value) === null || ce === void 0) && ce.contains(te.relatedTarget) || M(te);
    }
    function N(te) {
      O(te);
    }
    function W() {
      v.value = !0;
    }
    function X() {
      v.value = !1;
    }
    function re(te) {
      !e.active || !e.filterable || te.target !== i.value && te.preventDefault();
    }
    function Q(te) {
      V(te);
    }
    const G = L(!1);
    function j(te) {
      if (te.key === "Backspace" && !G.value && !e.pattern.length) {
        const {
          selectedOptions: ce
        } = e;
        ce != null && ce.length && Q(ce[ce.length - 1]);
      }
    }
    let q = null;
    function Z(te) {
      const {
        value: ce
      } = o;
      if (ce) {
        const ze = te.target.value;
        ce.textContent = ze, k();
      }
      e.ignoreComposition && G.value ? q = te : E(te);
    }
    function le() {
      G.value = !0;
    }
    function ue() {
      G.value = !1, e.ignoreComposition && E(q), q = null;
    }
    function be(te) {
      var ce;
      p.value = !0, (ce = e.onPatternFocus) === null || ce === void 0 || ce.call(e, te);
    }
    function Re(te) {
      var ce;
      p.value = !1, (ce = e.onPatternBlur) === null || ce === void 0 || ce.call(e, te);
    }
    function K() {
      var te, ce;
      if (e.filterable)
        p.value = !1, (te = d.value) === null || te === void 0 || te.blur(), (ce = i.value) === null || ce === void 0 || ce.blur();
      else if (e.multiple) {
        const {
          value: ze
        } = a;
        ze == null || ze.blur();
      } else {
        const {
          value: ze
        } = s;
        ze == null || ze.blur();
      }
    }
    function fe() {
      var te, ce, ze;
      e.filterable ? (p.value = !1, (te = d.value) === null || te === void 0 || te.focus()) : e.multiple ? (ce = a.value) === null || ce === void 0 || ce.focus() : (ze = s.value) === null || ze === void 0 || ze.focus();
    }
    function Me() {
      const {
        value: te
      } = i;
      te && (z(), te.focus());
    }
    function ye() {
      const {
        value: te
      } = i;
      te && te.blur();
    }
    function Fe(te) {
      const {
        value: ce
      } = u;
      ce && ce.setTextContent(`+${te}`);
    }
    function Te() {
      const {
        value: te
      } = h;
      return te;
    }
    function Qe() {
      return i.value;
    }
    let qe = null;
    function tt() {
      qe !== null && window.clearTimeout(qe);
    }
    function et() {
      e.active || (tt(), qe = window.setTimeout(() => {
        C.value && (f.value = !0);
      }, 100));
    }
    function me() {
      tt();
    }
    function U(te) {
      te || (tt(), f.value = !1);
    }
    je(C, (te) => {
      te || (f.value = !1);
    }), vt(() => {
      Bt(() => {
        const te = d.value;
        te && (e.disabled ? te.removeAttribute("tabindex") : te.tabIndex = p.value ? -1 : 0);
      });
    }), ql(l, e.onResize);
    const {
      inlineThemeDisabled: Y
    } = e, de = T(() => {
      const {
        size: te
      } = e, {
        common: {
          cubicBezierEaseInOut: ce
        },
        self: {
          fontWeight: ze,
          borderRadius: Ne,
          color: st,
          placeholderColor: ft,
          textColor: at,
          paddingSingle: Xe,
          paddingMultiple: dt,
          caretColor: Ge,
          colorDisabled: pe,
          textColorDisabled: Pe,
          placeholderColorDisabled: P,
          colorActive: D,
          boxShadowFocus: ee,
          boxShadowActive: se,
          boxShadowHover: he,
          border: ge,
          borderFocus: ve,
          borderHover: Se,
          borderActive: Ee,
          arrowColor: Ye,
          arrowColorDisabled: Le,
          loadingColor: bt,
          // form warning
          colorActiveWarning: xt,
          boxShadowFocusWarning: yt,
          boxShadowActiveWarning: Ct,
          boxShadowHoverWarning: St,
          borderWarning: Mt,
          borderFocusWarning: Ft,
          borderHoverWarning: H,
          borderActiveWarning: ne,
          // form error
          colorActiveError: Ce,
          boxShadowFocusError: Be,
          boxShadowActiveError: Ve,
          boxShadowHoverError: Ae,
          borderError: nt,
          borderFocusError: lt,
          borderHoverError: It,
          borderActiveError: en,
          // clear
          clearColor: tn,
          clearColorHover: bn,
          clearColorPressed: Qn,
          clearSize: er,
          // arrow
          arrowSize: tr,
          [J("height", te)]: nr,
          [J("fontSize", te)]: rr
        }
      } = g.value, sn = mt(Xe), dn = mt(dt);
      return {
        "--n-bezier": ce,
        "--n-border": ge,
        "--n-border-active": Ee,
        "--n-border-focus": ve,
        "--n-border-hover": Se,
        "--n-border-radius": Ne,
        "--n-box-shadow-active": se,
        "--n-box-shadow-focus": ee,
        "--n-box-shadow-hover": he,
        "--n-caret-color": Ge,
        "--n-color": st,
        "--n-color-active": D,
        "--n-color-disabled": pe,
        "--n-font-size": rr,
        "--n-height": nr,
        "--n-padding-single-top": sn.top,
        "--n-padding-multiple-top": dn.top,
        "--n-padding-single-right": sn.right,
        "--n-padding-multiple-right": dn.right,
        "--n-padding-single-left": sn.left,
        "--n-padding-multiple-left": dn.left,
        "--n-padding-single-bottom": sn.bottom,
        "--n-padding-multiple-bottom": dn.bottom,
        "--n-placeholder-color": ft,
        "--n-placeholder-color-disabled": P,
        "--n-text-color": at,
        "--n-text-color-disabled": Pe,
        "--n-arrow-color": Ye,
        "--n-arrow-color-disabled": Le,
        "--n-loading-color": bt,
        // form warning
        "--n-color-active-warning": xt,
        "--n-box-shadow-focus-warning": yt,
        "--n-box-shadow-active-warning": Ct,
        "--n-box-shadow-hover-warning": St,
        "--n-border-warning": Mt,
        "--n-border-focus-warning": Ft,
        "--n-border-hover-warning": H,
        "--n-border-active-warning": ne,
        // form error
        "--n-color-active-error": Ce,
        "--n-box-shadow-focus-error": Be,
        "--n-box-shadow-active-error": Ve,
        "--n-box-shadow-hover-error": Ae,
        "--n-border-error": nt,
        "--n-border-focus-error": lt,
        "--n-border-hover-error": It,
        "--n-border-active-error": en,
        // clear
        "--n-clear-size": er,
        "--n-clear-color": tn,
        "--n-clear-color-hover": bn,
        "--n-clear-color-pressed": Qn,
        // arrow-size
        "--n-arrow-size": tr,
        // font-weight
        "--n-font-weight": ze
      };
    }), xe = Y ? it("internal-selection", T(() => e.size[0]), de, e) : void 0;
    return {
      mergedTheme: g,
      mergedClearable: y,
      mergedClsPrefix: t,
      rtlEnabled: r,
      patternInputFocused: p,
      filterablePlaceholder: S,
      label: w,
      selected: C,
      showTagsPanel: f,
      isComposing: G,
      // dom ref
      counterRef: u,
      counterWrapperRef: h,
      patternInputMirrorRef: o,
      patternInputRef: i,
      selfRef: l,
      multipleElRef: a,
      singleElRef: s,
      patternInputWrapperRef: d,
      overflowRef: b,
      inputTagElRef: m,
      handleMouseDown: re,
      handleFocusin: I,
      handleClear: N,
      handleMouseEnter: W,
      handleMouseLeave: X,
      handleDeleteOption: Q,
      handlePatternKeyDown: j,
      handlePatternInputInput: Z,
      handlePatternInputBlur: Re,
      handlePatternInputFocus: be,
      handleMouseEnterCounter: et,
      handleMouseLeaveCounter: me,
      handleFocusout: F,
      handleCompositionEnd: ue,
      handleCompositionStart: le,
      onPopoverUpdateShow: U,
      focus: fe,
      focusInput: Me,
      blur: K,
      blurInput: ye,
      updateCounter: Fe,
      getCounter: Te,
      getTail: Qe,
      renderLabel: e.renderLabel,
      cssVars: Y ? void 0 : de,
      themeClass: xe == null ? void 0 : xe.themeClass,
      onRender: xe == null ? void 0 : xe.onRender
    };
  },
  render() {
    const {
      status: e,
      multiple: t,
      size: n,
      disabled: r,
      filterable: o,
      maxTagCount: i,
      bordered: l,
      clsPrefix: a,
      ellipsisTagPopoverProps: s,
      onRender: d,
      renderTag: u,
      renderLabel: h
    } = this;
    d == null || d();
    const b = i === "responsive", m = typeof i == "number", f = b || m, p = c(Yo, null, {
      default: () => c(bs, {
        clsPrefix: a,
        loading: this.loading,
        showArrow: this.showArrow,
        showClear: this.mergedClearable && this.selected,
        onClear: this.handleClear
      }, {
        default: () => {
          var g, y;
          return (y = (g = this.$slots).arrow) === null || y === void 0 ? void 0 : y.call(g);
        }
      })
    });
    let v;
    if (t) {
      const {
        labelField: g
      } = this, y = (E) => c("div", {
        class: `${a}-base-selection-tag-wrapper`,
        key: E.value
      }, u ? u({
        option: E,
        handleClose: () => {
          this.handleDeleteOption(E);
        }
      }) : c(_o, {
        size: n,
        closable: !E.disabled,
        disabled: r,
        onClose: () => {
          this.handleDeleteOption(E);
        },
        internalCloseIsButtonTag: !1,
        internalCloseFocusable: !1
      }, {
        default: () => h ? h(E, !0) : gt(E[g], E, !0)
      })), S = () => (m ? this.selectedOptions.slice(0, i) : this.selectedOptions).map(y), w = o ? c("div", {
        class: `${a}-base-selection-input-tag`,
        ref: "inputTagElRef",
        key: "__input-tag__"
      }, c("input", Object.assign({}, this.inputProps, {
        ref: "patternInputRef",
        tabindex: -1,
        disabled: r,
        value: this.pattern,
        autofocus: this.autofocus,
        class: `${a}-base-selection-input-tag__input`,
        onBlur: this.handlePatternInputBlur,
        onFocus: this.handlePatternInputFocus,
        onKeydown: this.handlePatternKeyDown,
        onInput: this.handlePatternInputInput,
        onCompositionstart: this.handleCompositionStart,
        onCompositionend: this.handleCompositionEnd
      })), c("span", {
        ref: "patternInputMirrorRef",
        class: `${a}-base-selection-input-tag__mirror`
      }, this.pattern)) : null, C = b ? () => c("div", {
        class: `${a}-base-selection-tag-wrapper`,
        ref: "counterWrapperRef"
      }, c(_o, {
        size: n,
        ref: "counterRef",
        onMouseenter: this.handleMouseEnterCounter,
        onMouseleave: this.handleMouseLeaveCounter,
        disabled: r
      })) : void 0;
      let k;
      if (m) {
        const E = this.selectedOptions.length - i;
        E > 0 && (k = c("div", {
          class: `${a}-base-selection-tag-wrapper`,
          key: "__counter__"
        }, c(_o, {
          size: n,
          ref: "counterRef",
          onMouseenter: this.handleMouseEnterCounter,
          disabled: r
        }, {
          default: () => `+${E}`
        })));
      }
      const x = b ? o ? c(ya, {
        ref: "overflowRef",
        updateCounter: this.updateCounter,
        getCounter: this.getCounter,
        getTail: this.getTail,
        style: {
          width: "100%",
          display: "flex",
          overflow: "hidden"
        }
      }, {
        default: S,
        counter: C,
        tail: () => w
      }) : c(ya, {
        ref: "overflowRef",
        updateCounter: this.updateCounter,
        getCounter: this.getCounter,
        style: {
          width: "100%",
          display: "flex",
          overflow: "hidden"
        }
      }, {
        default: S,
        counter: C
      }) : m && k ? S().concat(k) : S(), z = f ? () => c("div", {
        class: `${a}-base-selection-popover`
      }, b ? S() : this.selectedOptions.map(y)) : void 0, $ = f ? Object.assign({
        show: this.showTagsPanel,
        trigger: "hover",
        overlap: !0,
        placement: "top",
        width: "trigger",
        onUpdateShow: this.onPopoverUpdateShow,
        theme: this.mergedTheme.peers.Popover,
        themeOverrides: this.mergedTheme.peerOverrides.Popover
      }, s) : null, V = (this.selected ? !1 : this.active ? !this.pattern && !this.isComposing : !0) ? c("div", {
        class: `${a}-base-selection-placeholder ${a}-base-selection-overlay`
      }, c("div", {
        class: `${a}-base-selection-placeholder__inner`
      }, this.placeholder)) : null, O = o ? c("div", {
        ref: "patternInputWrapperRef",
        class: `${a}-base-selection-tags`
      }, x, b ? null : w, p) : c("div", {
        ref: "multipleElRef",
        class: `${a}-base-selection-tags`,
        tabindex: r ? void 0 : 0
      }, x, p);
      v = c(Pt, null, f ? c(Jn, Object.assign({}, $, {
        scrollable: !0,
        style: "max-height: calc(var(--v-target-height) * 6.6);"
      }), {
        trigger: () => O,
        default: z
      }) : O, V);
    } else if (o) {
      const g = this.pattern || this.isComposing, y = this.active ? !g : !this.selected, S = this.active ? !1 : this.selected;
      v = c("div", {
        ref: "patternInputWrapperRef",
        class: `${a}-base-selection-label`,
        title: this.patternInputFocused ? void 0 : Sa(this.label)
      }, c("input", Object.assign({}, this.inputProps, {
        ref: "patternInputRef",
        class: `${a}-base-selection-input`,
        value: this.active ? this.pattern : "",
        placeholder: "",
        readonly: r,
        disabled: r,
        tabindex: -1,
        autofocus: this.autofocus,
        onFocus: this.handlePatternInputFocus,
        onBlur: this.handlePatternInputBlur,
        onInput: this.handlePatternInputInput,
        onCompositionstart: this.handleCompositionStart,
        onCompositionend: this.handleCompositionEnd
      })), S ? c("div", {
        class: `${a}-base-selection-label__render-label ${a}-base-selection-overlay`,
        key: "input"
      }, c("div", {
        class: `${a}-base-selection-overlay__wrapper`
      }, u ? u({
        option: this.selectedOption,
        handleClose: () => {
        }
      }) : h ? h(this.selectedOption, !0) : gt(this.label, this.selectedOption, !0))) : null, y ? c("div", {
        class: `${a}-base-selection-placeholder ${a}-base-selection-overlay`,
        key: "placeholder"
      }, c("div", {
        class: `${a}-base-selection-overlay__wrapper`
      }, this.filterablePlaceholder)) : null, p);
    } else
      v = c("div", {
        ref: "singleElRef",
        class: `${a}-base-selection-label`,
        tabindex: this.disabled ? void 0 : 0
      }, this.label !== void 0 ? c("div", {
        class: `${a}-base-selection-input`,
        title: Sa(this.label),
        key: "input"
      }, c("div", {
        class: `${a}-base-selection-input__content`
      }, u ? u({
        option: this.selectedOption,
        handleClose: () => {
        }
      }) : h ? h(this.selectedOption, !0) : gt(this.label, this.selectedOption, !0))) : c("div", {
        class: `${a}-base-selection-placeholder ${a}-base-selection-overlay`,
        key: "placeholder"
      }, c("div", {
        class: `${a}-base-selection-placeholder__inner`
      }, this.placeholder)), p);
    return c("div", {
      ref: "selfRef",
      class: [`${a}-base-selection`, this.rtlEnabled && `${a}-base-selection--rtl`, this.themeClass, e && `${a}-base-selection--${e}-status`, {
        [`${a}-base-selection--active`]: this.active,
        [`${a}-base-selection--selected`]: this.selected || this.active && this.pattern,
        [`${a}-base-selection--disabled`]: this.disabled,
        [`${a}-base-selection--multiple`]: this.multiple,
        // focus is not controlled by selection itself since it always need
        // to be managed together with menu. provide :focus style will cause
        // many redundant codes.
        [`${a}-base-selection--focus`]: this.focused
      }],
      style: this.cssVars,
      onClick: this.onClick,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave,
      onKeydown: this.onKeydown,
      onFocusin: this.handleFocusin,
      onFocusout: this.handleFocusout,
      onMousedown: this.handleMouseDown
    }, v, l ? c("div", {
      class: `${a}-base-selection__border`
    }) : null, l ? c("div", {
      class: `${a}-base-selection__state-border`
    }) : null);
  }
}), {
  cubicBezierEaseInOut: un
} = pn;
function lp({
  duration: e = ".2s",
  delay: t = ".1s"
} = {}) {
  return [B("&.fade-in-width-expand-transition-leave-from, &.fade-in-width-expand-transition-enter-to", {
    opacity: 1
  }), B("&.fade-in-width-expand-transition-leave-to, &.fade-in-width-expand-transition-enter-from", `
 opacity: 0!important;
 margin-left: 0!important;
 margin-right: 0!important;
 `), B("&.fade-in-width-expand-transition-leave-active", `
 overflow: hidden;
 transition:
 opacity ${e} ${un},
 max-width ${e} ${un} ${t},
 margin-left ${e} ${un} ${t},
 margin-right ${e} ${un} ${t};
 `), B("&.fade-in-width-expand-transition-enter-active", `
 overflow: hidden;
 transition:
 opacity ${e} ${un} ${t},
 max-width ${e} ${un},
 margin-left ${e} ${un},
 margin-right ${e} ${un};
 `)];
}
const sp = R("base-wave", `
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 border-radius: inherit;
`), dp = ie({
  name: "BaseWave",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    }
  },
  setup(e) {
    Mn("-base-wave", sp, ae(e, "clsPrefix"));
    const t = L(null), n = L(!1);
    let r = null;
    return ut(() => {
      r !== null && window.clearTimeout(r);
    }), {
      active: n,
      selfRef: t,
      play() {
        r !== null && (window.clearTimeout(r), n.value = !1, r = null), Tt(() => {
          var o;
          (o = t.value) === null || o === void 0 || o.offsetHeight, n.value = !0, r = window.setTimeout(() => {
            n.value = !1, r = null;
          }, 1e3);
        });
      }
    };
  },
  render() {
    const {
      clsPrefix: e
    } = this;
    return c("div", {
      ref: "selfRef",
      "aria-hidden": !0,
      class: [`${e}-base-wave`, this.active && `${e}-base-wave--active`]
    });
  }
}), {
  cubicBezierEaseInOut: Xt,
  cubicBezierEaseOut: cp,
  cubicBezierEaseIn: up
} = pn;
function fp({
  overflow: e = "hidden",
  duration: t = ".3s",
  originalTransition: n = "",
  leavingDelay: r = "0s",
  foldPadding: o = !1,
  enterToProps: i = void 0,
  leaveToProps: l = void 0,
  reverse: a = !1
} = {}) {
  const s = a ? "leave" : "enter", d = a ? "enter" : "leave";
  return [B(`&.fade-in-height-expand-transition-${d}-from,
 &.fade-in-height-expand-transition-${s}-to`, Object.assign(Object.assign({}, i), {
    opacity: 1
  })), B(`&.fade-in-height-expand-transition-${d}-to,
 &.fade-in-height-expand-transition-${s}-from`, Object.assign(Object.assign({}, l), {
    opacity: 0,
    marginTop: "0 !important",
    marginBottom: "0 !important",
    paddingTop: o ? "0 !important" : void 0,
    paddingBottom: o ? "0 !important" : void 0
  })), B(`&.fade-in-height-expand-transition-${d}-active`, `
 overflow: ${e};
 transition:
 max-height ${t} ${Xt} ${r},
 opacity ${t} ${cp} ${r},
 margin-top ${t} ${Xt} ${r},
 margin-bottom ${t} ${Xt} ${r},
 padding-top ${t} ${Xt} ${r},
 padding-bottom ${t} ${Xt} ${r}
 ${n ? `,${n}` : ""}
 `), B(`&.fade-in-height-expand-transition-${s}-active`, `
 overflow: ${e};
 transition:
 max-height ${t} ${Xt},
 opacity ${t} ${up},
 margin-top ${t} ${Xt},
 margin-bottom ${t} ${Xt},
 padding-top ${t} ${Xt},
 padding-bottom ${t} ${Xt}
 ${n ? `,${n}` : ""}
 `)];
}
const hp = qn && "chrome" in window;
qn && navigator.userAgent.includes("Firefox");
const ms = qn && navigator.userAgent.includes("Safari") && !hp, pp = {
  paddingTiny: "0 8px",
  paddingSmall: "0 10px",
  paddingMedium: "0 12px",
  paddingLarge: "0 14px",
  clearSize: "16px"
};
function bp(e) {
  const {
    textColor2: t,
    textColor3: n,
    textColorDisabled: r,
    primaryColor: o,
    primaryColorHover: i,
    inputColor: l,
    inputColorDisabled: a,
    borderColor: s,
    warningColor: d,
    warningColorHover: u,
    errorColor: h,
    errorColorHover: b,
    borderRadius: m,
    lineHeight: f,
    fontSizeTiny: p,
    fontSizeSmall: v,
    fontSizeMedium: g,
    fontSizeLarge: y,
    heightTiny: S,
    heightSmall: w,
    heightMedium: C,
    heightLarge: k,
    actionColor: x,
    clearColor: z,
    clearColorHover: $,
    clearColorPressed: M,
    placeholderColor: V,
    placeholderColorDisabled: O,
    iconColor: E,
    iconColorDisabled: I,
    iconColorHover: F,
    iconColorPressed: N,
    fontWeight: W
  } = e;
  return Object.assign(Object.assign({}, pp), {
    fontWeight: W,
    countTextColorDisabled: r,
    countTextColor: n,
    heightTiny: S,
    heightSmall: w,
    heightMedium: C,
    heightLarge: k,
    fontSizeTiny: p,
    fontSizeSmall: v,
    fontSizeMedium: g,
    fontSizeLarge: y,
    lineHeight: f,
    lineHeightTextarea: f,
    borderRadius: m,
    iconSize: "16px",
    groupLabelColor: x,
    groupLabelTextColor: t,
    textColor: t,
    textColorDisabled: r,
    textDecorationColor: t,
    caretColor: o,
    placeholderColor: V,
    placeholderColorDisabled: O,
    color: l,
    colorDisabled: a,
    colorFocus: l,
    groupLabelBorder: `1px solid ${s}`,
    border: `1px solid ${s}`,
    borderHover: `1px solid ${i}`,
    borderDisabled: `1px solid ${s}`,
    borderFocus: `1px solid ${i}`,
    boxShadowFocus: `0 0 0 2px ${Oe(o, {
      alpha: 0.2
    })}`,
    loadingColor: o,
    // warning
    loadingColorWarning: d,
    borderWarning: `1px solid ${d}`,
    borderHoverWarning: `1px solid ${u}`,
    colorFocusWarning: l,
    borderFocusWarning: `1px solid ${u}`,
    boxShadowFocusWarning: `0 0 0 2px ${Oe(d, {
      alpha: 0.2
    })}`,
    caretColorWarning: d,
    // error
    loadingColorError: h,
    borderError: `1px solid ${h}`,
    borderHoverError: `1px solid ${b}`,
    colorFocusError: l,
    borderFocusError: `1px solid ${b}`,
    boxShadowFocusError: `0 0 0 2px ${Oe(h, {
      alpha: 0.2
    })}`,
    caretColorError: h,
    clearColor: z,
    clearColorHover: $,
    clearColorPressed: M,
    iconColor: E,
    iconColorDisabled: I,
    iconColorHover: F,
    iconColorPressed: N,
    suffixTextColor: t
  });
}
const vs = {
  name: "Input",
  common: rt,
  self: bp
}, xs = "n-input", gp = R("input", `
 max-width: 100%;
 cursor: text;
 line-height: 1.5;
 z-index: auto;
 outline: none;
 box-sizing: border-box;
 position: relative;
 display: inline-flex;
 border-radius: var(--n-border-radius);
 background-color: var(--n-color);
 transition: background-color .3s var(--n-bezier);
 font-size: var(--n-font-size);
 font-weight: var(--n-font-weight);
 --n-padding-vertical: calc((var(--n-height) - 1.5 * var(--n-font-size)) / 2);
`, [
  // common
  A("input, textarea", `
 overflow: hidden;
 flex-grow: 1;
 position: relative;
 `),
  A("input-el, textarea-el, input-mirror, textarea-mirror, separator, placeholder", `
 box-sizing: border-box;
 font-size: inherit;
 line-height: 1.5;
 font-family: inherit;
 border: none;
 outline: none;
 background-color: #0000;
 text-align: inherit;
 transition:
 -webkit-text-fill-color .3s var(--n-bezier),
 caret-color .3s var(--n-bezier),
 color .3s var(--n-bezier),
 text-decoration-color .3s var(--n-bezier);
 `),
  A("input-el, textarea-el", `
 -webkit-appearance: none;
 scrollbar-width: none;
 width: 100%;
 min-width: 0;
 text-decoration-color: var(--n-text-decoration-color);
 color: var(--n-text-color);
 caret-color: var(--n-caret-color);
 background-color: transparent;
 `, [B("&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb", `
 width: 0;
 height: 0;
 display: none;
 `), B("&::placeholder", `
 color: #0000;
 -webkit-text-fill-color: transparent !important;
 `), B("&:-webkit-autofill ~", [A("placeholder", "display: none;")])]),
  _("round", [Je("textarea", "border-radius: calc(var(--n-height) / 2);")]),
  A("placeholder", `
 pointer-events: none;
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 overflow: hidden;
 color: var(--n-placeholder-color);
 `, [B("span", `
 width: 100%;
 display: inline-block;
 `)]),
  _("textarea", [A("placeholder", "overflow: visible;")]),
  Je("autosize", "width: 100%;"),
  _("autosize", [A("textarea-el, input-el", `
 position: absolute;
 top: 0;
 left: 0;
 height: 100%;
 `)]),
  // input
  R("input-wrapper", `
 overflow: hidden;
 display: inline-flex;
 flex-grow: 1;
 position: relative;
 padding-left: var(--n-padding-left);
 padding-right: var(--n-padding-right);
 `),
  A("input-mirror", `
 padding: 0;
 height: var(--n-height);
 line-height: var(--n-height);
 overflow: hidden;
 visibility: hidden;
 position: static;
 white-space: pre;
 pointer-events: none;
 `),
  A("input-el", `
 padding: 0;
 height: var(--n-height);
 line-height: var(--n-height);
 `, [B("&[type=password]::-ms-reveal", "display: none;"), B("+", [A("placeholder", `
 display: flex;
 align-items: center; 
 `)])]),
  Je("textarea", [A("placeholder", "white-space: nowrap;")]),
  A("eye", `
 display: flex;
 align-items: center;
 justify-content: center;
 transition: color .3s var(--n-bezier);
 `),
  // textarea
  _("textarea", "width: 100%;", [R("input-word-count", `
 position: absolute;
 right: var(--n-padding-right);
 bottom: var(--n-padding-vertical);
 `), _("resizable", [R("input-wrapper", `
 resize: vertical;
 min-height: var(--n-height);
 `)]), A("textarea-el, textarea-mirror, placeholder", `
 height: 100%;
 padding-left: 0;
 padding-right: 0;
 padding-top: var(--n-padding-vertical);
 padding-bottom: var(--n-padding-vertical);
 word-break: break-word;
 display: inline-block;
 vertical-align: bottom;
 box-sizing: border-box;
 line-height: var(--n-line-height-textarea);
 margin: 0;
 resize: none;
 white-space: pre-wrap;
 scroll-padding-block-end: var(--n-padding-vertical);
 `), A("textarea-mirror", `
 width: 100%;
 pointer-events: none;
 overflow: hidden;
 visibility: hidden;
 position: static;
 white-space: pre-wrap;
 overflow-wrap: break-word;
 `)]),
  // pair
  _("pair", [A("input-el, placeholder", "text-align: center;"), A("separator", `
 display: flex;
 align-items: center;
 transition: color .3s var(--n-bezier);
 color: var(--n-text-color);
 white-space: nowrap;
 `, [R("icon", `
 color: var(--n-icon-color);
 `), R("base-icon", `
 color: var(--n-icon-color);
 `)])]),
  _("disabled", `
 cursor: not-allowed;
 background-color: var(--n-color-disabled);
 `, [A("border", "border: var(--n-border-disabled);"), A("input-el, textarea-el", `
 cursor: not-allowed;
 color: var(--n-text-color-disabled);
 text-decoration-color: var(--n-text-color-disabled);
 `), A("placeholder", "color: var(--n-placeholder-color-disabled);"), A("separator", "color: var(--n-text-color-disabled);", [R("icon", `
 color: var(--n-icon-color-disabled);
 `), R("base-icon", `
 color: var(--n-icon-color-disabled);
 `)]), R("input-word-count", `
 color: var(--n-count-text-color-disabled);
 `), A("suffix, prefix", "color: var(--n-text-color-disabled);", [R("icon", `
 color: var(--n-icon-color-disabled);
 `), R("internal-icon", `
 color: var(--n-icon-color-disabled);
 `)])]),
  Je("disabled", [A("eye", `
 color: var(--n-icon-color);
 cursor: pointer;
 `, [B("&:hover", `
 color: var(--n-icon-color-hover);
 `), B("&:active", `
 color: var(--n-icon-color-pressed);
 `)]), B("&:hover", [A("state-border", "border: var(--n-border-hover);")]), _("focus", "background-color: var(--n-color-focus);", [A("state-border", `
 border: var(--n-border-focus);
 box-shadow: var(--n-box-shadow-focus);
 `)])]),
  A("border, state-border", `
 box-sizing: border-box;
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 pointer-events: none;
 border-radius: inherit;
 border: var(--n-border);
 transition:
 box-shadow .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 `),
  A("state-border", `
 border-color: #0000;
 z-index: 1;
 `),
  A("prefix", "margin-right: 4px;"),
  A("suffix", `
 margin-left: 4px;
 `),
  A("suffix, prefix", `
 transition: color .3s var(--n-bezier);
 flex-wrap: nowrap;
 flex-shrink: 0;
 line-height: var(--n-height);
 white-space: nowrap;
 display: inline-flex;
 align-items: center;
 justify-content: center;
 color: var(--n-suffix-text-color);
 `, [R("base-loading", `
 font-size: var(--n-icon-size);
 margin: 0 2px;
 color: var(--n-loading-color);
 `), R("base-clear", `
 font-size: var(--n-icon-size);
 `, [A("placeholder", [R("base-icon", `
 transition: color .3s var(--n-bezier);
 color: var(--n-icon-color);
 font-size: var(--n-icon-size);
 `)])]), B(">", [R("icon", `
 transition: color .3s var(--n-bezier);
 color: var(--n-icon-color);
 font-size: var(--n-icon-size);
 `)]), R("base-icon", `
 font-size: var(--n-icon-size);
 `)]),
  R("input-word-count", `
 pointer-events: none;
 line-height: 1.5;
 font-size: .85em;
 color: var(--n-count-text-color);
 transition: color .3s var(--n-bezier);
 margin-left: 4px;
 font-variant: tabular-nums;
 `),
  ["warning", "error"].map((e) => _(`${e}-status`, [Je("disabled", [R("base-loading", `
 color: var(--n-loading-color-${e})
 `), A("input-el, textarea-el", `
 caret-color: var(--n-caret-color-${e});
 `), A("state-border", `
 border: var(--n-border-${e});
 `), B("&:hover", [A("state-border", `
 border: var(--n-border-hover-${e});
 `)]), B("&:focus", `
 background-color: var(--n-color-focus-${e});
 `, [A("state-border", `
 box-shadow: var(--n-box-shadow-focus-${e});
 border: var(--n-border-focus-${e});
 `)]), _("focus", `
 background-color: var(--n-color-focus-${e});
 `, [A("state-border", `
 box-shadow: var(--n-box-shadow-focus-${e});
 border: var(--n-border-focus-${e});
 `)])])]))
]), mp = R("input", [_("disabled", [A("input-el, textarea-el", `
 -webkit-text-fill-color: var(--n-text-color-disabled);
 `)])]);
function vp(e) {
  let t = 0;
  for (const n of e)
    t++;
  return t;
}
function Lr(e) {
  return e === "" || e == null;
}
function xp(e) {
  const t = L(null);
  function n() {
    const {
      value: i
    } = e;
    if (!(i != null && i.focus)) {
      o();
      return;
    }
    const {
      selectionStart: l,
      selectionEnd: a,
      value: s
    } = i;
    if (l == null || a == null) {
      o();
      return;
    }
    t.value = {
      start: l,
      end: a,
      beforeText: s.slice(0, l),
      afterText: s.slice(a)
    };
  }
  function r() {
    var i;
    const {
      value: l
    } = t, {
      value: a
    } = e;
    if (!l || !a)
      return;
    const {
      value: s
    } = a, {
      start: d,
      beforeText: u,
      afterText: h
    } = l;
    let b = s.length;
    if (s.endsWith(h))
      b = s.length - h.length;
    else if (s.startsWith(u))
      b = u.length;
    else {
      const m = u[d - 1], f = s.indexOf(m, d - 1);
      f !== -1 && (b = f + 1);
    }
    (i = a.setSelectionRange) === null || i === void 0 || i.call(a, b, b);
  }
  function o() {
    t.value = null;
  }
  return je(e, o), {
    recordCursor: n,
    restoreCursor: r
  };
}
const Da = ie({
  name: "InputWordCount",
  setup(e, {
    slots: t
  }) {
    const {
      mergedValueRef: n,
      maxlengthRef: r,
      mergedClsPrefixRef: o,
      countGraphemesRef: i
    } = ke(xs), l = T(() => {
      const {
        value: a
      } = n;
      return a === null || Array.isArray(a) ? 0 : (i.value || vp)(a);
    });
    return () => {
      const {
        value: a
      } = r, {
        value: s
      } = n;
      return c("span", {
        class: `${o.value}-input-word-count`
      }, ku(t.default, {
        value: s === null || Array.isArray(s) ? "" : s
      }, () => [a === void 0 ? l.value : `${l.value} / ${a}`]));
    };
  }
}), yp = Object.assign(Object.assign({}, we.props), {
  bordered: {
    type: Boolean,
    default: void 0
  },
  type: {
    type: String,
    default: "text"
  },
  placeholder: [Array, String],
  defaultValue: {
    type: [String, Array],
    default: null
  },
  value: [String, Array],
  disabled: {
    type: Boolean,
    default: void 0
  },
  size: String,
  rows: {
    type: [Number, String],
    default: 3
  },
  round: Boolean,
  minlength: [String, Number],
  maxlength: [String, Number],
  clearable: Boolean,
  autosize: {
    type: [Boolean, Object],
    default: !1
  },
  pair: Boolean,
  separator: String,
  readonly: {
    type: [String, Boolean],
    default: !1
  },
  passivelyActivated: Boolean,
  showPasswordOn: String,
  stateful: {
    type: Boolean,
    default: !0
  },
  autofocus: Boolean,
  inputProps: Object,
  resizable: {
    type: Boolean,
    default: !0
  },
  showCount: Boolean,
  loading: {
    type: Boolean,
    default: void 0
  },
  allowInput: Function,
  renderCount: Function,
  onMousedown: Function,
  onKeydown: Function,
  onKeyup: [Function, Array],
  onInput: [Function, Array],
  onFocus: [Function, Array],
  onBlur: [Function, Array],
  onClick: [Function, Array],
  onChange: [Function, Array],
  onClear: [Function, Array],
  countGraphemes: Function,
  status: String,
  "onUpdate:value": [Function, Array],
  onUpdateValue: [Function, Array],
  /** private */
  textDecoration: [String, Array],
  attrSize: {
    type: Number,
    default: 20
  },
  onInputBlur: [Function, Array],
  onInputFocus: [Function, Array],
  onDeactivate: [Function, Array],
  onActivate: [Function, Array],
  onWrapperFocus: [Function, Array],
  onWrapperBlur: [Function, Array],
  internalDeactivateOnEnter: Boolean,
  internalForceFocus: Boolean,
  internalLoadingBeforeSuffix: {
    type: Boolean,
    default: !0
  },
  /** deprecated */
  showPasswordToggle: Boolean
}), ja = ie({
  name: "Input",
  props: yp,
  slots: Object,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedBorderedRef: n,
      inlineThemeDisabled: r,
      mergedRtlRef: o
    } = _e(e), i = we("Input", "-input", gp, vs, e, t);
    ms && Mn("-input-safari", mp, t);
    const l = L(null), a = L(null), s = L(null), d = L(null), u = L(null), h = L(null), b = L(null), m = xp(b), f = L(null), {
      localeRef: p
    } = Pn("Input"), v = L(e.defaultValue), g = ae(e, "value"), y = zt(g, v), S = Tn(e), {
      mergedSizeRef: w,
      mergedDisabledRef: C,
      mergedStatusRef: k
    } = S, x = L(!1), z = L(!1), $ = L(!1), M = L(!1);
    let V = null;
    const O = T(() => {
      const {
        placeholder: H,
        pair: ne
      } = e;
      return ne ? Array.isArray(H) ? H : H === void 0 ? ["", ""] : [H, H] : H === void 0 ? [p.value.placeholder] : [H];
    }), E = T(() => {
      const {
        value: H
      } = $, {
        value: ne
      } = y, {
        value: Ce
      } = O;
      return !H && (Lr(ne) || Array.isArray(ne) && Lr(ne[0])) && Ce[0];
    }), I = T(() => {
      const {
        value: H
      } = $, {
        value: ne
      } = y, {
        value: Ce
      } = O;
      return !H && Ce[1] && (Lr(ne) || Array.isArray(ne) && Lr(ne[1]));
    }), F = Ue(() => e.internalForceFocus || x.value), N = Ue(() => {
      if (C.value || e.readonly || !e.clearable || !F.value && !z.value)
        return !1;
      const {
        value: H
      } = y, {
        value: ne
      } = F;
      return e.pair ? !!(Array.isArray(H) && (H[0] || H[1])) && (z.value || ne) : !!H && (z.value || ne);
    }), W = T(() => {
      const {
        showPasswordOn: H
      } = e;
      if (H)
        return H;
      if (e.showPasswordToggle) return "click";
    }), X = L(!1), re = T(() => {
      const {
        textDecoration: H
      } = e;
      return H ? Array.isArray(H) ? H.map((ne) => ({
        textDecoration: ne
      })) : [{
        textDecoration: H
      }] : ["", ""];
    }), Q = L(void 0), G = () => {
      var H, ne;
      if (e.type === "textarea") {
        const {
          autosize: Ce
        } = e;
        if (Ce && (Q.value = (ne = (H = f.value) === null || H === void 0 ? void 0 : H.$el) === null || ne === void 0 ? void 0 : ne.offsetWidth), !a.value || typeof Ce == "boolean") return;
        const {
          paddingTop: Be,
          paddingBottom: Ve,
          lineHeight: Ae
        } = window.getComputedStyle(a.value), nt = Number(Be.slice(0, -2)), lt = Number(Ve.slice(0, -2)), It = Number(Ae.slice(0, -2)), {
          value: en
        } = s;
        if (!en) return;
        if (Ce.minRows) {
          const tn = Math.max(Ce.minRows, 1), bn = `${nt + lt + It * tn}px`;
          en.style.minHeight = bn;
        }
        if (Ce.maxRows) {
          const tn = `${nt + lt + It * Ce.maxRows}px`;
          en.style.maxHeight = tn;
        }
      }
    }, j = T(() => {
      const {
        maxlength: H
      } = e;
      return H === void 0 ? void 0 : Number(H);
    });
    vt(() => {
      const {
        value: H
      } = y;
      Array.isArray(H) || Ee(H);
    });
    const q = wr().proxy;
    function Z(H, ne) {
      const {
        onUpdateValue: Ce,
        "onUpdate:value": Be,
        onInput: Ve
      } = e, {
        nTriggerFormInput: Ae
      } = S;
      Ce && oe(Ce, H, ne), Be && oe(Be, H, ne), Ve && oe(Ve, H, ne), v.value = H, Ae();
    }
    function le(H, ne) {
      const {
        onChange: Ce
      } = e, {
        nTriggerFormChange: Be
      } = S;
      Ce && oe(Ce, H, ne), v.value = H, Be();
    }
    function ue(H) {
      const {
        onBlur: ne
      } = e, {
        nTriggerFormBlur: Ce
      } = S;
      ne && oe(ne, H), Ce();
    }
    function be(H) {
      const {
        onFocus: ne
      } = e, {
        nTriggerFormFocus: Ce
      } = S;
      ne && oe(ne, H), Ce();
    }
    function Re(H) {
      const {
        onClear: ne
      } = e;
      ne && oe(ne, H);
    }
    function K(H) {
      const {
        onInputBlur: ne
      } = e;
      ne && oe(ne, H);
    }
    function fe(H) {
      const {
        onInputFocus: ne
      } = e;
      ne && oe(ne, H);
    }
    function Me() {
      const {
        onDeactivate: H
      } = e;
      H && oe(H);
    }
    function ye() {
      const {
        onActivate: H
      } = e;
      H && oe(H);
    }
    function Fe(H) {
      const {
        onClick: ne
      } = e;
      ne && oe(ne, H);
    }
    function Te(H) {
      const {
        onWrapperFocus: ne
      } = e;
      ne && oe(ne, H);
    }
    function Qe(H) {
      const {
        onWrapperBlur: ne
      } = e;
      ne && oe(ne, H);
    }
    function qe() {
      $.value = !0;
    }
    function tt(H) {
      $.value = !1, H.target === h.value ? et(H, 1) : et(H, 0);
    }
    function et(H, ne = 0, Ce = "input") {
      const Be = H.target.value;
      if (Ee(Be), H instanceof InputEvent && !H.isComposing && ($.value = !1), e.type === "textarea") {
        const {
          value: Ae
        } = f;
        Ae && Ae.syncUnifiedContainer();
      }
      if (V = Be, $.value) return;
      m.recordCursor();
      const Ve = me(Be);
      if (Ve)
        if (!e.pair)
          Ce === "input" ? Z(Be, {
            source: ne
          }) : le(Be, {
            source: ne
          });
        else {
          let {
            value: Ae
          } = y;
          Array.isArray(Ae) ? Ae = [Ae[0], Ae[1]] : Ae = ["", ""], Ae[ne] = Be, Ce === "input" ? Z(Ae, {
            source: ne
          }) : le(Ae, {
            source: ne
          });
        }
      q.$forceUpdate(), Ve || Tt(m.restoreCursor);
    }
    function me(H) {
      const {
        countGraphemes: ne,
        maxlength: Ce,
        minlength: Be
      } = e;
      if (ne) {
        let Ae;
        if (Ce !== void 0 && (Ae === void 0 && (Ae = ne(H)), Ae > Number(Ce)) || Be !== void 0 && (Ae === void 0 && (Ae = ne(H)), Ae < Number(Ce)))
          return !1;
      }
      const {
        allowInput: Ve
      } = e;
      return typeof Ve == "function" ? Ve(H) : !0;
    }
    function U(H) {
      K(H), H.relatedTarget === l.value && Me(), H.relatedTarget !== null && (H.relatedTarget === u.value || H.relatedTarget === h.value || H.relatedTarget === a.value) || (M.value = !1), te(H, "blur"), b.value = null;
    }
    function Y(H, ne) {
      fe(H), x.value = !0, M.value = !0, ye(), te(H, "focus"), ne === 0 ? b.value = u.value : ne === 1 ? b.value = h.value : ne === 2 && (b.value = a.value);
    }
    function de(H) {
      e.passivelyActivated && (Qe(H), te(H, "blur"));
    }
    function xe(H) {
      e.passivelyActivated && (x.value = !0, Te(H), te(H, "focus"));
    }
    function te(H, ne) {
      H.relatedTarget !== null && (H.relatedTarget === u.value || H.relatedTarget === h.value || H.relatedTarget === a.value || H.relatedTarget === l.value) || (ne === "focus" ? (be(H), x.value = !0) : ne === "blur" && (ue(H), x.value = !1));
    }
    function ce(H, ne) {
      et(H, ne, "change");
    }
    function ze(H) {
      Fe(H);
    }
    function Ne(H) {
      Re(H), st();
    }
    function st() {
      e.pair ? (Z(["", ""], {
        source: "clear"
      }), le(["", ""], {
        source: "clear"
      })) : (Z("", {
        source: "clear"
      }), le("", {
        source: "clear"
      }));
    }
    function ft(H) {
      const {
        onMousedown: ne
      } = e;
      ne && ne(H);
      const {
        tagName: Ce
      } = H.target;
      if (Ce !== "INPUT" && Ce !== "TEXTAREA") {
        if (e.resizable) {
          const {
            value: Be
          } = l;
          if (Be) {
            const {
              left: Ve,
              top: Ae,
              width: nt,
              height: lt
            } = Be.getBoundingClientRect(), It = 14;
            if (Ve + nt - It < H.clientX && H.clientX < Ve + nt && Ae + lt - It < H.clientY && H.clientY < Ae + lt)
              return;
          }
        }
        H.preventDefault(), x.value || ee();
      }
    }
    function at() {
      var H;
      z.value = !0, e.type === "textarea" && ((H = f.value) === null || H === void 0 || H.handleMouseEnterWrapper());
    }
    function Xe() {
      var H;
      z.value = !1, e.type === "textarea" && ((H = f.value) === null || H === void 0 || H.handleMouseLeaveWrapper());
    }
    function dt() {
      C.value || W.value === "click" && (X.value = !X.value);
    }
    function Ge(H) {
      if (C.value) return;
      H.preventDefault();
      const ne = (Be) => {
        Be.preventDefault(), He("mouseup", document, ne);
      };
      if (De("mouseup", document, ne), W.value !== "mousedown") return;
      X.value = !0;
      const Ce = () => {
        X.value = !1, He("mouseup", document, Ce);
      };
      De("mouseup", document, Ce);
    }
    function pe(H) {
      e.onKeyup && oe(e.onKeyup, H);
    }
    function Pe(H) {
      switch (e.onKeydown && oe(e.onKeydown, H), H.key) {
        case "Escape":
          D();
          break;
        case "Enter":
          P(H);
          break;
      }
    }
    function P(H) {
      var ne, Ce;
      if (e.passivelyActivated) {
        const {
          value: Be
        } = M;
        if (Be) {
          e.internalDeactivateOnEnter && D();
          return;
        }
        H.preventDefault(), e.type === "textarea" ? (ne = a.value) === null || ne === void 0 || ne.focus() : (Ce = u.value) === null || Ce === void 0 || Ce.focus();
      }
    }
    function D() {
      e.passivelyActivated && (M.value = !1, Tt(() => {
        var H;
        (H = l.value) === null || H === void 0 || H.focus();
      }));
    }
    function ee() {
      var H, ne, Ce;
      C.value || (e.passivelyActivated ? (H = l.value) === null || H === void 0 || H.focus() : ((ne = a.value) === null || ne === void 0 || ne.focus(), (Ce = u.value) === null || Ce === void 0 || Ce.focus()));
    }
    function se() {
      var H;
      !((H = l.value) === null || H === void 0) && H.contains(document.activeElement) && document.activeElement.blur();
    }
    function he() {
      var H, ne;
      (H = a.value) === null || H === void 0 || H.select(), (ne = u.value) === null || ne === void 0 || ne.select();
    }
    function ge() {
      C.value || (a.value ? a.value.focus() : u.value && u.value.focus());
    }
    function ve() {
      const {
        value: H
      } = l;
      H != null && H.contains(document.activeElement) && H !== document.activeElement && D();
    }
    function Se(H) {
      if (e.type === "textarea") {
        const {
          value: ne
        } = a;
        ne == null || ne.scrollTo(H);
      } else {
        const {
          value: ne
        } = u;
        ne == null || ne.scrollTo(H);
      }
    }
    function Ee(H) {
      const {
        type: ne,
        pair: Ce,
        autosize: Be
      } = e;
      if (!Ce && Be)
        if (ne === "textarea") {
          const {
            value: Ve
          } = s;
          Ve && (Ve.textContent = `${H != null ? H : ""}\r
`);
        } else {
          const {
            value: Ve
          } = d;
          Ve && (H ? Ve.textContent = H : Ve.innerHTML = "&nbsp;");
        }
    }
    function Ye() {
      G();
    }
    const Le = L({
      top: "0"
    });
    function bt(H) {
      var ne;
      const {
        scrollTop: Ce
      } = H.target;
      Le.value.top = `${-Ce}px`, (ne = f.value) === null || ne === void 0 || ne.syncUnifiedContainer();
    }
    let xt = null;
    Bt(() => {
      const {
        autosize: H,
        type: ne
      } = e;
      H && ne === "textarea" ? xt = je(y, (Ce) => {
        !Array.isArray(Ce) && Ce !== V && Ee(Ce);
      }) : xt == null || xt();
    });
    let yt = null;
    Bt(() => {
      e.type === "textarea" ? yt = je(y, (H) => {
        var ne;
        !Array.isArray(H) && H !== V && ((ne = f.value) === null || ne === void 0 || ne.syncUnifiedContainer());
      }) : yt == null || yt();
    }), We(xs, {
      mergedValueRef: y,
      maxlengthRef: j,
      mergedClsPrefixRef: t,
      countGraphemesRef: ae(e, "countGraphemes")
    });
    const Ct = {
      wrapperElRef: l,
      inputElRef: u,
      textareaElRef: a,
      isCompositing: $,
      clear: st,
      focus: ee,
      blur: se,
      select: he,
      deactivate: ve,
      activate: ge,
      scrollTo: Se
    }, St = $t("Input", o, t), Mt = T(() => {
      const {
        value: H
      } = w, {
        common: {
          cubicBezierEaseInOut: ne
        },
        self: {
          color: Ce,
          borderRadius: Be,
          textColor: Ve,
          caretColor: Ae,
          caretColorError: nt,
          caretColorWarning: lt,
          textDecorationColor: It,
          border: en,
          borderDisabled: tn,
          borderHover: bn,
          borderFocus: Qn,
          placeholderColor: er,
          placeholderColorDisabled: tr,
          lineHeightTextarea: nr,
          colorDisabled: rr,
          colorFocus: sn,
          textColorDisabled: dn,
          boxShadowFocus: uo,
          iconSize: fo,
          colorFocusWarning: ho,
          boxShadowFocusWarning: po,
          borderWarning: bo,
          borderFocusWarning: go,
          borderHoverWarning: mo,
          colorFocusError: vo,
          boxShadowFocusError: xo,
          borderError: yo,
          borderFocusError: wo,
          borderHoverError: rd,
          clearSize: od,
          clearColor: id,
          clearColorHover: ad,
          clearColorPressed: ld,
          iconColor: sd,
          iconColorDisabled: dd,
          suffixTextColor: cd,
          countTextColor: ud,
          countTextColorDisabled: fd,
          iconColorHover: hd,
          iconColorPressed: pd,
          loadingColor: bd,
          loadingColorError: gd,
          loadingColorWarning: md,
          fontWeight: vd,
          [J("padding", H)]: xd,
          [J("fontSize", H)]: yd,
          [J("height", H)]: wd
        }
      } = i.value, {
        left: Cd,
        right: Sd
      } = mt(xd);
      return {
        "--n-bezier": ne,
        "--n-count-text-color": ud,
        "--n-count-text-color-disabled": fd,
        "--n-color": Ce,
        "--n-font-size": yd,
        "--n-font-weight": vd,
        "--n-border-radius": Be,
        "--n-height": wd,
        "--n-padding-left": Cd,
        "--n-padding-right": Sd,
        "--n-text-color": Ve,
        "--n-caret-color": Ae,
        "--n-text-decoration-color": It,
        "--n-border": en,
        "--n-border-disabled": tn,
        "--n-border-hover": bn,
        "--n-border-focus": Qn,
        "--n-placeholder-color": er,
        "--n-placeholder-color-disabled": tr,
        "--n-icon-size": fo,
        "--n-line-height-textarea": nr,
        "--n-color-disabled": rr,
        "--n-color-focus": sn,
        "--n-text-color-disabled": dn,
        "--n-box-shadow-focus": uo,
        "--n-loading-color": bd,
        // form warning
        "--n-caret-color-warning": lt,
        "--n-color-focus-warning": ho,
        "--n-box-shadow-focus-warning": po,
        "--n-border-warning": bo,
        "--n-border-focus-warning": go,
        "--n-border-hover-warning": mo,
        "--n-loading-color-warning": md,
        // form error
        "--n-caret-color-error": nt,
        "--n-color-focus-error": vo,
        "--n-box-shadow-focus-error": xo,
        "--n-border-error": yo,
        "--n-border-focus-error": wo,
        "--n-border-hover-error": rd,
        "--n-loading-color-error": gd,
        // clear-button
        "--n-clear-color": id,
        "--n-clear-size": od,
        "--n-clear-color-hover": ad,
        "--n-clear-color-pressed": ld,
        "--n-icon-color": sd,
        "--n-icon-color-hover": hd,
        "--n-icon-color-pressed": pd,
        "--n-icon-color-disabled": dd,
        "--n-suffix-text-color": cd
      };
    }), Ft = r ? it("input", T(() => {
      const {
        value: H
      } = w;
      return H[0];
    }), Mt, e) : void 0;
    return Object.assign(Object.assign({}, Ct), {
      // DOM ref
      wrapperElRef: l,
      inputElRef: u,
      inputMirrorElRef: d,
      inputEl2Ref: h,
      textareaElRef: a,
      textareaMirrorElRef: s,
      textareaScrollbarInstRef: f,
      // value
      rtlEnabled: St,
      uncontrolledValue: v,
      mergedValue: y,
      passwordVisible: X,
      mergedPlaceholder: O,
      showPlaceholder1: E,
      showPlaceholder2: I,
      mergedFocus: F,
      isComposing: $,
      activated: M,
      showClearButton: N,
      mergedSize: w,
      mergedDisabled: C,
      textDecorationStyle: re,
      mergedClsPrefix: t,
      mergedBordered: n,
      mergedShowPasswordOn: W,
      placeholderStyle: Le,
      mergedStatus: k,
      textAreaScrollContainerWidth: Q,
      // methods
      handleTextAreaScroll: bt,
      handleCompositionStart: qe,
      handleCompositionEnd: tt,
      handleInput: et,
      handleInputBlur: U,
      handleInputFocus: Y,
      handleWrapperBlur: de,
      handleWrapperFocus: xe,
      handleMouseEnter: at,
      handleMouseLeave: Xe,
      handleMouseDown: ft,
      handleChange: ce,
      handleClick: ze,
      handleClear: Ne,
      handlePasswordToggleClick: dt,
      handlePasswordToggleMousedown: Ge,
      handleWrapperKeydown: Pe,
      handleWrapperKeyup: pe,
      handleTextAreaMirrorResize: Ye,
      getTextareaScrollContainer: () => a.value,
      mergedTheme: i,
      cssVars: r ? void 0 : Mt,
      themeClass: Ft == null ? void 0 : Ft.themeClass,
      onRender: Ft == null ? void 0 : Ft.onRender
    });
  },
  render() {
    var e, t;
    const {
      mergedClsPrefix: n,
      mergedStatus: r,
      themeClass: o,
      type: i,
      countGraphemes: l,
      onRender: a
    } = this, s = this.$slots;
    return a == null || a(), c("div", {
      ref: "wrapperElRef",
      class: [`${n}-input`, o, r && `${n}-input--${r}-status`, {
        [`${n}-input--rtl`]: this.rtlEnabled,
        [`${n}-input--disabled`]: this.mergedDisabled,
        [`${n}-input--textarea`]: i === "textarea",
        [`${n}-input--resizable`]: this.resizable && !this.autosize,
        [`${n}-input--autosize`]: this.autosize,
        [`${n}-input--round`]: this.round && i !== "textarea",
        [`${n}-input--pair`]: this.pair,
        [`${n}-input--focus`]: this.mergedFocus,
        [`${n}-input--stateful`]: this.stateful
      }],
      style: this.cssVars,
      tabindex: !this.mergedDisabled && this.passivelyActivated && !this.activated ? 0 : void 0,
      onFocus: this.handleWrapperFocus,
      onBlur: this.handleWrapperBlur,
      onClick: this.handleClick,
      onMousedown: this.handleMouseDown,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave,
      onCompositionstart: this.handleCompositionStart,
      onCompositionend: this.handleCompositionEnd,
      onKeyup: this.handleWrapperKeyup,
      onKeydown: this.handleWrapperKeydown
    }, c("div", {
      class: `${n}-input-wrapper`
    }, Ze(s.prefix, (d) => d && c("div", {
      class: `${n}-input__prefix`
    }, d)), i === "textarea" ? c(Zn, {
      ref: "textareaScrollbarInstRef",
      class: `${n}-input__textarea`,
      container: this.getTextareaScrollContainer,
      triggerDisplayManually: !0,
      useUnifiedContainer: !0,
      internalHoistYRail: !0
    }, {
      default: () => {
        var d, u;
        const {
          textAreaScrollContainerWidth: h
        } = this, b = {
          width: this.autosize && h && `${h}px`
        };
        return c(Pt, null, c("textarea", Object.assign({}, this.inputProps, {
          ref: "textareaElRef",
          class: [`${n}-input__textarea-el`, (d = this.inputProps) === null || d === void 0 ? void 0 : d.class],
          autofocus: this.autofocus,
          rows: Number(this.rows),
          placeholder: this.placeholder,
          value: this.mergedValue,
          disabled: this.mergedDisabled,
          maxlength: l ? void 0 : this.maxlength,
          minlength: l ? void 0 : this.minlength,
          readonly: this.readonly,
          tabindex: this.passivelyActivated && !this.activated ? -1 : void 0,
          style: [this.textDecorationStyle[0], (u = this.inputProps) === null || u === void 0 ? void 0 : u.style, b],
          onBlur: this.handleInputBlur,
          onFocus: (m) => {
            this.handleInputFocus(m, 2);
          },
          onInput: this.handleInput,
          onChange: this.handleChange,
          onScroll: this.handleTextAreaScroll
        })), this.showPlaceholder1 ? c("div", {
          class: `${n}-input__placeholder`,
          style: [this.placeholderStyle, b],
          key: "placeholder"
        }, this.mergedPlaceholder[0]) : null, this.autosize ? c(on, {
          onResize: this.handleTextAreaMirrorResize
        }, {
          default: () => c("div", {
            ref: "textareaMirrorElRef",
            class: `${n}-input__textarea-mirror`,
            key: "mirror"
          })
        }) : null);
      }
    }) : c("div", {
      class: `${n}-input__input`
    }, c("input", Object.assign({
      type: i === "password" && this.mergedShowPasswordOn && this.passwordVisible ? "text" : i
    }, this.inputProps, {
      ref: "inputElRef",
      class: [`${n}-input__input-el`, (e = this.inputProps) === null || e === void 0 ? void 0 : e.class],
      style: [this.textDecorationStyle[0], (t = this.inputProps) === null || t === void 0 ? void 0 : t.style],
      tabindex: this.passivelyActivated && !this.activated ? -1 : void 0,
      placeholder: this.mergedPlaceholder[0],
      disabled: this.mergedDisabled,
      maxlength: l ? void 0 : this.maxlength,
      minlength: l ? void 0 : this.minlength,
      value: Array.isArray(this.mergedValue) ? this.mergedValue[0] : this.mergedValue,
      readonly: this.readonly,
      autofocus: this.autofocus,
      size: this.attrSize,
      onBlur: this.handleInputBlur,
      onFocus: (d) => {
        this.handleInputFocus(d, 0);
      },
      onInput: (d) => {
        this.handleInput(d, 0);
      },
      onChange: (d) => {
        this.handleChange(d, 0);
      }
    })), this.showPlaceholder1 ? c("div", {
      class: `${n}-input__placeholder`
    }, c("span", null, this.mergedPlaceholder[0])) : null, this.autosize ? c("div", {
      class: `${n}-input__input-mirror`,
      key: "mirror",
      ref: "inputMirrorElRef"
    }, " ") : null), !this.pair && Ze(s.suffix, (d) => d || this.clearable || this.showCount || this.mergedShowPasswordOn || this.loading !== void 0 ? c("div", {
      class: `${n}-input__suffix`
    }, [Ze(s["clear-icon-placeholder"], (u) => (this.clearable || u) && c(Qo, {
      clsPrefix: n,
      show: this.showClearButton,
      onClear: this.handleClear
    }, {
      placeholder: () => u,
      icon: () => {
        var h, b;
        return (b = (h = this.$slots)["clear-icon"]) === null || b === void 0 ? void 0 : b.call(h);
      }
    })), this.internalLoadingBeforeSuffix ? null : d, this.loading !== void 0 ? c(bs, {
      clsPrefix: n,
      loading: this.loading,
      showArrow: !1,
      showClear: !1,
      style: this.cssVars
    }) : null, this.internalLoadingBeforeSuffix ? d : null, this.showCount && this.type !== "textarea" ? c(Da, null, {
      default: (u) => {
        var h;
        const {
          renderCount: b
        } = this;
        return b ? b(u) : (h = s.count) === null || h === void 0 ? void 0 : h.call(s, u);
      }
    }) : null, this.mergedShowPasswordOn && this.type === "password" ? c("div", {
      class: `${n}-input__eye`,
      onMousedown: this.handlePasswordToggleMousedown,
      onClick: this.handlePasswordToggleClick
    }, this.passwordVisible ? Et(s["password-visible-icon"], () => [c(ct, {
      clsPrefix: n
    }, {
      default: () => c(Xf, null)
    })]) : Et(s["password-invisible-icon"], () => [c(ct, {
      clsPrefix: n
    }, {
      default: () => c(Yf, null)
    })])) : null]) : null)), this.pair ? c("span", {
      class: `${n}-input__separator`
    }, Et(s.separator, () => [this.separator])) : null, this.pair ? c("div", {
      class: `${n}-input-wrapper`
    }, c("div", {
      class: `${n}-input__input`
    }, c("input", {
      ref: "inputEl2Ref",
      type: this.type,
      class: `${n}-input__input-el`,
      tabindex: this.passivelyActivated && !this.activated ? -1 : void 0,
      placeholder: this.mergedPlaceholder[1],
      disabled: this.mergedDisabled,
      maxlength: l ? void 0 : this.maxlength,
      minlength: l ? void 0 : this.minlength,
      value: Array.isArray(this.mergedValue) ? this.mergedValue[1] : void 0,
      readonly: this.readonly,
      style: this.textDecorationStyle[1],
      onBlur: this.handleInputBlur,
      onFocus: (d) => {
        this.handleInputFocus(d, 1);
      },
      onInput: (d) => {
        this.handleInput(d, 1);
      },
      onChange: (d) => {
        this.handleChange(d, 1);
      }
    }), this.showPlaceholder2 ? c("div", {
      class: `${n}-input__placeholder`
    }, c("span", null, this.mergedPlaceholder[1])) : null), Ze(s.suffix, (d) => (this.clearable || d) && c("div", {
      class: `${n}-input__suffix`
    }, [this.clearable && c(Qo, {
      clsPrefix: n,
      show: this.showClearButton,
      onClear: this.handleClear
    }, {
      icon: () => {
        var u;
        return (u = s["clear-icon"]) === null || u === void 0 ? void 0 : u.call(s);
      },
      placeholder: () => {
        var u;
        return (u = s["clear-icon-placeholder"]) === null || u === void 0 ? void 0 : u.call(s);
      }
    }), d]))) : null, this.mergedBordered ? c("div", {
      class: `${n}-input__border`
    }) : null, this.mergedBordered ? c("div", {
      class: `${n}-input__state-border`
    }) : null, this.showCount && i === "textarea" ? c(Da, null, {
      default: (d) => {
        var u;
        const {
          renderCount: h
        } = this;
        return h ? h(d) : (u = s.count) === null || u === void 0 ? void 0 : u.call(s, d);
      }
    }) : null);
  }
});
function Qr(e) {
  return e.type === "group";
}
function ys(e) {
  return e.type === "ignored";
}
function Ao(e, t) {
  try {
    return !!(1 + t.toString().toLowerCase().indexOf(e.trim().toLowerCase()));
  } catch (n) {
    return !1;
  }
}
function ws(e, t) {
  return {
    getIsGroup: Qr,
    getIgnored: ys,
    getKey(r) {
      return Qr(r) ? r.name || r.key || "key-required" : r[e];
    },
    getChildren(r) {
      return r[t];
    }
  };
}
function wp(e, t, n, r) {
  if (!t) return e;
  function o(i) {
    if (!Array.isArray(i)) return [];
    const l = [];
    for (const a of i)
      if (Qr(a)) {
        const s = o(a[r]);
        s.length && l.push(Object.assign({}, a, {
          [r]: s
        }));
      } else {
        if (ys(a))
          continue;
        t(n, a) && l.push(a);
      }
    return l;
  }
  return o(e);
}
function Cp(e, t, n) {
  const r = /* @__PURE__ */ new Map();
  return e.forEach((o) => {
    Qr(o) ? o[n].forEach((i) => {
      r.set(i[t], i);
    }) : r.set(o[t], o);
  }), r;
}
function gn(e) {
  return Ke(e, [255, 255, 255, 0.16]);
}
function Hr(e) {
  return Ke(e, [0, 0, 0, 0.12]);
}
const Sp = "n-button-group", kp = {
  paddingTiny: "0 6px",
  paddingSmall: "0 10px",
  paddingMedium: "0 14px",
  paddingLarge: "0 18px",
  paddingRoundTiny: "0 10px",
  paddingRoundSmall: "0 14px",
  paddingRoundMedium: "0 18px",
  paddingRoundLarge: "0 22px",
  iconMarginTiny: "6px",
  iconMarginSmall: "6px",
  iconMarginMedium: "6px",
  iconMarginLarge: "6px",
  iconSizeTiny: "14px",
  iconSizeSmall: "18px",
  iconSizeMedium: "18px",
  iconSizeLarge: "20px",
  rippleDuration: ".6s"
};
function Rp(e) {
  const {
    heightTiny: t,
    heightSmall: n,
    heightMedium: r,
    heightLarge: o,
    borderRadius: i,
    fontSizeTiny: l,
    fontSizeSmall: a,
    fontSizeMedium: s,
    fontSizeLarge: d,
    opacityDisabled: u,
    textColor2: h,
    textColor3: b,
    primaryColorHover: m,
    primaryColorPressed: f,
    borderColor: p,
    primaryColor: v,
    baseColor: g,
    infoColor: y,
    infoColorHover: S,
    infoColorPressed: w,
    successColor: C,
    successColorHover: k,
    successColorPressed: x,
    warningColor: z,
    warningColorHover: $,
    warningColorPressed: M,
    errorColor: V,
    errorColorHover: O,
    errorColorPressed: E,
    fontWeight: I,
    buttonColor2: F,
    buttonColor2Hover: N,
    buttonColor2Pressed: W,
    fontWeightStrong: X
  } = e;
  return Object.assign(Object.assign({}, kp), {
    heightTiny: t,
    heightSmall: n,
    heightMedium: r,
    heightLarge: o,
    borderRadiusTiny: i,
    borderRadiusSmall: i,
    borderRadiusMedium: i,
    borderRadiusLarge: i,
    fontSizeTiny: l,
    fontSizeSmall: a,
    fontSizeMedium: s,
    fontSizeLarge: d,
    opacityDisabled: u,
    // secondary
    colorOpacitySecondary: "0.16",
    colorOpacitySecondaryHover: "0.22",
    colorOpacitySecondaryPressed: "0.28",
    colorSecondary: F,
    colorSecondaryHover: N,
    colorSecondaryPressed: W,
    // tertiary
    colorTertiary: F,
    colorTertiaryHover: N,
    colorTertiaryPressed: W,
    // quaternary
    colorQuaternary: "#0000",
    colorQuaternaryHover: N,
    colorQuaternaryPressed: W,
    // default type
    color: "#0000",
    colorHover: "#0000",
    colorPressed: "#0000",
    colorFocus: "#0000",
    colorDisabled: "#0000",
    textColor: h,
    textColorTertiary: b,
    textColorHover: m,
    textColorPressed: f,
    textColorFocus: m,
    textColorDisabled: h,
    textColorText: h,
    textColorTextHover: m,
    textColorTextPressed: f,
    textColorTextFocus: m,
    textColorTextDisabled: h,
    textColorGhost: h,
    textColorGhostHover: m,
    textColorGhostPressed: f,
    textColorGhostFocus: m,
    textColorGhostDisabled: h,
    border: `1px solid ${p}`,
    borderHover: `1px solid ${m}`,
    borderPressed: `1px solid ${f}`,
    borderFocus: `1px solid ${m}`,
    borderDisabled: `1px solid ${p}`,
    rippleColor: v,
    // primary
    colorPrimary: v,
    colorHoverPrimary: m,
    colorPressedPrimary: f,
    colorFocusPrimary: m,
    colorDisabledPrimary: v,
    textColorPrimary: g,
    textColorHoverPrimary: g,
    textColorPressedPrimary: g,
    textColorFocusPrimary: g,
    textColorDisabledPrimary: g,
    textColorTextPrimary: v,
    textColorTextHoverPrimary: m,
    textColorTextPressedPrimary: f,
    textColorTextFocusPrimary: m,
    textColorTextDisabledPrimary: h,
    textColorGhostPrimary: v,
    textColorGhostHoverPrimary: m,
    textColorGhostPressedPrimary: f,
    textColorGhostFocusPrimary: m,
    textColorGhostDisabledPrimary: v,
    borderPrimary: `1px solid ${v}`,
    borderHoverPrimary: `1px solid ${m}`,
    borderPressedPrimary: `1px solid ${f}`,
    borderFocusPrimary: `1px solid ${m}`,
    borderDisabledPrimary: `1px solid ${v}`,
    rippleColorPrimary: v,
    // info
    colorInfo: y,
    colorHoverInfo: S,
    colorPressedInfo: w,
    colorFocusInfo: S,
    colorDisabledInfo: y,
    textColorInfo: g,
    textColorHoverInfo: g,
    textColorPressedInfo: g,
    textColorFocusInfo: g,
    textColorDisabledInfo: g,
    textColorTextInfo: y,
    textColorTextHoverInfo: S,
    textColorTextPressedInfo: w,
    textColorTextFocusInfo: S,
    textColorTextDisabledInfo: h,
    textColorGhostInfo: y,
    textColorGhostHoverInfo: S,
    textColorGhostPressedInfo: w,
    textColorGhostFocusInfo: S,
    textColorGhostDisabledInfo: y,
    borderInfo: `1px solid ${y}`,
    borderHoverInfo: `1px solid ${S}`,
    borderPressedInfo: `1px solid ${w}`,
    borderFocusInfo: `1px solid ${S}`,
    borderDisabledInfo: `1px solid ${y}`,
    rippleColorInfo: y,
    // success
    colorSuccess: C,
    colorHoverSuccess: k,
    colorPressedSuccess: x,
    colorFocusSuccess: k,
    colorDisabledSuccess: C,
    textColorSuccess: g,
    textColorHoverSuccess: g,
    textColorPressedSuccess: g,
    textColorFocusSuccess: g,
    textColorDisabledSuccess: g,
    textColorTextSuccess: C,
    textColorTextHoverSuccess: k,
    textColorTextPressedSuccess: x,
    textColorTextFocusSuccess: k,
    textColorTextDisabledSuccess: h,
    textColorGhostSuccess: C,
    textColorGhostHoverSuccess: k,
    textColorGhostPressedSuccess: x,
    textColorGhostFocusSuccess: k,
    textColorGhostDisabledSuccess: C,
    borderSuccess: `1px solid ${C}`,
    borderHoverSuccess: `1px solid ${k}`,
    borderPressedSuccess: `1px solid ${x}`,
    borderFocusSuccess: `1px solid ${k}`,
    borderDisabledSuccess: `1px solid ${C}`,
    rippleColorSuccess: C,
    // warning
    colorWarning: z,
    colorHoverWarning: $,
    colorPressedWarning: M,
    colorFocusWarning: $,
    colorDisabledWarning: z,
    textColorWarning: g,
    textColorHoverWarning: g,
    textColorPressedWarning: g,
    textColorFocusWarning: g,
    textColorDisabledWarning: g,
    textColorTextWarning: z,
    textColorTextHoverWarning: $,
    textColorTextPressedWarning: M,
    textColorTextFocusWarning: $,
    textColorTextDisabledWarning: h,
    textColorGhostWarning: z,
    textColorGhostHoverWarning: $,
    textColorGhostPressedWarning: M,
    textColorGhostFocusWarning: $,
    textColorGhostDisabledWarning: z,
    borderWarning: `1px solid ${z}`,
    borderHoverWarning: `1px solid ${$}`,
    borderPressedWarning: `1px solid ${M}`,
    borderFocusWarning: `1px solid ${$}`,
    borderDisabledWarning: `1px solid ${z}`,
    rippleColorWarning: z,
    // error
    colorError: V,
    colorHoverError: O,
    colorPressedError: E,
    colorFocusError: O,
    colorDisabledError: V,
    textColorError: g,
    textColorHoverError: g,
    textColorPressedError: g,
    textColorFocusError: g,
    textColorDisabledError: g,
    textColorTextError: V,
    textColorTextHoverError: O,
    textColorTextPressedError: E,
    textColorTextFocusError: O,
    textColorTextDisabledError: h,
    textColorGhostError: V,
    textColorGhostHoverError: O,
    textColorGhostPressedError: E,
    textColorGhostFocusError: O,
    textColorGhostDisabledError: V,
    borderError: `1px solid ${V}`,
    borderHoverError: `1px solid ${O}`,
    borderPressedError: `1px solid ${E}`,
    borderFocusError: `1px solid ${O}`,
    borderDisabledError: `1px solid ${V}`,
    rippleColorError: V,
    waveOpacity: "0.6",
    fontWeight: I,
    fontWeightStrong: X
  });
}
const so = {
  name: "Button",
  common: rt,
  self: Rp
}, Pp = B([R("button", `
 margin: 0;
 font-weight: var(--n-font-weight);
 line-height: 1;
 font-family: inherit;
 padding: var(--n-padding);
 height: var(--n-height);
 font-size: var(--n-font-size);
 border-radius: var(--n-border-radius);
 color: var(--n-text-color);
 background-color: var(--n-color);
 width: var(--n-width);
 white-space: nowrap;
 outline: none;
 position: relative;
 z-index: auto;
 border: none;
 display: inline-flex;
 flex-wrap: nowrap;
 flex-shrink: 0;
 align-items: center;
 justify-content: center;
 user-select: none;
 -webkit-user-select: none;
 text-align: center;
 cursor: pointer;
 text-decoration: none;
 transition:
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 opacity .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 `, [_("color", [A("border", {
  borderColor: "var(--n-border-color)"
}), _("disabled", [A("border", {
  borderColor: "var(--n-border-color-disabled)"
})]), Je("disabled", [B("&:focus", [A("state-border", {
  borderColor: "var(--n-border-color-focus)"
})]), B("&:hover", [A("state-border", {
  borderColor: "var(--n-border-color-hover)"
})]), B("&:active", [A("state-border", {
  borderColor: "var(--n-border-color-pressed)"
})]), _("pressed", [A("state-border", {
  borderColor: "var(--n-border-color-pressed)"
})])])]), _("disabled", {
  backgroundColor: "var(--n-color-disabled)",
  color: "var(--n-text-color-disabled)"
}, [A("border", {
  border: "var(--n-border-disabled)"
})]), Je("disabled", [B("&:focus", {
  backgroundColor: "var(--n-color-focus)",
  color: "var(--n-text-color-focus)"
}, [A("state-border", {
  border: "var(--n-border-focus)"
})]), B("&:hover", {
  backgroundColor: "var(--n-color-hover)",
  color: "var(--n-text-color-hover)"
}, [A("state-border", {
  border: "var(--n-border-hover)"
})]), B("&:active", {
  backgroundColor: "var(--n-color-pressed)",
  color: "var(--n-text-color-pressed)"
}, [A("state-border", {
  border: "var(--n-border-pressed)"
})]), _("pressed", {
  backgroundColor: "var(--n-color-pressed)",
  color: "var(--n-text-color-pressed)"
}, [A("state-border", {
  border: "var(--n-border-pressed)"
})])]), _("loading", "cursor: wait;"), R("base-wave", `
 pointer-events: none;
 top: 0;
 right: 0;
 bottom: 0;
 left: 0;
 animation-iteration-count: 1;
 animation-duration: var(--n-ripple-duration);
 animation-timing-function: var(--n-bezier-ease-out), var(--n-bezier-ease-out);
 `, [_("active", {
  zIndex: 1,
  animationName: "button-wave-spread, button-wave-opacity"
})]), qn && "MozBoxSizing" in document.createElement("div").style ? B("&::moz-focus-inner", {
  border: 0
}) : null, A("border, state-border", `
 position: absolute;
 left: 0;
 top: 0;
 right: 0;
 bottom: 0;
 border-radius: inherit;
 transition: border-color .3s var(--n-bezier);
 pointer-events: none;
 `), A("border", {
  border: "var(--n-border)"
}), A("state-border", {
  border: "var(--n-border)",
  borderColor: "#0000",
  zIndex: 1
}), A("icon", `
 margin: var(--n-icon-margin);
 margin-left: 0;
 height: var(--n-icon-size);
 width: var(--n-icon-size);
 max-width: var(--n-icon-size);
 font-size: var(--n-icon-size);
 position: relative;
 flex-shrink: 0;
 `, [R("icon-slot", `
 height: var(--n-icon-size);
 width: var(--n-icon-size);
 position: absolute;
 left: 0;
 top: 50%;
 transform: translateY(-50%);
 display: flex;
 align-items: center;
 justify-content: center;
 `, [Wt({
  top: "50%",
  originalTransform: "translateY(-50%)"
})]), lp()]), A("content", `
 display: flex;
 align-items: center;
 flex-wrap: nowrap;
 min-width: 0;
 `, [B("~", [A("icon", {
  margin: "var(--n-icon-margin)",
  marginRight: 0
})])]), _("block", `
 display: flex;
 width: 100%;
 `), _("dashed", [A("border, state-border", {
  borderStyle: "dashed !important"
})]), _("disabled", {
  cursor: "not-allowed",
  opacity: "var(--n-opacity-disabled)"
})]), B("@keyframes button-wave-spread", {
  from: {
    boxShadow: "0 0 0.5px 0 var(--n-ripple-color)"
  },
  to: {
    // don't use exact 5px since chrome will display the animation with glitches
    boxShadow: "0 0 0.5px 4.5px var(--n-ripple-color)"
  }
}), B("@keyframes button-wave-opacity", {
  from: {
    opacity: "var(--n-wave-opacity)"
  },
  to: {
    opacity: 0
  }
})]), zp = Object.assign(Object.assign({}, we.props), {
  color: String,
  textColor: String,
  text: Boolean,
  block: Boolean,
  loading: Boolean,
  disabled: Boolean,
  circle: Boolean,
  size: String,
  ghost: Boolean,
  round: Boolean,
  secondary: Boolean,
  tertiary: Boolean,
  quaternary: Boolean,
  strong: Boolean,
  focusable: {
    type: Boolean,
    default: !0
  },
  keyboard: {
    type: Boolean,
    default: !0
  },
  tag: {
    type: String,
    default: "button"
  },
  type: {
    type: String,
    default: "default"
  },
  dashed: Boolean,
  renderIcon: Function,
  iconPlacement: {
    type: String,
    default: "left"
  },
  attrType: {
    type: String,
    default: "button"
  },
  bordered: {
    type: Boolean,
    default: !0
  },
  onClick: [Function, Array],
  nativeFocusBehavior: {
    type: Boolean,
    default: !ms
  }
}), Nn = ie({
  name: "Button",
  props: zp,
  slots: Object,
  setup(e) {
    const t = L(null), n = L(null), r = L(!1), o = Ue(() => !e.quaternary && !e.tertiary && !e.secondary && !e.text && (!e.color || e.ghost || e.dashed) && e.bordered), i = ke(Sp, {}), {
      mergedSizeRef: l
    } = Tn({}, {
      defaultSize: "medium",
      mergedSize: (w) => {
        const {
          size: C
        } = e;
        if (C) return C;
        const {
          size: k
        } = i;
        if (k) return k;
        const {
          mergedSize: x
        } = w || {};
        return x ? x.value : "medium";
      }
    }), a = T(() => e.focusable && !e.disabled), s = (w) => {
      var C;
      a.value || w.preventDefault(), !e.nativeFocusBehavior && (w.preventDefault(), !e.disabled && a.value && ((C = t.value) === null || C === void 0 || C.focus({
        preventScroll: !0
      })));
    }, d = (w) => {
      var C;
      if (!e.disabled && !e.loading) {
        const {
          onClick: k
        } = e;
        k && oe(k, w), e.text || (C = n.value) === null || C === void 0 || C.play();
      }
    }, u = (w) => {
      switch (w.key) {
        case "Enter":
          if (!e.keyboard)
            return;
          r.value = !1;
      }
    }, h = (w) => {
      switch (w.key) {
        case "Enter":
          if (!e.keyboard || e.loading) {
            w.preventDefault();
            return;
          }
          r.value = !0;
      }
    }, b = () => {
      r.value = !1;
    }, {
      inlineThemeDisabled: m,
      mergedClsPrefixRef: f,
      mergedRtlRef: p
    } = _e(e), v = we("Button", "-button", Pp, so, e, f), g = $t("Button", p, f), y = T(() => {
      const w = v.value, {
        common: {
          cubicBezierEaseInOut: C,
          cubicBezierEaseOut: k
        },
        self: x
      } = w, {
        rippleDuration: z,
        opacityDisabled: $,
        fontWeight: M,
        fontWeightStrong: V
      } = x, O = l.value, {
        dashed: E,
        type: I,
        ghost: F,
        text: N,
        color: W,
        round: X,
        circle: re,
        textColor: Q,
        secondary: G,
        tertiary: j,
        quaternary: q,
        strong: Z
      } = e, le = {
        "--n-font-weight": Z ? V : M
      };
      let ue = {
        "--n-color": "initial",
        "--n-color-hover": "initial",
        "--n-color-pressed": "initial",
        "--n-color-focus": "initial",
        "--n-color-disabled": "initial",
        "--n-ripple-color": "initial",
        "--n-text-color": "initial",
        "--n-text-color-hover": "initial",
        "--n-text-color-pressed": "initial",
        "--n-text-color-focus": "initial",
        "--n-text-color-disabled": "initial"
      };
      const be = I === "tertiary", Re = I === "default", K = be ? "default" : I;
      if (N) {
        const U = Q || W;
        ue = {
          "--n-color": "#0000",
          "--n-color-hover": "#0000",
          "--n-color-pressed": "#0000",
          "--n-color-focus": "#0000",
          "--n-color-disabled": "#0000",
          "--n-ripple-color": "#0000",
          "--n-text-color": U || x[J("textColorText", K)],
          "--n-text-color-hover": U ? gn(U) : x[J("textColorTextHover", K)],
          "--n-text-color-pressed": U ? Hr(U) : x[J("textColorTextPressed", K)],
          "--n-text-color-focus": U ? gn(U) : x[J("textColorTextHover", K)],
          "--n-text-color-disabled": U || x[J("textColorTextDisabled", K)]
        };
      } else if (F || E) {
        const U = Q || W;
        ue = {
          "--n-color": "#0000",
          "--n-color-hover": "#0000",
          "--n-color-pressed": "#0000",
          "--n-color-focus": "#0000",
          "--n-color-disabled": "#0000",
          "--n-ripple-color": W || x[J("rippleColor", K)],
          "--n-text-color": U || x[J("textColorGhost", K)],
          "--n-text-color-hover": U ? gn(U) : x[J("textColorGhostHover", K)],
          "--n-text-color-pressed": U ? Hr(U) : x[J("textColorGhostPressed", K)],
          "--n-text-color-focus": U ? gn(U) : x[J("textColorGhostHover", K)],
          "--n-text-color-disabled": U || x[J("textColorGhostDisabled", K)]
        };
      } else if (G) {
        const U = Re ? x.textColor : be ? x.textColorTertiary : x[J("color", K)], Y = W || U, de = I !== "default" && I !== "tertiary";
        ue = {
          "--n-color": de ? Oe(Y, {
            alpha: Number(x.colorOpacitySecondary)
          }) : x.colorSecondary,
          "--n-color-hover": de ? Oe(Y, {
            alpha: Number(x.colorOpacitySecondaryHover)
          }) : x.colorSecondaryHover,
          "--n-color-pressed": de ? Oe(Y, {
            alpha: Number(x.colorOpacitySecondaryPressed)
          }) : x.colorSecondaryPressed,
          "--n-color-focus": de ? Oe(Y, {
            alpha: Number(x.colorOpacitySecondaryHover)
          }) : x.colorSecondaryHover,
          "--n-color-disabled": x.colorSecondary,
          "--n-ripple-color": "#0000",
          "--n-text-color": Y,
          "--n-text-color-hover": Y,
          "--n-text-color-pressed": Y,
          "--n-text-color-focus": Y,
          "--n-text-color-disabled": Y
        };
      } else if (j || q) {
        const U = Re ? x.textColor : be ? x.textColorTertiary : x[J("color", K)], Y = W || U;
        j ? (ue["--n-color"] = x.colorTertiary, ue["--n-color-hover"] = x.colorTertiaryHover, ue["--n-color-pressed"] = x.colorTertiaryPressed, ue["--n-color-focus"] = x.colorSecondaryHover, ue["--n-color-disabled"] = x.colorTertiary) : (ue["--n-color"] = x.colorQuaternary, ue["--n-color-hover"] = x.colorQuaternaryHover, ue["--n-color-pressed"] = x.colorQuaternaryPressed, ue["--n-color-focus"] = x.colorQuaternaryHover, ue["--n-color-disabled"] = x.colorQuaternary), ue["--n-ripple-color"] = "#0000", ue["--n-text-color"] = Y, ue["--n-text-color-hover"] = Y, ue["--n-text-color-pressed"] = Y, ue["--n-text-color-focus"] = Y, ue["--n-text-color-disabled"] = Y;
      } else
        ue = {
          "--n-color": W || x[J("color", K)],
          "--n-color-hover": W ? gn(W) : x[J("colorHover", K)],
          "--n-color-pressed": W ? Hr(W) : x[J("colorPressed", K)],
          "--n-color-focus": W ? gn(W) : x[J("colorFocus", K)],
          "--n-color-disabled": W || x[J("colorDisabled", K)],
          "--n-ripple-color": W || x[J("rippleColor", K)],
          "--n-text-color": Q || (W ? x.textColorPrimary : be ? x.textColorTertiary : x[J("textColor", K)]),
          "--n-text-color-hover": Q || (W ? x.textColorHoverPrimary : x[J("textColorHover", K)]),
          "--n-text-color-pressed": Q || (W ? x.textColorPressedPrimary : x[J("textColorPressed", K)]),
          "--n-text-color-focus": Q || (W ? x.textColorFocusPrimary : x[J("textColorFocus", K)]),
          "--n-text-color-disabled": Q || (W ? x.textColorDisabledPrimary : x[J("textColorDisabled", K)])
        };
      let fe = {
        "--n-border": "initial",
        "--n-border-hover": "initial",
        "--n-border-pressed": "initial",
        "--n-border-focus": "initial",
        "--n-border-disabled": "initial"
      };
      N ? fe = {
        "--n-border": "none",
        "--n-border-hover": "none",
        "--n-border-pressed": "none",
        "--n-border-focus": "none",
        "--n-border-disabled": "none"
      } : fe = {
        "--n-border": x[J("border", K)],
        "--n-border-hover": x[J("borderHover", K)],
        "--n-border-pressed": x[J("borderPressed", K)],
        "--n-border-focus": x[J("borderFocus", K)],
        "--n-border-disabled": x[J("borderDisabled", K)]
      };
      const {
        [J("height", O)]: Me,
        [J("fontSize", O)]: ye,
        [J("padding", O)]: Fe,
        [J("paddingRound", O)]: Te,
        [J("iconSize", O)]: Qe,
        [J("borderRadius", O)]: qe,
        [J("iconMargin", O)]: tt,
        waveOpacity: et
      } = x, me = {
        "--n-width": re && !N ? Me : "initial",
        "--n-height": N ? "initial" : Me,
        "--n-font-size": ye,
        "--n-padding": re || N ? "initial" : X ? Te : Fe,
        "--n-icon-size": Qe,
        "--n-icon-margin": tt,
        "--n-border-radius": N ? "initial" : re || X ? Me : qe
      };
      return Object.assign(Object.assign(Object.assign(Object.assign({
        "--n-bezier": C,
        "--n-bezier-ease-out": k,
        "--n-ripple-duration": z,
        "--n-opacity-disabled": $,
        "--n-wave-opacity": et
      }, le), ue), fe), me);
    }), S = m ? it("button", T(() => {
      let w = "";
      const {
        dashed: C,
        type: k,
        ghost: x,
        text: z,
        color: $,
        round: M,
        circle: V,
        textColor: O,
        secondary: E,
        tertiary: I,
        quaternary: F,
        strong: N
      } = e;
      C && (w += "a"), x && (w += "b"), z && (w += "c"), M && (w += "d"), V && (w += "e"), E && (w += "f"), I && (w += "g"), F && (w += "h"), N && (w += "i"), $ && (w += `j${Yr($)}`), O && (w += `k${Yr(O)}`);
      const {
        value: W
      } = l;
      return w += `l${W[0]}`, w += `m${k[0]}`, w;
    }), y, e) : void 0;
    return {
      selfElRef: t,
      waveElRef: n,
      mergedClsPrefix: f,
      mergedFocusable: a,
      mergedSize: l,
      showBorder: o,
      enterPressed: r,
      rtlEnabled: g,
      handleMousedown: s,
      handleKeydown: h,
      handleBlur: b,
      handleKeyup: u,
      handleClick: d,
      customColorCssVars: T(() => {
        const {
          color: w
        } = e;
        if (!w) return null;
        const C = gn(w);
        return {
          "--n-border-color": w,
          "--n-border-color-hover": C,
          "--n-border-color-pressed": Hr(w),
          "--n-border-color-focus": C,
          "--n-border-color-disabled": w
        };
      }),
      cssVars: m ? void 0 : y,
      themeClass: S == null ? void 0 : S.themeClass,
      onRender: S == null ? void 0 : S.onRender
    };
  },
  render() {
    const {
      mergedClsPrefix: e,
      tag: t,
      onRender: n
    } = this;
    n == null || n();
    const r = Ze(this.$slots.default, (o) => o && c("span", {
      class: `${e}-button__content`
    }, o));
    return c(t, {
      ref: "selfElRef",
      class: [
        this.themeClass,
        `${e}-button`,
        `${e}-button--${this.type}-type`,
        `${e}-button--${this.mergedSize}-type`,
        this.rtlEnabled && `${e}-button--rtl`,
        this.disabled && `${e}-button--disabled`,
        this.block && `${e}-button--block`,
        this.enterPressed && `${e}-button--pressed`,
        !this.text && this.dashed && `${e}-button--dashed`,
        this.color && `${e}-button--color`,
        this.secondary && `${e}-button--secondary`,
        this.loading && `${e}-button--loading`,
        this.ghost && `${e}-button--ghost`
        // required for button group border collapse
      ],
      tabindex: this.mergedFocusable ? 0 : -1,
      type: this.attrType,
      style: this.cssVars,
      disabled: this.disabled,
      onClick: this.handleClick,
      onBlur: this.handleBlur,
      onMousedown: this.handleMousedown,
      onKeyup: this.handleKeyup,
      onKeydown: this.handleKeydown
    }, this.iconPlacement === "right" && r, c(is, {
      width: !0
    }, {
      default: () => Ze(this.$slots.icon, (o) => (this.loading || this.renderIcon || o) && c("span", {
        class: `${e}-button__icon`,
        style: {
          margin: Xo(this.$slots.default) ? "0" : ""
        }
      }, c(Gn, null, {
        default: () => this.loading ? c(Yn, {
          clsPrefix: e,
          key: "loading",
          class: `${e}-icon-slot`,
          strokeWidth: 20
        }) : c("div", {
          key: "icon",
          class: `${e}-icon-slot`,
          role: "none"
        }, this.renderIcon ? this.renderIcon() : o)
      })))
    }), this.iconPlacement === "left" && r, this.text ? null : c(dp, {
      ref: "waveElRef",
      clsPrefix: e
    }), this.showBorder ? c("div", {
      "aria-hidden": !0,
      class: `${e}-button__border`,
      style: this.customColorCssVars
    }) : null, this.showBorder ? c("div", {
      "aria-hidden": !0,
      class: `${e}-button__state-border`,
      style: this.customColorCssVars
    }) : null);
  }
}), $p = {
  paddingSmall: "12px 16px 12px",
  paddingMedium: "19px 24px 20px",
  paddingLarge: "23px 32px 24px",
  paddingHuge: "27px 40px 28px",
  titleFontSizeSmall: "16px",
  titleFontSizeMedium: "18px",
  titleFontSizeLarge: "18px",
  titleFontSizeHuge: "18px",
  closeIconSize: "18px",
  closeSize: "22px"
};
function Tp(e) {
  const {
    primaryColor: t,
    borderRadius: n,
    lineHeight: r,
    fontSize: o,
    cardColor: i,
    textColor2: l,
    textColor1: a,
    dividerColor: s,
    fontWeightStrong: d,
    closeIconColor: u,
    closeIconColorHover: h,
    closeIconColorPressed: b,
    closeColorHover: m,
    closeColorPressed: f,
    modalColor: p,
    boxShadow1: v,
    popoverColor: g,
    actionColor: y
  } = e;
  return Object.assign(Object.assign({}, $p), {
    lineHeight: r,
    color: i,
    colorModal: p,
    colorPopover: g,
    colorTarget: t,
    colorEmbedded: y,
    colorEmbeddedModal: y,
    colorEmbeddedPopover: y,
    textColor: l,
    titleTextColor: a,
    borderColor: s,
    actionColor: y,
    titleFontWeight: d,
    closeColorHover: m,
    closeColorPressed: f,
    closeBorderRadius: n,
    closeIconColor: u,
    closeIconColorHover: h,
    closeIconColorPressed: b,
    fontSizeSmall: o,
    fontSizeMedium: o,
    fontSizeLarge: o,
    fontSizeHuge: o,
    boxShadow: v,
    borderRadius: n
  });
}
const Cs = {
  name: "Card",
  common: rt,
  self: Tp
}, Mp = B([R("card", `
 font-size: var(--n-font-size);
 line-height: var(--n-line-height);
 display: flex;
 flex-direction: column;
 width: 100%;
 box-sizing: border-box;
 position: relative;
 border-radius: var(--n-border-radius);
 background-color: var(--n-color);
 color: var(--n-text-color);
 word-break: break-word;
 transition: 
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 `, [kl({
  background: "var(--n-color-modal)"
}), _("hoverable", [B("&:hover", "box-shadow: var(--n-box-shadow);")]), _("content-segmented", [B(">", [A("content", {
  paddingTop: "var(--n-padding-bottom)"
})])]), _("content-soft-segmented", [B(">", [A("content", `
 margin: 0 var(--n-padding-left);
 padding: var(--n-padding-bottom) 0;
 `)])]), _("footer-segmented", [B(">", [A("footer", {
  paddingTop: "var(--n-padding-bottom)"
})])]), _("footer-soft-segmented", [B(">", [A("footer", `
 padding: var(--n-padding-bottom) 0;
 margin: 0 var(--n-padding-left);
 `)])]), B(">", [R("card-header", `
 box-sizing: border-box;
 display: flex;
 align-items: center;
 font-size: var(--n-title-font-size);
 padding:
 var(--n-padding-top)
 var(--n-padding-left)
 var(--n-padding-bottom)
 var(--n-padding-left);
 `, [A("main", `
 font-weight: var(--n-title-font-weight);
 transition: color .3s var(--n-bezier);
 flex: 1;
 min-width: 0;
 color: var(--n-title-text-color);
 `), A("extra", `
 display: flex;
 align-items: center;
 font-size: var(--n-font-size);
 font-weight: 400;
 transition: color .3s var(--n-bezier);
 color: var(--n-text-color);
 `), A("close", `
 margin: 0 0 0 8px;
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 `)]), A("action", `
 box-sizing: border-box;
 transition:
 background-color .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 background-clip: padding-box;
 background-color: var(--n-action-color);
 `), A("content", "flex: 1; min-width: 0;"), A("content, footer", `
 box-sizing: border-box;
 padding: 0 var(--n-padding-left) var(--n-padding-bottom) var(--n-padding-left);
 font-size: var(--n-font-size);
 `, [B("&:first-child", {
  paddingTop: "var(--n-padding-bottom)"
})]), A("action", `
 background-color: var(--n-action-color);
 padding: var(--n-padding-bottom) var(--n-padding-left);
 border-bottom-left-radius: var(--n-border-radius);
 border-bottom-right-radius: var(--n-border-radius);
 `)]), R("card-cover", `
 overflow: hidden;
 width: 100%;
 border-radius: var(--n-border-radius) var(--n-border-radius) 0 0;
 `, [B("img", `
 display: block;
 width: 100%;
 `)]), _("bordered", `
 border: 1px solid var(--n-border-color);
 `, [B("&:target", "border-color: var(--n-color-target);")]), _("action-segmented", [B(">", [A("action", [B("&:not(:first-child)", {
  borderTop: "1px solid var(--n-border-color)"
})])])]), _("content-segmented, content-soft-segmented", [B(">", [A("content", {
  transition: "border-color 0.3s var(--n-bezier)"
}, [B("&:not(:first-child)", {
  borderTop: "1px solid var(--n-border-color)"
})])])]), _("footer-segmented, footer-soft-segmented", [B(">", [A("footer", {
  transition: "border-color 0.3s var(--n-bezier)"
}, [B("&:not(:first-child)", {
  borderTop: "1px solid var(--n-border-color)"
})])])]), _("embedded", `
 background-color: var(--n-color-embedded);
 `)]), no(R("card", `
 background: var(--n-color-modal);
 `, [_("embedded", `
 background-color: var(--n-color-embedded-modal);
 `)])), hi(R("card", `
 background: var(--n-color-popover);
 `, [_("embedded", `
 background-color: var(--n-color-embedded-popover);
 `)]))]), Ti = {
  title: [String, Function],
  contentClass: String,
  contentStyle: [Object, String],
  headerClass: String,
  headerStyle: [Object, String],
  headerExtraClass: String,
  headerExtraStyle: [Object, String],
  footerClass: String,
  footerStyle: [Object, String],
  embedded: Boolean,
  segmented: {
    type: [Boolean, Object],
    default: !1
  },
  size: {
    type: String,
    default: "medium"
  },
  bordered: {
    type: Boolean,
    default: !0
  },
  closable: Boolean,
  hoverable: Boolean,
  role: String,
  onClose: [Function, Array],
  tag: {
    type: String,
    default: "div"
  },
  cover: Function,
  content: [String, Function],
  footer: Function,
  action: Function,
  headerExtra: Function
}, Fp = Rn(Ti), Op = Object.assign(Object.assign({}, we.props), Ti), Bp = ie({
  name: "Card",
  props: Op,
  slots: Object,
  setup(e) {
    const t = () => {
      const {
        onClose: d
      } = e;
      d && oe(d);
    }, {
      inlineThemeDisabled: n,
      mergedClsPrefixRef: r,
      mergedRtlRef: o
    } = _e(e), i = we("Card", "-card", Mp, Cs, e, r), l = $t("Card", o, r), a = T(() => {
      const {
        size: d
      } = e, {
        self: {
          color: u,
          colorModal: h,
          colorTarget: b,
          textColor: m,
          titleTextColor: f,
          titleFontWeight: p,
          borderColor: v,
          actionColor: g,
          borderRadius: y,
          lineHeight: S,
          closeIconColor: w,
          closeIconColorHover: C,
          closeIconColorPressed: k,
          closeColorHover: x,
          closeColorPressed: z,
          closeBorderRadius: $,
          closeIconSize: M,
          closeSize: V,
          boxShadow: O,
          colorPopover: E,
          colorEmbedded: I,
          colorEmbeddedModal: F,
          colorEmbeddedPopover: N,
          [J("padding", d)]: W,
          [J("fontSize", d)]: X,
          [J("titleFontSize", d)]: re
        },
        common: {
          cubicBezierEaseInOut: Q
        }
      } = i.value, {
        top: G,
        left: j,
        bottom: q
      } = mt(W);
      return {
        "--n-bezier": Q,
        "--n-border-radius": y,
        "--n-color": u,
        "--n-color-modal": h,
        "--n-color-popover": E,
        "--n-color-embedded": I,
        "--n-color-embedded-modal": F,
        "--n-color-embedded-popover": N,
        "--n-color-target": b,
        "--n-text-color": m,
        "--n-line-height": S,
        "--n-action-color": g,
        "--n-title-text-color": f,
        "--n-title-font-weight": p,
        "--n-close-icon-color": w,
        "--n-close-icon-color-hover": C,
        "--n-close-icon-color-pressed": k,
        "--n-close-color-hover": x,
        "--n-close-color-pressed": z,
        "--n-border-color": v,
        "--n-box-shadow": O,
        // size
        "--n-padding-top": G,
        "--n-padding-bottom": q,
        "--n-padding-left": j,
        "--n-font-size": X,
        "--n-title-font-size": re,
        "--n-close-size": V,
        "--n-close-icon-size": M,
        "--n-close-border-radius": $
      };
    }), s = n ? it("card", T(() => e.size[0]), a, e) : void 0;
    return {
      rtlEnabled: l,
      mergedClsPrefix: r,
      mergedTheme: i,
      handleCloseClick: t,
      cssVars: n ? void 0 : a,
      themeClass: s == null ? void 0 : s.themeClass,
      onRender: s == null ? void 0 : s.onRender
    };
  },
  render() {
    const {
      segmented: e,
      bordered: t,
      hoverable: n,
      mergedClsPrefix: r,
      rtlEnabled: o,
      onRender: i,
      embedded: l,
      tag: a,
      $slots: s
    } = this;
    return i == null || i(), c(a, {
      class: [`${r}-card`, this.themeClass, l && `${r}-card--embedded`, {
        [`${r}-card--rtl`]: o,
        [`${r}-card--content${typeof e != "boolean" && e.content === "soft" ? "-soft" : ""}-segmented`]: e === !0 || e !== !1 && e.content,
        [`${r}-card--footer${typeof e != "boolean" && e.footer === "soft" ? "-soft" : ""}-segmented`]: e === !0 || e !== !1 && e.footer,
        [`${r}-card--action-segmented`]: e === !0 || e !== !1 && e.action,
        [`${r}-card--bordered`]: t,
        [`${r}-card--hoverable`]: n
      }],
      style: this.cssVars,
      role: this.role
    }, Ze(s.cover, (d) => {
      const u = this.cover ? jt([this.cover()]) : d;
      return u && c("div", {
        class: `${r}-card-cover`,
        role: "none"
      }, u);
    }), Ze(s.header, (d) => {
      const {
        title: u
      } = this, h = u ? jt(typeof u == "function" ? [u()] : [u]) : d;
      return h || this.closable ? c("div", {
        class: [`${r}-card-header`, this.headerClass],
        style: this.headerStyle,
        role: "heading"
      }, c("div", {
        class: `${r}-card-header__main`,
        role: "heading"
      }, h), Ze(s["header-extra"], (b) => {
        const m = this.headerExtra ? jt([this.headerExtra()]) : b;
        return m && c("div", {
          class: [`${r}-card-header__extra`, this.headerExtraClass],
          style: this.headerExtraStyle
        }, m);
      }), this.closable && c(Rr, {
        clsPrefix: r,
        class: `${r}-card-header__close`,
        onClick: this.handleCloseClick,
        absolute: !0
      })) : null;
    }), Ze(s.default, (d) => {
      const {
        content: u
      } = this, h = u ? jt(typeof u == "function" ? [u()] : [u]) : d;
      return h && c("div", {
        class: [`${r}-card__content`, this.contentClass],
        style: this.contentStyle,
        role: "none"
      }, h);
    }), Ze(s.footer, (d) => {
      const u = this.footer ? jt([this.footer()]) : d;
      return u && c("div", {
        class: [`${r}-card__footer`, this.footerClass],
        style: this.footerStyle,
        role: "none"
      }, u);
    }), Ze(s.action, (d) => {
      const u = this.action ? jt([this.action()]) : d;
      return u && c("div", {
        class: `${r}-card__action`,
        role: "none"
      }, u);
    }));
  }
}), Ep = {
  sizeSmall: "14px",
  sizeMedium: "16px",
  sizeLarge: "18px",
  labelPadding: "0 8px",
  labelFontWeight: "400"
};
function Ip(e) {
  const {
    baseColor: t,
    inputColorDisabled: n,
    cardColor: r,
    modalColor: o,
    popoverColor: i,
    textColorDisabled: l,
    borderColor: a,
    primaryColor: s,
    textColor2: d,
    fontSizeSmall: u,
    fontSizeMedium: h,
    fontSizeLarge: b,
    borderRadiusSmall: m,
    lineHeight: f
  } = e;
  return Object.assign(Object.assign({}, Ep), {
    labelLineHeight: f,
    fontSizeSmall: u,
    fontSizeMedium: h,
    fontSizeLarge: b,
    borderRadius: m,
    color: t,
    colorChecked: s,
    colorDisabled: n,
    colorDisabledChecked: n,
    colorTableHeader: r,
    colorTableHeaderModal: o,
    colorTableHeaderPopover: i,
    checkMarkColor: t,
    checkMarkColorDisabled: l,
    checkMarkColorDisabledChecked: l,
    border: `1px solid ${a}`,
    borderDisabled: `1px solid ${a}`,
    borderDisabledChecked: `1px solid ${a}`,
    borderChecked: `1px solid ${s}`,
    borderFocus: `1px solid ${s}`,
    boxShadowFocus: `0 0 0 2px ${Oe(s, {
      alpha: 0.3
    })}`,
    textColor: d,
    textColorDisabled: l
  });
}
const Ss = {
  name: "Checkbox",
  common: rt,
  self: Ip
}, ks = "n-checkbox-group", _p = {
  min: Number,
  max: Number,
  size: String,
  value: Array,
  defaultValue: {
    type: Array,
    default: null
  },
  disabled: {
    type: Boolean,
    default: void 0
  },
  "onUpdate:value": [Function, Array],
  onUpdateValue: [Function, Array],
  // deprecated
  onChange: [Function, Array]
}, Ap = ie({
  name: "CheckboxGroup",
  props: _p,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(e), n = Tn(e), {
      mergedSizeRef: r,
      mergedDisabledRef: o
    } = n, i = L(e.defaultValue), l = T(() => e.value), a = zt(l, i), s = T(() => {
      var h;
      return ((h = a.value) === null || h === void 0 ? void 0 : h.length) || 0;
    }), d = T(() => Array.isArray(a.value) ? new Set(a.value) : /* @__PURE__ */ new Set());
    function u(h, b) {
      const {
        nTriggerFormInput: m,
        nTriggerFormChange: f
      } = n, {
        onChange: p,
        "onUpdate:value": v,
        onUpdateValue: g
      } = e;
      if (Array.isArray(a.value)) {
        const y = Array.from(a.value), S = y.findIndex((w) => w === b);
        h ? ~S || (y.push(b), g && oe(g, y, {
          actionType: "check",
          value: b
        }), v && oe(v, y, {
          actionType: "check",
          value: b
        }), m(), f(), i.value = y, p && oe(p, y)) : ~S && (y.splice(S, 1), g && oe(g, y, {
          actionType: "uncheck",
          value: b
        }), v && oe(v, y, {
          actionType: "uncheck",
          value: b
        }), p && oe(p, y), i.value = y, m(), f());
      } else
        h ? (g && oe(g, [b], {
          actionType: "check",
          value: b
        }), v && oe(v, [b], {
          actionType: "check",
          value: b
        }), p && oe(p, [b]), i.value = [b], m(), f()) : (g && oe(g, [], {
          actionType: "uncheck",
          value: b
        }), v && oe(v, [], {
          actionType: "uncheck",
          value: b
        }), p && oe(p, []), i.value = [], m(), f());
    }
    return We(ks, {
      checkedCountRef: s,
      maxRef: ae(e, "max"),
      minRef: ae(e, "min"),
      valueSetRef: d,
      disabledRef: o,
      mergedSizeRef: r,
      toggleCheckbox: u
    }), {
      mergedClsPrefix: t
    };
  },
  render() {
    return c("div", {
      class: `${this.mergedClsPrefix}-checkbox-group`,
      role: "group"
    }, this.$slots);
  }
}), Lp = () => c("svg", {
  viewBox: "0 0 64 64",
  class: "check-icon"
}, c("path", {
  d: "M50.42,16.76L22.34,39.45l-8.1-11.46c-1.12-1.58-3.3-1.96-4.88-0.84c-1.58,1.12-1.95,3.3-0.84,4.88l10.26,14.51  c0.56,0.79,1.42,1.31,2.38,1.45c0.16,0.02,0.32,0.03,0.48,0.03c0.8,0,1.57-0.27,2.2-0.78l30.99-25.03c1.5-1.21,1.74-3.42,0.52-4.92  C54.13,15.78,51.93,15.55,50.42,16.76z"
})), Hp = () => c("svg", {
  viewBox: "0 0 100 100",
  class: "line-icon"
}, c("path", {
  d: "M80.2,55.5H21.4c-2.8,0-5.1-2.5-5.1-5.5l0,0c0-3,2.3-5.5,5.1-5.5h58.7c2.8,0,5.1,2.5,5.1,5.5l0,0C85.2,53.1,82.9,55.5,80.2,55.5z"
})), Dp = B([
  R("checkbox", `
 font-size: var(--n-font-size);
 outline: none;
 cursor: pointer;
 display: inline-flex;
 flex-wrap: nowrap;
 align-items: flex-start;
 word-break: break-word;
 line-height: var(--n-size);
 --n-merged-color-table: var(--n-color-table);
 `, [_("show-label", "line-height: var(--n-label-line-height);"), B("&:hover", [R("checkbox-box", [A("border", "border: var(--n-border-checked);")])]), B("&:focus:not(:active)", [R("checkbox-box", [A("border", `
 border: var(--n-border-focus);
 box-shadow: var(--n-box-shadow-focus);
 `)])]), _("inside-table", [R("checkbox-box", `
 background-color: var(--n-merged-color-table);
 `)]), _("checked", [R("checkbox-box", `
 background-color: var(--n-color-checked);
 `, [R("checkbox-icon", [
    // if not set width to 100%, safari & old chrome won't display the icon
    B(".check-icon", `
 opacity: 1;
 transform: scale(1);
 `)
  ])])]), _("indeterminate", [R("checkbox-box", [R("checkbox-icon", [B(".check-icon", `
 opacity: 0;
 transform: scale(.5);
 `), B(".line-icon", `
 opacity: 1;
 transform: scale(1);
 `)])])]), _("checked, indeterminate", [B("&:focus:not(:active)", [R("checkbox-box", [A("border", `
 border: var(--n-border-checked);
 box-shadow: var(--n-box-shadow-focus);
 `)])]), R("checkbox-box", `
 background-color: var(--n-color-checked);
 border-left: 0;
 border-top: 0;
 `, [A("border", {
    border: "var(--n-border-checked)"
  })])]), _("disabled", {
    cursor: "not-allowed"
  }, [_("checked", [R("checkbox-box", `
 background-color: var(--n-color-disabled-checked);
 `, [A("border", {
    border: "var(--n-border-disabled-checked)"
  }), R("checkbox-icon", [B(".check-icon, .line-icon", {
    fill: "var(--n-check-mark-color-disabled-checked)"
  })])])]), R("checkbox-box", `
 background-color: var(--n-color-disabled);
 `, [A("border", `
 border: var(--n-border-disabled);
 `), R("checkbox-icon", [B(".check-icon, .line-icon", `
 fill: var(--n-check-mark-color-disabled);
 `)])]), A("label", `
 color: var(--n-text-color-disabled);
 `)]), R("checkbox-box-wrapper", `
 position: relative;
 width: var(--n-size);
 flex-shrink: 0;
 flex-grow: 0;
 user-select: none;
 -webkit-user-select: none;
 `), R("checkbox-box", `
 position: absolute;
 left: 0;
 top: 50%;
 transform: translateY(-50%);
 height: var(--n-size);
 width: var(--n-size);
 display: inline-block;
 box-sizing: border-box;
 border-radius: var(--n-border-radius);
 background-color: var(--n-color);
 transition: background-color 0.3s var(--n-bezier);
 `, [A("border", `
 transition:
 border-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier);
 border-radius: inherit;
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 border: var(--n-border);
 `), R("checkbox-icon", `
 display: flex;
 align-items: center;
 justify-content: center;
 position: absolute;
 left: 1px;
 right: 1px;
 top: 1px;
 bottom: 1px;
 `, [B(".check-icon, .line-icon", `
 width: 100%;
 fill: var(--n-check-mark-color);
 opacity: 0;
 transform: scale(0.5);
 transform-origin: center;
 transition:
 fill 0.3s var(--n-bezier),
 transform 0.3s var(--n-bezier),
 opacity 0.3s var(--n-bezier),
 border-color 0.3s var(--n-bezier);
 `), Wt({
    left: "1px",
    top: "1px"
  })])]), A("label", `
 color: var(--n-text-color);
 transition: color .3s var(--n-bezier);
 user-select: none;
 -webkit-user-select: none;
 padding: var(--n-label-padding);
 font-weight: var(--n-label-font-weight);
 `, [B("&:empty", {
    display: "none"
  })])]),
  // modal table header checkbox
  no(R("checkbox", `
 --n-merged-color-table: var(--n-color-table-modal);
 `)),
  // popover table header checkbox
  hi(R("checkbox", `
 --n-merged-color-table: var(--n-color-table-popover);
 `))
]), jp = Object.assign(Object.assign({}, we.props), {
  size: String,
  checked: {
    type: [Boolean, String, Number],
    default: void 0
  },
  defaultChecked: {
    type: [Boolean, String, Number],
    default: !1
  },
  value: [String, Number],
  disabled: {
    type: Boolean,
    default: void 0
  },
  indeterminate: Boolean,
  label: String,
  focusable: {
    type: Boolean,
    default: !0
  },
  checkedValue: {
    type: [Boolean, String, Number],
    default: !0
  },
  uncheckedValue: {
    type: [Boolean, String, Number],
    default: !1
  },
  "onUpdate:checked": [Function, Array],
  onUpdateChecked: [Function, Array],
  // private
  privateInsideTable: Boolean,
  // deprecated
  onChange: [Function, Array]
}), Mi = ie({
  name: "Checkbox",
  props: jp,
  setup(e) {
    const t = ke(ks, null), n = L(null), {
      mergedClsPrefixRef: r,
      inlineThemeDisabled: o,
      mergedRtlRef: i
    } = _e(e), l = L(e.defaultChecked), a = ae(e, "checked"), s = zt(a, l), d = Ue(() => {
      if (t) {
        const k = t.valueSetRef.value;
        return k && e.value !== void 0 ? k.has(e.value) : !1;
      } else
        return s.value === e.checkedValue;
    }), u = Tn(e, {
      mergedSize(k) {
        const {
          size: x
        } = e;
        if (x !== void 0) return x;
        if (t) {
          const {
            value: z
          } = t.mergedSizeRef;
          if (z !== void 0)
            return z;
        }
        if (k) {
          const {
            mergedSize: z
          } = k;
          if (z !== void 0) return z.value;
        }
        return "medium";
      },
      mergedDisabled(k) {
        const {
          disabled: x
        } = e;
        if (x !== void 0) return x;
        if (t) {
          if (t.disabledRef.value) return !0;
          const {
            maxRef: {
              value: z
            },
            checkedCountRef: $
          } = t;
          if (z !== void 0 && $.value >= z && !d.value)
            return !0;
          const {
            minRef: {
              value: M
            }
          } = t;
          if (M !== void 0 && $.value <= M && d.value)
            return !0;
        }
        return k ? k.disabled.value : !1;
      }
    }), {
      mergedDisabledRef: h,
      mergedSizeRef: b
    } = u, m = we("Checkbox", "-checkbox", Dp, Ss, e, r);
    function f(k) {
      if (t && e.value !== void 0)
        t.toggleCheckbox(!d.value, e.value);
      else {
        const {
          onChange: x,
          "onUpdate:checked": z,
          onUpdateChecked: $
        } = e, {
          nTriggerFormInput: M,
          nTriggerFormChange: V
        } = u, O = d.value ? e.uncheckedValue : e.checkedValue;
        z && oe(z, O, k), $ && oe($, O, k), x && oe(x, O, k), M(), V(), l.value = O;
      }
    }
    function p(k) {
      h.value || f(k);
    }
    function v(k) {
      if (!h.value)
        switch (k.key) {
          case " ":
          case "Enter":
            f(k);
        }
    }
    function g(k) {
      switch (k.key) {
        case " ":
          k.preventDefault();
      }
    }
    const y = {
      focus: () => {
        var k;
        (k = n.value) === null || k === void 0 || k.focus();
      },
      blur: () => {
        var k;
        (k = n.value) === null || k === void 0 || k.blur();
      }
    }, S = $t("Checkbox", i, r), w = T(() => {
      const {
        value: k
      } = b, {
        common: {
          cubicBezierEaseInOut: x
        },
        self: {
          borderRadius: z,
          color: $,
          colorChecked: M,
          colorDisabled: V,
          colorTableHeader: O,
          colorTableHeaderModal: E,
          colorTableHeaderPopover: I,
          checkMarkColor: F,
          checkMarkColorDisabled: N,
          border: W,
          borderFocus: X,
          borderDisabled: re,
          borderChecked: Q,
          boxShadowFocus: G,
          textColor: j,
          textColorDisabled: q,
          checkMarkColorDisabledChecked: Z,
          colorDisabledChecked: le,
          borderDisabledChecked: ue,
          labelPadding: be,
          labelLineHeight: Re,
          labelFontWeight: K,
          [J("fontSize", k)]: fe,
          [J("size", k)]: Me
        }
      } = m.value;
      return {
        "--n-label-line-height": Re,
        "--n-label-font-weight": K,
        "--n-size": Me,
        "--n-bezier": x,
        "--n-border-radius": z,
        "--n-border": W,
        "--n-border-checked": Q,
        "--n-border-focus": X,
        "--n-border-disabled": re,
        "--n-border-disabled-checked": ue,
        "--n-box-shadow-focus": G,
        "--n-color": $,
        "--n-color-checked": M,
        "--n-color-table": O,
        "--n-color-table-modal": E,
        "--n-color-table-popover": I,
        "--n-color-disabled": V,
        "--n-color-disabled-checked": le,
        "--n-text-color": j,
        "--n-text-color-disabled": q,
        "--n-check-mark-color": F,
        "--n-check-mark-color-disabled": N,
        "--n-check-mark-color-disabled-checked": Z,
        "--n-font-size": fe,
        "--n-label-padding": be
      };
    }), C = o ? it("checkbox", T(() => b.value[0]), w, e) : void 0;
    return Object.assign(u, y, {
      rtlEnabled: S,
      selfRef: n,
      mergedClsPrefix: r,
      mergedDisabled: h,
      renderedChecked: d,
      mergedTheme: m,
      labelId: jn(),
      handleClick: p,
      handleKeyUp: v,
      handleKeyDown: g,
      cssVars: o ? void 0 : w,
      themeClass: C == null ? void 0 : C.themeClass,
      onRender: C == null ? void 0 : C.onRender
    });
  },
  render() {
    var e;
    const {
      $slots: t,
      renderedChecked: n,
      mergedDisabled: r,
      indeterminate: o,
      privateInsideTable: i,
      cssVars: l,
      labelId: a,
      label: s,
      mergedClsPrefix: d,
      focusable: u,
      handleKeyUp: h,
      handleKeyDown: b,
      handleClick: m
    } = this;
    (e = this.onRender) === null || e === void 0 || e.call(this);
    const f = Ze(t.default, (p) => s || p ? c("span", {
      class: `${d}-checkbox__label`,
      id: a
    }, s || p) : null);
    return c("div", {
      ref: "selfRef",
      class: [`${d}-checkbox`, this.themeClass, this.rtlEnabled && `${d}-checkbox--rtl`, n && `${d}-checkbox--checked`, r && `${d}-checkbox--disabled`, o && `${d}-checkbox--indeterminate`, i && `${d}-checkbox--inside-table`, f && `${d}-checkbox--show-label`],
      tabindex: r || !u ? void 0 : 0,
      role: "checkbox",
      "aria-checked": o ? "mixed" : n,
      "aria-labelledby": a,
      style: l,
      onKeyup: h,
      onKeydown: b,
      onClick: m,
      onMousedown: () => {
        De("selectstart", window, (p) => {
          p.preventDefault();
        }, {
          once: !0
        });
      }
    }, c("div", {
      class: `${d}-checkbox-box-wrapper`
    }, " ", c("div", {
      class: `${d}-checkbox-box`
    }, c(Gn, null, {
      default: () => this.indeterminate ? c("div", {
        key: "indeterminate",
        class: `${d}-checkbox-icon`
      }, Hp()) : c("div", {
        key: "check",
        class: `${d}-checkbox-icon`
      }, Lp())
    }), c("div", {
      class: `${d}-checkbox-box__border`
    }))), f);
  }
}), Wp = {
  abstract: Boolean,
  bordered: {
    type: Boolean,
    default: void 0
  },
  clsPrefix: String,
  locale: Object,
  dateLocale: Object,
  namespace: String,
  rtl: Array,
  tag: {
    type: String,
    default: "div"
  },
  hljs: Object,
  katex: Object,
  theme: Object,
  themeOverrides: Object,
  componentOptions: Object,
  icons: Object,
  breakpoints: Object,
  preflightStyleDisabled: Boolean,
  styleMountTarget: Object,
  inlineThemeDisabled: {
    type: Boolean,
    default: void 0
  },
  // deprecated
  as: {
    type: String,
    validator: () => (Kt("config-provider", "`as` is deprecated, please use `tag` instead."), !0),
    default: void 0
  }
}, dv = ie({
  name: "ConfigProvider",
  alias: ["App"],
  props: Wp,
  setup(e) {
    const t = ke(Ut, null), n = T(() => {
      const {
        theme: p
      } = e;
      if (p === null) return;
      const v = t == null ? void 0 : t.mergedThemeRef.value;
      return p === void 0 ? v : v === void 0 ? p : Object.assign({}, v, p);
    }), r = T(() => {
      const {
        themeOverrides: p
      } = e;
      if (p !== null) {
        if (p === void 0)
          return t == null ? void 0 : t.mergedThemeOverridesRef.value;
        {
          const v = t == null ? void 0 : t.mergedThemeOverridesRef.value;
          return v === void 0 ? p : ar({}, v, p);
        }
      }
    }), o = Ue(() => {
      const {
        namespace: p
      } = e;
      return p === void 0 ? t == null ? void 0 : t.mergedNamespaceRef.value : p;
    }), i = Ue(() => {
      const {
        bordered: p
      } = e;
      return p === void 0 ? t == null ? void 0 : t.mergedBorderedRef.value : p;
    }), l = T(() => {
      const {
        icons: p
      } = e;
      return p === void 0 ? t == null ? void 0 : t.mergedIconsRef.value : p;
    }), a = T(() => {
      const {
        componentOptions: p
      } = e;
      return p !== void 0 ? p : t == null ? void 0 : t.mergedComponentPropsRef.value;
    }), s = T(() => {
      const {
        clsPrefix: p
      } = e;
      return p !== void 0 ? p : t ? t.mergedClsPrefixRef.value : Zr;
    }), d = T(() => {
      var p;
      const {
        rtl: v
      } = e;
      if (v === void 0)
        return t == null ? void 0 : t.mergedRtlRef.value;
      const g = {};
      for (const y of v)
        g[y.name] = Hi(y), (p = y.peers) === null || p === void 0 || p.forEach((S) => {
          S.name in g || (g[S.name] = Hi(S));
        });
      return g;
    }), u = T(() => e.breakpoints || (t == null ? void 0 : t.mergedBreakpointsRef.value)), h = e.inlineThemeDisabled || (t == null ? void 0 : t.inlineThemeDisabled), b = e.preflightStyleDisabled || (t == null ? void 0 : t.preflightStyleDisabled), m = e.styleMountTarget || (t == null ? void 0 : t.styleMountTarget), f = T(() => {
      const {
        value: p
      } = n, {
        value: v
      } = r, g = v && Object.keys(v).length !== 0, y = p == null ? void 0 : p.name;
      return y ? g ? `${y}-${gr(JSON.stringify(r.value))}` : y : g ? gr(JSON.stringify(r.value)) : "";
    });
    return We(Ut, {
      mergedThemeHashRef: f,
      mergedBreakpointsRef: u,
      mergedRtlRef: d,
      mergedIconsRef: l,
      mergedComponentPropsRef: a,
      mergedBorderedRef: i,
      mergedNamespaceRef: o,
      mergedClsPrefixRef: s,
      mergedLocaleRef: T(() => {
        const {
          locale: p
        } = e;
        if (p !== null)
          return p === void 0 ? t == null ? void 0 : t.mergedLocaleRef.value : p;
      }),
      mergedDateLocaleRef: T(() => {
        const {
          dateLocale: p
        } = e;
        if (p !== null)
          return p === void 0 ? t == null ? void 0 : t.mergedDateLocaleRef.value : p;
      }),
      mergedHljsRef: T(() => {
        const {
          hljs: p
        } = e;
        return p === void 0 ? t == null ? void 0 : t.mergedHljsRef.value : p;
      }),
      mergedKatexRef: T(() => {
        const {
          katex: p
        } = e;
        return p === void 0 ? t == null ? void 0 : t.mergedKatexRef.value : p;
      }),
      mergedThemeRef: n,
      mergedThemeOverridesRef: r,
      inlineThemeDisabled: h || !1,
      preflightStyleDisabled: b || !1,
      styleMountTarget: m
    }), {
      mergedClsPrefix: s,
      mergedBordered: i,
      mergedNamespace: o,
      mergedTheme: n,
      mergedThemeOverrides: r
    };
  },
  render() {
    var e, t, n, r;
    return this.abstract ? (r = (n = this.$slots).default) === null || r === void 0 ? void 0 : r.call(n) : c(this.as || this.tag, {
      class: `${this.mergedClsPrefix || Zr}-config-provider`
    }, (t = (e = this.$slots).default) === null || t === void 0 ? void 0 : t.call(e));
  }
});
function Np(e) {
  const {
    boxShadow2: t
  } = e;
  return {
    menuBoxShadow: t
  };
}
const Fi = {
  name: "Popselect",
  common: rt,
  peers: {
    Popover: Fn,
    InternalSelectMenu: $i
  },
  self: Np
}, Rs = "n-popselect", Vp = R("popselect-menu", `
 box-shadow: var(--n-menu-box-shadow);
`), Oi = {
  multiple: Boolean,
  value: {
    type: [String, Number, Array],
    default: null
  },
  cancelable: Boolean,
  options: {
    type: Array,
    default: () => []
  },
  size: {
    type: String,
    default: "medium"
  },
  scrollable: Boolean,
  "onUpdate:value": [Function, Array],
  onUpdateValue: [Function, Array],
  onMouseenter: Function,
  onMouseleave: Function,
  renderLabel: Function,
  showCheckmark: {
    type: Boolean,
    default: void 0
  },
  nodeProps: Function,
  virtualScroll: Boolean,
  // deprecated
  onChange: [Function, Array]
}, Wa = Rn(Oi), Kp = ie({
  name: "PopselectPanel",
  props: Oi,
  setup(e) {
    const t = ke(Rs), {
      mergedClsPrefixRef: n,
      inlineThemeDisabled: r
    } = _e(e), o = we("Popselect", "-pop-select", Vp, Fi, t.props, n), i = T(() => lo(e.options, ws("value", "children")));
    function l(b, m) {
      const {
        onUpdateValue: f,
        "onUpdate:value": p,
        onChange: v
      } = e;
      f && oe(f, b, m), p && oe(p, b, m), v && oe(v, b, m);
    }
    function a(b) {
      d(b.key);
    }
    function s(b) {
      !Lt(b, "action") && !Lt(b, "empty") && !Lt(b, "header") && b.preventDefault();
    }
    function d(b) {
      const {
        value: {
          getNode: m
        }
      } = i;
      if (e.multiple)
        if (Array.isArray(e.value)) {
          const f = [], p = [];
          let v = !0;
          e.value.forEach((g) => {
            if (g === b) {
              v = !1;
              return;
            }
            const y = m(g);
            y && (f.push(y.key), p.push(y.rawNode));
          }), v && (f.push(b), p.push(m(b).rawNode)), l(f, p);
        } else {
          const f = m(b);
          f && l([b], [f.rawNode]);
        }
      else if (e.value === b && e.cancelable)
        l(null, null);
      else {
        const f = m(b);
        f && l(b, f.rawNode);
        const {
          "onUpdate:show": p,
          onUpdateShow: v
        } = t.props;
        p && oe(p, !1), v && oe(v, !1), t.setShow(!1);
      }
      Tt(() => {
        t.syncPosition();
      });
    }
    je(ae(e, "options"), () => {
      Tt(() => {
        t.syncPosition();
      });
    });
    const u = T(() => {
      const {
        self: {
          menuBoxShadow: b
        }
      } = o.value;
      return {
        "--n-menu-box-shadow": b
      };
    }), h = r ? it("select", void 0, u, t.props) : void 0;
    return {
      mergedTheme: t.mergedThemeRef,
      mergedClsPrefix: n,
      treeMate: i,
      handleToggle: a,
      handleMenuMousedown: s,
      cssVars: r ? void 0 : u,
      themeClass: h == null ? void 0 : h.themeClass,
      onRender: h == null ? void 0 : h.onRender
    };
  },
  render() {
    var e;
    return (e = this.onRender) === null || e === void 0 || e.call(this), c(fs, {
      clsPrefix: this.mergedClsPrefix,
      focusable: !0,
      nodeProps: this.nodeProps,
      class: [`${this.mergedClsPrefix}-popselect-menu`, this.themeClass],
      style: this.cssVars,
      theme: this.mergedTheme.peers.InternalSelectMenu,
      themeOverrides: this.mergedTheme.peerOverrides.InternalSelectMenu,
      multiple: this.multiple,
      treeMate: this.treeMate,
      size: this.size,
      value: this.value,
      virtualScroll: this.virtualScroll,
      scrollable: this.scrollable,
      renderLabel: this.renderLabel,
      onToggle: this.handleToggle,
      onMouseenter: this.onMouseenter,
      onMouseleave: this.onMouseenter,
      onMousedown: this.handleMenuMousedown,
      showCheckmark: this.showCheckmark
    }, {
      header: () => {
        var t, n;
        return ((n = (t = this.$slots).header) === null || n === void 0 ? void 0 : n.call(t)) || [];
      },
      action: () => {
        var t, n;
        return ((n = (t = this.$slots).action) === null || n === void 0 ? void 0 : n.call(t)) || [];
      },
      empty: () => {
        var t, n;
        return ((n = (t = this.$slots).empty) === null || n === void 0 ? void 0 : n.call(t)) || [];
      }
    });
  }
}), Up = Object.assign(Object.assign(Object.assign(Object.assign({}, we.props), kr(zn, ["showArrow", "arrow"])), {
  placement: Object.assign(Object.assign({}, zn.placement), {
    default: "bottom"
  }),
  trigger: {
    type: String,
    default: "hover"
  }
}), Oi), qp = ie({
  name: "Popselect",
  props: Up,
  slots: Object,
  inheritAttrs: !1,
  __popover__: !0,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(e), n = we("Popselect", "-popselect", void 0, Fi, e, t), r = L(null);
    function o() {
      var a;
      (a = r.value) === null || a === void 0 || a.syncPosition();
    }
    function i(a) {
      var s;
      (s = r.value) === null || s === void 0 || s.setShow(a);
    }
    return We(Rs, {
      props: e,
      mergedThemeRef: n,
      syncPosition: o,
      setShow: i
    }), Object.assign(Object.assign({}, {
      syncPosition: o,
      setShow: i
    }), {
      popoverInstRef: r,
      mergedTheme: n
    });
  },
  render() {
    const {
      mergedTheme: e
    } = this, t = {
      theme: e.peers.Popover,
      themeOverrides: e.peerOverrides.Popover,
      builtinThemeOverrides: {
        padding: "0"
      },
      ref: "popoverInstRef",
      internalRenderBody: (n, r, o, i, l) => {
        const {
          $attrs: a
        } = this;
        return c(Kp, Object.assign({}, a, {
          class: [a.class, n],
          style: [a.style, ...o]
        }, kn(this.$props, Wa), {
          ref: Xl(r),
          onMouseenter: hr([i, a.onMouseenter]),
          onMouseleave: hr([l, a.onMouseleave])
        }), {
          header: () => {
            var s, d;
            return (d = (s = this.$slots).header) === null || d === void 0 ? void 0 : d.call(s);
          },
          action: () => {
            var s, d;
            return (d = (s = this.$slots).action) === null || d === void 0 ? void 0 : d.call(s);
          },
          empty: () => {
            var s, d;
            return (d = (s = this.$slots).empty) === null || d === void 0 ? void 0 : d.call(s);
          }
        });
      }
    };
    return c(Jn, Object.assign({}, kr(this.$props, Wa), t, {
      internalDeactivateImmediately: !0
    }), {
      trigger: () => {
        var n, r;
        return (r = (n = this.$slots).default) === null || r === void 0 ? void 0 : r.call(n);
      }
    });
  }
});
function Gp(e) {
  const {
    boxShadow2: t
  } = e;
  return {
    menuBoxShadow: t
  };
}
const Ps = {
  name: "Select",
  common: rt,
  peers: {
    InternalSelection: gs,
    InternalSelectMenu: $i
  },
  self: Gp
}, Xp = B([R("select", `
 z-index: auto;
 outline: none;
 width: 100%;
 position: relative;
 font-weight: var(--n-font-weight);
 `), R("select-menu", `
 margin: 4px 0;
 box-shadow: var(--n-menu-box-shadow);
 `, [Pr({
  originalTransition: "background-color .3s var(--n-bezier), box-shadow .3s var(--n-bezier)"
})])]), Yp = Object.assign(Object.assign({}, we.props), {
  to: Qt.propTo,
  bordered: {
    type: Boolean,
    default: void 0
  },
  clearable: Boolean,
  clearFilterAfterSelect: {
    type: Boolean,
    default: !0
  },
  options: {
    type: Array,
    default: () => []
  },
  defaultValue: {
    type: [String, Number, Array],
    default: null
  },
  keyboard: {
    type: Boolean,
    default: !0
  },
  value: [String, Number, Array],
  placeholder: String,
  menuProps: Object,
  multiple: Boolean,
  size: String,
  menuSize: {
    type: String
  },
  filterable: Boolean,
  disabled: {
    type: Boolean,
    default: void 0
  },
  remote: Boolean,
  loading: Boolean,
  filter: Function,
  placement: {
    type: String,
    default: "bottom-start"
  },
  widthMode: {
    type: String,
    default: "trigger"
  },
  tag: Boolean,
  onCreate: Function,
  fallbackOption: {
    type: [Function, Boolean],
    default: void 0
  },
  show: {
    type: Boolean,
    default: void 0
  },
  showArrow: {
    type: Boolean,
    default: !0
  },
  maxTagCount: [Number, String],
  ellipsisTagPopoverProps: Object,
  consistentMenuWidth: {
    type: Boolean,
    default: !0
  },
  virtualScroll: {
    type: Boolean,
    default: !0
  },
  labelField: {
    type: String,
    default: "label"
  },
  valueField: {
    type: String,
    default: "value"
  },
  childrenField: {
    type: String,
    default: "children"
  },
  renderLabel: Function,
  renderOption: Function,
  renderTag: Function,
  "onUpdate:value": [Function, Array],
  inputProps: Object,
  nodeProps: Function,
  ignoreComposition: {
    type: Boolean,
    default: !0
  },
  showOnFocus: Boolean,
  // for jsx
  onUpdateValue: [Function, Array],
  onBlur: [Function, Array],
  onClear: [Function, Array],
  onFocus: [Function, Array],
  onScroll: [Function, Array],
  onSearch: [Function, Array],
  onUpdateShow: [Function, Array],
  "onUpdate:show": [Function, Array],
  displayDirective: {
    type: String,
    default: "show"
  },
  resetMenuOnOptionsChange: {
    type: Boolean,
    default: !0
  },
  status: String,
  showCheckmark: {
    type: Boolean,
    default: !0
  },
  /** deprecated */
  onChange: [Function, Array],
  items: Array
}), Zp = ie({
  name: "Select",
  props: Yp,
  slots: Object,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedBorderedRef: n,
      namespaceRef: r,
      inlineThemeDisabled: o
    } = _e(e), i = we("Select", "-select", Xp, Ps, e, t), l = L(e.defaultValue), a = ae(e, "value"), s = zt(a, l), d = L(!1), u = L(""), h = Xr(e, ["items", "options"]), b = L([]), m = L([]), f = T(() => m.value.concat(b.value).concat(h.value)), p = T(() => {
      const {
        filter: P
      } = e;
      if (P) return P;
      const {
        labelField: D,
        valueField: ee
      } = e;
      return (se, he) => {
        if (!he) return !1;
        const ge = he[D];
        if (typeof ge == "string")
          return Ao(se, ge);
        const ve = he[ee];
        return typeof ve == "string" ? Ao(se, ve) : typeof ve == "number" ? Ao(se, String(ve)) : !1;
      };
    }), v = T(() => {
      if (e.remote)
        return h.value;
      {
        const {
          value: P
        } = f, {
          value: D
        } = u;
        return !D.length || !e.filterable ? P : wp(P, p.value, D, e.childrenField);
      }
    }), g = T(() => {
      const {
        valueField: P,
        childrenField: D
      } = e, ee = ws(P, D);
      return lo(v.value, ee);
    }), y = T(() => Cp(f.value, e.valueField, e.childrenField)), S = L(!1), w = zt(ae(e, "show"), S), C = L(null), k = L(null), x = L(null), {
      localeRef: z
    } = Pn("Select"), $ = T(() => {
      var P;
      return (P = e.placeholder) !== null && P !== void 0 ? P : z.value.placeholder;
    }), M = [], V = L(/* @__PURE__ */ new Map()), O = T(() => {
      const {
        fallbackOption: P
      } = e;
      if (P === void 0) {
        const {
          labelField: D,
          valueField: ee
        } = e;
        return (se) => ({
          [D]: String(se),
          [ee]: se
        });
      }
      return P === !1 ? !1 : (D) => Object.assign(P(D), {
        value: D
      });
    });
    function E(P) {
      const D = e.remote, {
        value: ee
      } = V, {
        value: se
      } = y, {
        value: he
      } = O, ge = [];
      return P.forEach((ve) => {
        if (se.has(ve))
          ge.push(se.get(ve));
        else if (D && ee.has(ve))
          ge.push(ee.get(ve));
        else if (he) {
          const Se = he(ve);
          Se && ge.push(Se);
        }
      }), ge;
    }
    const I = T(() => {
      if (e.multiple) {
        const {
          value: P
        } = s;
        return Array.isArray(P) ? E(P) : [];
      }
      return null;
    }), F = T(() => {
      const {
        value: P
      } = s;
      return !e.multiple && !Array.isArray(P) ? P === null ? null : E([P])[0] || null : null;
    }), N = Tn(e), {
      mergedSizeRef: W,
      mergedDisabledRef: X,
      mergedStatusRef: re
    } = N;
    function Q(P, D) {
      const {
        onChange: ee,
        "onUpdate:value": se,
        onUpdateValue: he
      } = e, {
        nTriggerFormChange: ge,
        nTriggerFormInput: ve
      } = N;
      ee && oe(ee, P, D), he && oe(he, P, D), se && oe(se, P, D), l.value = P, ge(), ve();
    }
    function G(P) {
      const {
        onBlur: D
      } = e, {
        nTriggerFormBlur: ee
      } = N;
      D && oe(D, P), ee();
    }
    function j() {
      const {
        onClear: P
      } = e;
      P && oe(P);
    }
    function q(P) {
      const {
        onFocus: D,
        showOnFocus: ee
      } = e, {
        nTriggerFormFocus: se
      } = N;
      D && oe(D, P), se(), ee && Re();
    }
    function Z(P) {
      const {
        onSearch: D
      } = e;
      D && oe(D, P);
    }
    function le(P) {
      const {
        onScroll: D
      } = e;
      D && oe(D, P);
    }
    function ue() {
      var P;
      const {
        remote: D,
        multiple: ee
      } = e;
      if (D) {
        const {
          value: se
        } = V;
        if (ee) {
          const {
            valueField: he
          } = e;
          (P = I.value) === null || P === void 0 || P.forEach((ge) => {
            se.set(ge[he], ge);
          });
        } else {
          const he = F.value;
          he && se.set(he[e.valueField], he);
        }
      }
    }
    function be(P) {
      const {
        onUpdateShow: D,
        "onUpdate:show": ee
      } = e;
      D && oe(D, P), ee && oe(ee, P), S.value = P;
    }
    function Re() {
      X.value || (be(!0), S.value = !0, e.filterable && Xe());
    }
    function K() {
      be(!1);
    }
    function fe() {
      u.value = "", m.value = M;
    }
    const Me = L(!1);
    function ye() {
      e.filterable && (Me.value = !0);
    }
    function Fe() {
      e.filterable && (Me.value = !1, w.value || fe());
    }
    function Te() {
      X.value || (w.value ? e.filterable ? Xe() : K() : Re());
    }
    function Qe(P) {
      var D, ee;
      !((ee = (D = x.value) === null || D === void 0 ? void 0 : D.selfRef) === null || ee === void 0) && ee.contains(P.relatedTarget) || (d.value = !1, G(P), K());
    }
    function qe(P) {
      q(P), d.value = !0;
    }
    function tt() {
      d.value = !0;
    }
    function et(P) {
      var D;
      !((D = C.value) === null || D === void 0) && D.$el.contains(P.relatedTarget) || (d.value = !1, G(P), K());
    }
    function me() {
      var P;
      (P = C.value) === null || P === void 0 || P.focus(), K();
    }
    function U(P) {
      var D;
      w.value && (!((D = C.value) === null || D === void 0) && D.$el.contains(Dn(P)) || K());
    }
    function Y(P) {
      if (!Array.isArray(P)) return [];
      if (O.value)
        return Array.from(P);
      {
        const {
          remote: D
        } = e, {
          value: ee
        } = y;
        if (D) {
          const {
            value: se
          } = V;
          return P.filter((he) => ee.has(he) || se.has(he));
        } else
          return P.filter((se) => ee.has(se));
      }
    }
    function de(P) {
      xe(P.rawNode);
    }
    function xe(P) {
      if (X.value) return;
      const {
        tag: D,
        remote: ee,
        clearFilterAfterSelect: se,
        valueField: he
      } = e;
      if (D && !ee) {
        const {
          value: ge
        } = m, ve = ge[0] || null;
        if (ve) {
          const Se = b.value;
          Se.length ? Se.push(ve) : b.value = [ve], m.value = M;
        }
      }
      if (ee && V.value.set(P[he], P), e.multiple) {
        const ge = Y(s.value), ve = ge.findIndex((Se) => Se === P[he]);
        if (~ve) {
          if (ge.splice(ve, 1), D && !ee) {
            const Se = te(P[he]);
            ~Se && (b.value.splice(Se, 1), se && (u.value = ""));
          }
        } else
          ge.push(P[he]), se && (u.value = "");
        Q(ge, E(ge));
      } else {
        if (D && !ee) {
          const ge = te(P[he]);
          ~ge ? b.value = [b.value[ge]] : b.value = M;
        }
        at(), K(), Q(P[he], P);
      }
    }
    function te(P) {
      return b.value.findIndex((ee) => ee[e.valueField] === P);
    }
    function ce(P) {
      w.value || Re();
      const {
        value: D
      } = P.target;
      u.value = D;
      const {
        tag: ee,
        remote: se
      } = e;
      if (Z(D), ee && !se) {
        if (!D) {
          m.value = M;
          return;
        }
        const {
          onCreate: he
        } = e, ge = he ? he(D) : {
          [e.labelField]: D,
          [e.valueField]: D
        }, {
          valueField: ve,
          labelField: Se
        } = e;
        h.value.some((Ee) => Ee[ve] === ge[ve] || Ee[Se] === ge[Se]) || b.value.some((Ee) => Ee[ve] === ge[ve] || Ee[Se] === ge[Se]) ? m.value = M : m.value = [ge];
      }
    }
    function ze(P) {
      P.stopPropagation();
      const {
        multiple: D
      } = e;
      !D && e.filterable && K(), j(), D ? Q([], []) : Q(null, null);
    }
    function Ne(P) {
      !Lt(P, "action") && !Lt(P, "empty") && !Lt(P, "header") && P.preventDefault();
    }
    function st(P) {
      le(P);
    }
    function ft(P) {
      var D, ee, se, he, ge;
      if (!e.keyboard) {
        P.preventDefault();
        return;
      }
      switch (P.key) {
        case " ":
          if (e.filterable)
            break;
          P.preventDefault();
        // eslint-disable-next-line no-fallthrough
        case "Enter":
          if (!(!((D = C.value) === null || D === void 0) && D.isComposing)) {
            if (w.value) {
              const ve = (ee = x.value) === null || ee === void 0 ? void 0 : ee.getPendingTmNode();
              ve ? de(ve) : e.filterable || (K(), at());
            } else if (Re(), e.tag && Me.value) {
              const ve = m.value[0];
              if (ve) {
                const Se = ve[e.valueField], {
                  value: Ee
                } = s;
                e.multiple && Array.isArray(Ee) && Ee.includes(Se) || xe(ve);
              }
            }
          }
          P.preventDefault();
          break;
        case "ArrowUp":
          if (P.preventDefault(), e.loading) return;
          w.value && ((se = x.value) === null || se === void 0 || se.prev());
          break;
        case "ArrowDown":
          if (P.preventDefault(), e.loading) return;
          w.value ? (he = x.value) === null || he === void 0 || he.next() : Re();
          break;
        case "Escape":
          w.value && (yu(P), K()), (ge = C.value) === null || ge === void 0 || ge.focus();
          break;
      }
    }
    function at() {
      var P;
      (P = C.value) === null || P === void 0 || P.focus();
    }
    function Xe() {
      var P;
      (P = C.value) === null || P === void 0 || P.focusInput();
    }
    function dt() {
      var P;
      w.value && ((P = k.value) === null || P === void 0 || P.syncPosition());
    }
    ue(), je(ae(e, "options"), ue);
    const Ge = {
      focus: () => {
        var P;
        (P = C.value) === null || P === void 0 || P.focus();
      },
      focusInput: () => {
        var P;
        (P = C.value) === null || P === void 0 || P.focusInput();
      },
      blur: () => {
        var P;
        (P = C.value) === null || P === void 0 || P.blur();
      },
      blurInput: () => {
        var P;
        (P = C.value) === null || P === void 0 || P.blurInput();
      }
    }, pe = T(() => {
      const {
        self: {
          menuBoxShadow: P
        }
      } = i.value;
      return {
        "--n-menu-box-shadow": P
      };
    }), Pe = o ? it("select", void 0, pe, e) : void 0;
    return Object.assign(Object.assign({}, Ge), {
      mergedStatus: re,
      mergedClsPrefix: t,
      mergedBordered: n,
      namespace: r,
      treeMate: g,
      isMounted: Cr(),
      triggerRef: C,
      menuRef: x,
      pattern: u,
      uncontrolledShow: S,
      mergedShow: w,
      adjustedTo: Qt(e),
      uncontrolledValue: l,
      mergedValue: s,
      followerRef: k,
      localizedPlaceholder: $,
      selectedOption: F,
      selectedOptions: I,
      mergedSize: W,
      mergedDisabled: X,
      focused: d,
      activeWithoutMenuOpen: Me,
      inlineThemeDisabled: o,
      onTriggerInputFocus: ye,
      onTriggerInputBlur: Fe,
      handleTriggerOrMenuResize: dt,
      handleMenuFocus: tt,
      handleMenuBlur: et,
      handleMenuTabOut: me,
      handleTriggerClick: Te,
      handleToggle: de,
      handleDeleteOption: xe,
      handlePatternInput: ce,
      handleClear: ze,
      handleTriggerBlur: Qe,
      handleTriggerFocus: qe,
      handleKeydown: ft,
      handleMenuAfterLeave: fe,
      handleMenuClickOutside: U,
      handleMenuScroll: st,
      handleMenuKeydown: ft,
      handleMenuMousedown: Ne,
      mergedTheme: i,
      cssVars: o ? void 0 : pe,
      themeClass: Pe == null ? void 0 : Pe.themeClass,
      onRender: Pe == null ? void 0 : Pe.onRender
    });
  },
  render() {
    return c("div", {
      class: `${this.mergedClsPrefix}-select`
    }, c(vi, null, {
      default: () => [c(xi, null, {
        default: () => c(ap, {
          ref: "triggerRef",
          inlineThemeDisabled: this.inlineThemeDisabled,
          status: this.mergedStatus,
          inputProps: this.inputProps,
          clsPrefix: this.mergedClsPrefix,
          showArrow: this.showArrow,
          maxTagCount: this.maxTagCount,
          ellipsisTagPopoverProps: this.ellipsisTagPopoverProps,
          bordered: this.mergedBordered,
          active: this.activeWithoutMenuOpen || this.mergedShow,
          pattern: this.pattern,
          placeholder: this.localizedPlaceholder,
          selectedOption: this.selectedOption,
          selectedOptions: this.selectedOptions,
          multiple: this.multiple,
          renderTag: this.renderTag,
          renderLabel: this.renderLabel,
          filterable: this.filterable,
          clearable: this.clearable,
          disabled: this.mergedDisabled,
          size: this.mergedSize,
          theme: this.mergedTheme.peers.InternalSelection,
          labelField: this.labelField,
          valueField: this.valueField,
          themeOverrides: this.mergedTheme.peerOverrides.InternalSelection,
          loading: this.loading,
          focused: this.focused,
          onClick: this.handleTriggerClick,
          onDeleteOption: this.handleDeleteOption,
          onPatternInput: this.handlePatternInput,
          onClear: this.handleClear,
          onBlur: this.handleTriggerBlur,
          onFocus: this.handleTriggerFocus,
          onKeydown: this.handleKeydown,
          onPatternBlur: this.onTriggerInputBlur,
          onPatternFocus: this.onTriggerInputFocus,
          onResize: this.handleTriggerOrMenuResize,
          ignoreComposition: this.ignoreComposition
        }, {
          arrow: () => {
            var e, t;
            return [(t = (e = this.$slots).arrow) === null || t === void 0 ? void 0 : t.call(e)];
          }
        })
      }), c(wi, {
        ref: "followerRef",
        show: this.mergedShow,
        to: this.adjustedTo,
        teleportDisabled: this.adjustedTo === Qt.tdkey,
        containerClass: this.namespace,
        width: this.consistentMenuWidth ? "target" : void 0,
        minWidth: "target",
        placement: this.placement
      }, {
        default: () => c(Ht, {
          name: "fade-in-scale-up-transition",
          appear: this.isMounted,
          onAfterLeave: this.handleMenuAfterLeave
        }, {
          default: () => {
            var e, t, n;
            return this.mergedShow || this.displayDirective === "show" ? ((e = this.onRender) === null || e === void 0 || e.call(this), ln(c(fs, Object.assign({}, this.menuProps, {
              ref: "menuRef",
              onResize: this.handleTriggerOrMenuResize,
              inlineThemeDisabled: this.inlineThemeDisabled,
              virtualScroll: this.consistentMenuWidth && this.virtualScroll,
              class: [`${this.mergedClsPrefix}-select-menu`, this.themeClass, (t = this.menuProps) === null || t === void 0 ? void 0 : t.class],
              clsPrefix: this.mergedClsPrefix,
              focusable: !0,
              labelField: this.labelField,
              valueField: this.valueField,
              autoPending: !0,
              nodeProps: this.nodeProps,
              theme: this.mergedTheme.peers.InternalSelectMenu,
              themeOverrides: this.mergedTheme.peerOverrides.InternalSelectMenu,
              treeMate: this.treeMate,
              multiple: this.multiple,
              size: this.menuSize,
              renderOption: this.renderOption,
              renderLabel: this.renderLabel,
              value: this.mergedValue,
              style: [(n = this.menuProps) === null || n === void 0 ? void 0 : n.style, this.cssVars],
              onToggle: this.handleToggle,
              onScroll: this.handleMenuScroll,
              onFocus: this.handleMenuFocus,
              onBlur: this.handleMenuBlur,
              onKeydown: this.handleMenuKeydown,
              onTabOut: this.handleMenuTabOut,
              onMousedown: this.handleMenuMousedown,
              show: this.mergedShow,
              showCheckmark: this.showCheckmark,
              resetMenuOnOptionsChange: this.resetMenuOnOptionsChange
            }), {
              empty: () => {
                var r, o;
                return [(o = (r = this.$slots).empty) === null || o === void 0 ? void 0 : o.call(r)];
              },
              header: () => {
                var r, o;
                return [(o = (r = this.$slots).header) === null || o === void 0 ? void 0 : o.call(r)];
              },
              action: () => {
                var r, o;
                return [(o = (r = this.$slots).action) === null || o === void 0 ? void 0 : o.call(r)];
              }
            }), this.displayDirective === "show" ? [[br, this.mergedShow], [vr, this.handleMenuClickOutside, void 0, {
              capture: !0
            }]] : [[vr, this.handleMenuClickOutside, void 0, {
              capture: !0
            }]])) : null;
          }
        })
      })]
    }));
  }
}), Jp = {
  itemPaddingSmall: "0 4px",
  itemMarginSmall: "0 0 0 8px",
  itemMarginSmallRtl: "0 8px 0 0",
  itemPaddingMedium: "0 4px",
  itemMarginMedium: "0 0 0 8px",
  itemMarginMediumRtl: "0 8px 0 0",
  itemPaddingLarge: "0 4px",
  itemMarginLarge: "0 0 0 8px",
  itemMarginLargeRtl: "0 8px 0 0",
  buttonIconSizeSmall: "14px",
  buttonIconSizeMedium: "16px",
  buttonIconSizeLarge: "18px",
  inputWidthSmall: "60px",
  selectWidthSmall: "unset",
  inputMarginSmall: "0 0 0 8px",
  inputMarginSmallRtl: "0 8px 0 0",
  selectMarginSmall: "0 0 0 8px",
  prefixMarginSmall: "0 8px 0 0",
  suffixMarginSmall: "0 0 0 8px",
  inputWidthMedium: "60px",
  selectWidthMedium: "unset",
  inputMarginMedium: "0 0 0 8px",
  inputMarginMediumRtl: "0 8px 0 0",
  selectMarginMedium: "0 0 0 8px",
  prefixMarginMedium: "0 8px 0 0",
  suffixMarginMedium: "0 0 0 8px",
  inputWidthLarge: "60px",
  selectWidthLarge: "unset",
  inputMarginLarge: "0 0 0 8px",
  inputMarginLargeRtl: "0 8px 0 0",
  selectMarginLarge: "0 0 0 8px",
  prefixMarginLarge: "0 8px 0 0",
  suffixMarginLarge: "0 0 0 8px"
};
function Qp(e) {
  const {
    textColor2: t,
    primaryColor: n,
    primaryColorHover: r,
    primaryColorPressed: o,
    inputColorDisabled: i,
    textColorDisabled: l,
    borderColor: a,
    borderRadius: s,
    // item font size
    fontSizeTiny: d,
    fontSizeSmall: u,
    fontSizeMedium: h,
    // item size
    heightTiny: b,
    heightSmall: m,
    heightMedium: f
  } = e;
  return Object.assign(Object.assign({}, Jp), {
    buttonColor: "#0000",
    buttonColorHover: "#0000",
    buttonColorPressed: "#0000",
    buttonBorder: `1px solid ${a}`,
    buttonBorderHover: `1px solid ${a}`,
    buttonBorderPressed: `1px solid ${a}`,
    buttonIconColor: t,
    buttonIconColorHover: t,
    buttonIconColorPressed: t,
    itemTextColor: t,
    itemTextColorHover: r,
    itemTextColorPressed: o,
    itemTextColorActive: n,
    itemTextColorDisabled: l,
    itemColor: "#0000",
    itemColorHover: "#0000",
    itemColorPressed: "#0000",
    itemColorActive: "#0000",
    itemColorActiveHover: "#0000",
    itemColorDisabled: i,
    itemBorder: "1px solid #0000",
    itemBorderHover: "1px solid #0000",
    itemBorderPressed: "1px solid #0000",
    itemBorderActive: `1px solid ${n}`,
    itemBorderDisabled: `1px solid ${a}`,
    itemBorderRadius: s,
    itemSizeSmall: b,
    itemSizeMedium: m,
    itemSizeLarge: f,
    itemFontSizeSmall: d,
    itemFontSizeMedium: u,
    itemFontSizeLarge: h,
    jumperFontSizeSmall: d,
    jumperFontSizeMedium: u,
    jumperFontSizeLarge: h,
    jumperTextColor: t,
    jumperTextColorDisabled: l
  });
}
const zs = {
  name: "Pagination",
  common: rt,
  peers: {
    Select: Ps,
    Input: vs,
    Popselect: Fi
  },
  self: Qp
}, Na = `
 background: var(--n-item-color-hover);
 color: var(--n-item-text-color-hover);
 border: var(--n-item-border-hover);
`, Va = [_("button", `
 background: var(--n-button-color-hover);
 border: var(--n-button-border-hover);
 color: var(--n-button-icon-color-hover);
 `)], eb = R("pagination", `
 display: flex;
 vertical-align: middle;
 font-size: var(--n-item-font-size);
 flex-wrap: nowrap;
`, [R("pagination-prefix", `
 display: flex;
 align-items: center;
 margin: var(--n-prefix-margin);
 `), R("pagination-suffix", `
 display: flex;
 align-items: center;
 margin: var(--n-suffix-margin);
 `), B("> *:not(:first-child)", `
 margin: var(--n-item-margin);
 `), R("select", `
 width: var(--n-select-width);
 `), B("&.transition-disabled", [R("pagination-item", "transition: none!important;")]), R("pagination-quick-jumper", `
 white-space: nowrap;
 display: flex;
 color: var(--n-jumper-text-color);
 transition: color .3s var(--n-bezier);
 align-items: center;
 font-size: var(--n-jumper-font-size);
 `, [R("input", `
 margin: var(--n-input-margin);
 width: var(--n-input-width);
 `)]), R("pagination-item", `
 position: relative;
 cursor: pointer;
 user-select: none;
 -webkit-user-select: none;
 display: flex;
 align-items: center;
 justify-content: center;
 box-sizing: border-box;
 min-width: var(--n-item-size);
 height: var(--n-item-size);
 padding: var(--n-item-padding);
 background-color: var(--n-item-color);
 color: var(--n-item-text-color);
 border-radius: var(--n-item-border-radius);
 border: var(--n-item-border);
 fill: var(--n-button-icon-color);
 transition:
 color .3s var(--n-bezier),
 border-color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 fill .3s var(--n-bezier);
 `, [_("button", `
 background: var(--n-button-color);
 color: var(--n-button-icon-color);
 border: var(--n-button-border);
 padding: 0;
 `, [R("base-icon", `
 font-size: var(--n-button-icon-size);
 `)]), Je("disabled", [_("hover", Na, Va), B("&:hover", Na, Va), B("&:active", `
 background: var(--n-item-color-pressed);
 color: var(--n-item-text-color-pressed);
 border: var(--n-item-border-pressed);
 `, [_("button", `
 background: var(--n-button-color-pressed);
 border: var(--n-button-border-pressed);
 color: var(--n-button-icon-color-pressed);
 `)]), _("active", `
 background: var(--n-item-color-active);
 color: var(--n-item-text-color-active);
 border: var(--n-item-border-active);
 `, [B("&:hover", `
 background: var(--n-item-color-active-hover);
 `)])]), _("disabled", `
 cursor: not-allowed;
 color: var(--n-item-text-color-disabled);
 `, [_("active, button", `
 background-color: var(--n-item-color-disabled);
 border: var(--n-item-border-disabled);
 `)])]), _("disabled", `
 cursor: not-allowed;
 `, [R("pagination-quick-jumper", `
 color: var(--n-jumper-text-color-disabled);
 `)]), _("simple", `
 display: flex;
 align-items: center;
 flex-wrap: nowrap;
 `, [R("pagination-quick-jumper", [R("input", `
 margin: 0;
 `)])])]);
function $s(e) {
  var t;
  if (!e) return 10;
  const {
    defaultPageSize: n
  } = e;
  if (n !== void 0) return n;
  const r = (t = e.pageSizes) === null || t === void 0 ? void 0 : t[0];
  return typeof r == "number" ? r : (r == null ? void 0 : r.value) || 10;
}
function tb(e, t, n, r) {
  let o = !1, i = !1, l = 1, a = t;
  if (t === 1)
    return {
      hasFastBackward: !1,
      hasFastForward: !1,
      fastForwardTo: a,
      fastBackwardTo: l,
      items: [{
        type: "page",
        label: 1,
        active: e === 1,
        mayBeFastBackward: !1,
        mayBeFastForward: !1
      }]
    };
  if (t === 2)
    return {
      hasFastBackward: !1,
      hasFastForward: !1,
      fastForwardTo: a,
      fastBackwardTo: l,
      items: [{
        type: "page",
        label: 1,
        active: e === 1,
        mayBeFastBackward: !1,
        mayBeFastForward: !1
      }, {
        type: "page",
        label: 2,
        active: e === 2,
        mayBeFastBackward: !0,
        mayBeFastForward: !1
      }]
    };
  const s = 1, d = t;
  let u = e, h = e;
  const b = (n - 5) / 2;
  h += Math.ceil(b), h = Math.min(Math.max(h, s + n - 3), d - 2), u -= Math.floor(b), u = Math.max(Math.min(u, d - n + 3), s + 2);
  let m = !1, f = !1;
  u > s + 2 && (m = !0), h < d - 2 && (f = !0);
  const p = [];
  p.push({
    type: "page",
    label: 1,
    active: e === 1,
    mayBeFastBackward: !1,
    mayBeFastForward: !1
  }), m ? (o = !0, l = u - 1, p.push({
    type: "fast-backward",
    active: !1,
    label: void 0,
    options: r ? Ka(s + 1, u - 1) : null
  })) : d >= s + 1 && p.push({
    type: "page",
    label: s + 1,
    mayBeFastBackward: !0,
    mayBeFastForward: !1,
    active: e === s + 1
  });
  for (let v = u; v <= h; ++v)
    p.push({
      type: "page",
      label: v,
      mayBeFastBackward: !1,
      mayBeFastForward: !1,
      active: e === v
    });
  return f ? (i = !0, a = h + 1, p.push({
    type: "fast-forward",
    active: !1,
    label: void 0,
    options: r ? Ka(h + 1, d - 1) : null
  })) : h === d - 2 && p[p.length - 1].label !== d - 1 && p.push({
    type: "page",
    mayBeFastForward: !0,
    mayBeFastBackward: !1,
    label: d - 1,
    active: e === d - 1
  }), p[p.length - 1].label !== d && p.push({
    type: "page",
    mayBeFastForward: !1,
    mayBeFastBackward: !1,
    label: d,
    active: e === d
  }), {
    hasFastBackward: o,
    hasFastForward: i,
    fastBackwardTo: l,
    fastForwardTo: a,
    items: p
  };
}
function Ka(e, t) {
  const n = [];
  for (let r = e; r <= t; ++r)
    n.push({
      label: `${r}`,
      value: r
    });
  return n;
}
const nb = Object.assign(Object.assign({}, we.props), {
  simple: Boolean,
  page: Number,
  defaultPage: {
    type: Number,
    default: 1
  },
  itemCount: Number,
  pageCount: Number,
  defaultPageCount: {
    type: Number,
    default: 1
  },
  showSizePicker: Boolean,
  pageSize: Number,
  defaultPageSize: Number,
  pageSizes: {
    type: Array,
    default() {
      return [10];
    }
  },
  showQuickJumper: Boolean,
  size: {
    type: String,
    default: "medium"
  },
  disabled: Boolean,
  pageSlot: {
    type: Number,
    default: 9
  },
  selectProps: Object,
  prev: Function,
  next: Function,
  goto: Function,
  prefix: Function,
  suffix: Function,
  label: Function,
  displayOrder: {
    type: Array,
    default: ["pages", "size-picker", "quick-jumper"]
  },
  to: Qt.propTo,
  showQuickJumpDropdown: {
    type: Boolean,
    default: !0
  },
  "onUpdate:page": [Function, Array],
  onUpdatePage: [Function, Array],
  "onUpdate:pageSize": [Function, Array],
  onUpdatePageSize: [Function, Array],
  /** @deprecated */
  onPageSizeChange: [Function, Array],
  /** @deprecated */
  onChange: [Function, Array]
}), rb = ie({
  name: "Pagination",
  props: nb,
  slots: Object,
  setup(e) {
    const {
      mergedComponentPropsRef: t,
      mergedClsPrefixRef: n,
      inlineThemeDisabled: r,
      mergedRtlRef: o
    } = _e(e), i = we("Pagination", "-pagination", eb, zs, e, n), {
      localeRef: l
    } = Pn("Pagination"), a = L(null), s = L(e.defaultPage), d = L($s(e)), u = zt(ae(e, "page"), s), h = zt(ae(e, "pageSize"), d), b = T(() => {
      const {
        itemCount: K
      } = e;
      if (K !== void 0)
        return Math.max(1, Math.ceil(K / h.value));
      const {
        pageCount: fe
      } = e;
      return fe !== void 0 ? Math.max(fe, 1) : 1;
    }), m = L("");
    Bt(() => {
      e.simple, m.value = String(u.value);
    });
    const f = L(!1), p = L(!1), v = L(!1), g = L(!1), y = () => {
      e.disabled || (f.value = !0, F());
    }, S = () => {
      e.disabled || (f.value = !1, F());
    }, w = () => {
      p.value = !0, F();
    }, C = () => {
      p.value = !1, F();
    }, k = (K) => {
      N(K);
    }, x = T(() => tb(u.value, b.value, e.pageSlot, e.showQuickJumpDropdown));
    Bt(() => {
      x.value.hasFastBackward ? x.value.hasFastForward || (f.value = !1, v.value = !1) : (p.value = !1, g.value = !1);
    });
    const z = T(() => {
      const K = l.value.selectionSuffix;
      return e.pageSizes.map((fe) => typeof fe == "number" ? {
        label: `${fe} / ${K}`,
        value: fe
      } : fe);
    }), $ = T(() => {
      var K, fe;
      return ((fe = (K = t == null ? void 0 : t.value) === null || K === void 0 ? void 0 : K.Pagination) === null || fe === void 0 ? void 0 : fe.inputSize) || ka(e.size);
    }), M = T(() => {
      var K, fe;
      return ((fe = (K = t == null ? void 0 : t.value) === null || K === void 0 ? void 0 : K.Pagination) === null || fe === void 0 ? void 0 : fe.selectSize) || ka(e.size);
    }), V = T(() => (u.value - 1) * h.value), O = T(() => {
      const K = u.value * h.value - 1, {
        itemCount: fe
      } = e;
      return fe !== void 0 && K > fe - 1 ? fe - 1 : K;
    }), E = T(() => {
      const {
        itemCount: K
      } = e;
      return K !== void 0 ? K : (e.pageCount || 1) * h.value;
    }), I = $t("Pagination", o, n);
    function F() {
      Tt(() => {
        var K;
        const {
          value: fe
        } = a;
        fe && (fe.classList.add("transition-disabled"), (K = a.value) === null || K === void 0 || K.offsetWidth, fe.classList.remove("transition-disabled"));
      });
    }
    function N(K) {
      if (K === u.value) return;
      const {
        "onUpdate:page": fe,
        onUpdatePage: Me,
        onChange: ye,
        simple: Fe
      } = e;
      fe && oe(fe, K), Me && oe(Me, K), ye && oe(ye, K), s.value = K, Fe && (m.value = String(K));
    }
    function W(K) {
      if (K === h.value) return;
      const {
        "onUpdate:pageSize": fe,
        onUpdatePageSize: Me,
        onPageSizeChange: ye
      } = e;
      fe && oe(fe, K), Me && oe(Me, K), ye && oe(ye, K), d.value = K, b.value < u.value && N(b.value);
    }
    function X() {
      if (e.disabled) return;
      const K = Math.min(u.value + 1, b.value);
      N(K);
    }
    function re() {
      if (e.disabled) return;
      const K = Math.max(u.value - 1, 1);
      N(K);
    }
    function Q() {
      if (e.disabled) return;
      const K = Math.min(x.value.fastForwardTo, b.value);
      N(K);
    }
    function G() {
      if (e.disabled) return;
      const K = Math.max(x.value.fastBackwardTo, 1);
      N(K);
    }
    function j(K) {
      W(K);
    }
    function q() {
      const K = Number.parseInt(m.value);
      Number.isNaN(K) || (N(Math.max(1, Math.min(K, b.value))), e.simple || (m.value = ""));
    }
    function Z() {
      q();
    }
    function le(K) {
      if (!e.disabled)
        switch (K.type) {
          case "page":
            N(K.label);
            break;
          case "fast-backward":
            G();
            break;
          case "fast-forward":
            Q();
            break;
        }
    }
    function ue(K) {
      m.value = K.replace(/\D+/g, "");
    }
    Bt(() => {
      u.value, h.value, F();
    });
    const be = T(() => {
      const {
        size: K
      } = e, {
        self: {
          buttonBorder: fe,
          buttonBorderHover: Me,
          buttonBorderPressed: ye,
          buttonIconColor: Fe,
          buttonIconColorHover: Te,
          buttonIconColorPressed: Qe,
          itemTextColor: qe,
          itemTextColorHover: tt,
          itemTextColorPressed: et,
          itemTextColorActive: me,
          itemTextColorDisabled: U,
          itemColor: Y,
          itemColorHover: de,
          itemColorPressed: xe,
          itemColorActive: te,
          itemColorActiveHover: ce,
          itemColorDisabled: ze,
          itemBorder: Ne,
          itemBorderHover: st,
          itemBorderPressed: ft,
          itemBorderActive: at,
          itemBorderDisabled: Xe,
          itemBorderRadius: dt,
          jumperTextColor: Ge,
          jumperTextColorDisabled: pe,
          buttonColor: Pe,
          buttonColorHover: P,
          buttonColorPressed: D,
          [J("itemPadding", K)]: ee,
          [J("itemMargin", K)]: se,
          [J("inputWidth", K)]: he,
          [J("selectWidth", K)]: ge,
          [J("inputMargin", K)]: ve,
          [J("selectMargin", K)]: Se,
          [J("jumperFontSize", K)]: Ee,
          [J("prefixMargin", K)]: Ye,
          [J("suffixMargin", K)]: Le,
          [J("itemSize", K)]: bt,
          [J("buttonIconSize", K)]: xt,
          [J("itemFontSize", K)]: yt,
          [`${J("itemMargin", K)}Rtl`]: Ct,
          [`${J("inputMargin", K)}Rtl`]: St
        },
        common: {
          cubicBezierEaseInOut: Mt
        }
      } = i.value;
      return {
        "--n-prefix-margin": Ye,
        "--n-suffix-margin": Le,
        "--n-item-font-size": yt,
        "--n-select-width": ge,
        "--n-select-margin": Se,
        "--n-input-width": he,
        "--n-input-margin": ve,
        "--n-input-margin-rtl": St,
        "--n-item-size": bt,
        "--n-item-text-color": qe,
        "--n-item-text-color-disabled": U,
        "--n-item-text-color-hover": tt,
        "--n-item-text-color-active": me,
        "--n-item-text-color-pressed": et,
        "--n-item-color": Y,
        "--n-item-color-hover": de,
        "--n-item-color-disabled": ze,
        "--n-item-color-active": te,
        "--n-item-color-active-hover": ce,
        "--n-item-color-pressed": xe,
        "--n-item-border": Ne,
        "--n-item-border-hover": st,
        "--n-item-border-disabled": Xe,
        "--n-item-border-active": at,
        "--n-item-border-pressed": ft,
        "--n-item-padding": ee,
        "--n-item-border-radius": dt,
        "--n-bezier": Mt,
        "--n-jumper-font-size": Ee,
        "--n-jumper-text-color": Ge,
        "--n-jumper-text-color-disabled": pe,
        "--n-item-margin": se,
        "--n-item-margin-rtl": Ct,
        "--n-button-icon-size": xt,
        "--n-button-icon-color": Fe,
        "--n-button-icon-color-hover": Te,
        "--n-button-icon-color-pressed": Qe,
        "--n-button-color-hover": P,
        "--n-button-color": Pe,
        "--n-button-color-pressed": D,
        "--n-button-border": fe,
        "--n-button-border-hover": Me,
        "--n-button-border-pressed": ye
      };
    }), Re = r ? it("pagination", T(() => {
      let K = "";
      const {
        size: fe
      } = e;
      return K += fe[0], K;
    }), be, e) : void 0;
    return {
      rtlEnabled: I,
      mergedClsPrefix: n,
      locale: l,
      selfRef: a,
      mergedPage: u,
      pageItems: T(() => x.value.items),
      mergedItemCount: E,
      jumperValue: m,
      pageSizeOptions: z,
      mergedPageSize: h,
      inputSize: $,
      selectSize: M,
      mergedTheme: i,
      mergedPageCount: b,
      startIndex: V,
      endIndex: O,
      showFastForwardMenu: v,
      showFastBackwardMenu: g,
      fastForwardActive: f,
      fastBackwardActive: p,
      handleMenuSelect: k,
      handleFastForwardMouseenter: y,
      handleFastForwardMouseleave: S,
      handleFastBackwardMouseenter: w,
      handleFastBackwardMouseleave: C,
      handleJumperInput: ue,
      handleBackwardClick: re,
      handleForwardClick: X,
      handlePageItemClick: le,
      handleSizePickerChange: j,
      handleQuickJumperChange: Z,
      cssVars: r ? void 0 : be,
      themeClass: Re == null ? void 0 : Re.themeClass,
      onRender: Re == null ? void 0 : Re.onRender
    };
  },
  render() {
    const {
      $slots: e,
      mergedClsPrefix: t,
      disabled: n,
      cssVars: r,
      mergedPage: o,
      mergedPageCount: i,
      pageItems: l,
      showSizePicker: a,
      showQuickJumper: s,
      mergedTheme: d,
      locale: u,
      inputSize: h,
      selectSize: b,
      mergedPageSize: m,
      pageSizeOptions: f,
      jumperValue: p,
      simple: v,
      prev: g,
      next: y,
      prefix: S,
      suffix: w,
      label: C,
      goto: k,
      handleJumperInput: x,
      handleSizePickerChange: z,
      handleBackwardClick: $,
      handlePageItemClick: M,
      handleForwardClick: V,
      handleQuickJumperChange: O,
      onRender: E
    } = this;
    E == null || E();
    const I = S || e.prefix, F = w || e.suffix, N = g || e.prev, W = y || e.next, X = C || e.label;
    return c("div", {
      ref: "selfRef",
      class: [`${t}-pagination`, this.themeClass, this.rtlEnabled && `${t}-pagination--rtl`, n && `${t}-pagination--disabled`, v && `${t}-pagination--simple`],
      style: r
    }, I ? c("div", {
      class: `${t}-pagination-prefix`
    }, I({
      page: o,
      pageSize: m,
      pageCount: i,
      startIndex: this.startIndex,
      endIndex: this.endIndex,
      itemCount: this.mergedItemCount
    })) : null, this.displayOrder.map((re) => {
      switch (re) {
        case "pages":
          return c(Pt, null, c("div", {
            class: [`${t}-pagination-item`, !N && `${t}-pagination-item--button`, (o <= 1 || o > i || n) && `${t}-pagination-item--disabled`],
            onClick: $
          }, N ? N({
            page: o,
            pageSize: m,
            pageCount: i,
            startIndex: this.startIndex,
            endIndex: this.endIndex,
            itemCount: this.mergedItemCount
          }) : c(ct, {
            clsPrefix: t
          }, {
            default: () => this.rtlEnabled ? c(Ma, null) : c(za, null)
          })), v ? c(Pt, null, c("div", {
            class: `${t}-pagination-quick-jumper`
          }, c(ja, {
            value: p,
            onUpdateValue: x,
            size: h,
            placeholder: "",
            disabled: n,
            theme: d.peers.Input,
            themeOverrides: d.peerOverrides.Input,
            onChange: O
          })), " /", " ", i) : l.map((Q, G) => {
            let j, q, Z;
            const {
              type: le
            } = Q;
            switch (le) {
              case "page":
                const be = Q.label;
                X ? j = X({
                  type: "page",
                  node: be,
                  active: Q.active
                }) : j = be;
                break;
              case "fast-forward":
                const Re = this.fastForwardActive ? c(ct, {
                  clsPrefix: t
                }, {
                  default: () => this.rtlEnabled ? c($a, null) : c(Ta, null)
                }) : c(ct, {
                  clsPrefix: t
                }, {
                  default: () => c(Fa, null)
                });
                X ? j = X({
                  type: "fast-forward",
                  node: Re,
                  active: this.fastForwardActive || this.showFastForwardMenu
                }) : j = Re, q = this.handleFastForwardMouseenter, Z = this.handleFastForwardMouseleave;
                break;
              case "fast-backward":
                const K = this.fastBackwardActive ? c(ct, {
                  clsPrefix: t
                }, {
                  default: () => this.rtlEnabled ? c(Ta, null) : c($a, null)
                }) : c(ct, {
                  clsPrefix: t
                }, {
                  default: () => c(Fa, null)
                });
                X ? j = X({
                  type: "fast-backward",
                  node: K,
                  active: this.fastBackwardActive || this.showFastBackwardMenu
                }) : j = K, q = this.handleFastBackwardMouseenter, Z = this.handleFastBackwardMouseleave;
                break;
            }
            const ue = c("div", {
              key: G,
              class: [`${t}-pagination-item`, Q.active && `${t}-pagination-item--active`, le !== "page" && (le === "fast-backward" && this.showFastBackwardMenu || le === "fast-forward" && this.showFastForwardMenu) && `${t}-pagination-item--hover`, n && `${t}-pagination-item--disabled`, le === "page" && `${t}-pagination-item--clickable`],
              onClick: () => {
                M(Q);
              },
              onMouseenter: q,
              onMouseleave: Z
            }, j);
            if (le === "page" && !Q.mayBeFastBackward && !Q.mayBeFastForward)
              return ue;
            {
              const be = Q.type === "page" ? Q.mayBeFastBackward ? "fast-backward" : "fast-forward" : Q.type;
              return Q.type !== "page" && !Q.options ? ue : c(qp, {
                to: this.to,
                key: be,
                disabled: n,
                trigger: "hover",
                virtualScroll: !0,
                style: {
                  width: "60px"
                },
                theme: d.peers.Popselect,
                themeOverrides: d.peerOverrides.Popselect,
                builtinThemeOverrides: {
                  peers: {
                    InternalSelectMenu: {
                      height: "calc(var(--n-option-height) * 4.6)"
                    }
                  }
                },
                nodeProps: () => ({
                  style: {
                    justifyContent: "center"
                  }
                }),
                show: le === "page" ? !1 : le === "fast-backward" ? this.showFastBackwardMenu : this.showFastForwardMenu,
                onUpdateShow: (Re) => {
                  le !== "page" && (Re ? le === "fast-backward" ? this.showFastBackwardMenu = Re : this.showFastForwardMenu = Re : (this.showFastBackwardMenu = !1, this.showFastForwardMenu = !1));
                },
                options: Q.type !== "page" && Q.options ? Q.options : [],
                onUpdateValue: this.handleMenuSelect,
                scrollable: !0,
                showCheckmark: !1
              }, {
                default: () => ue
              });
            }
          }), c("div", {
            class: [`${t}-pagination-item`, !W && `${t}-pagination-item--button`, {
              [`${t}-pagination-item--disabled`]: o < 1 || o >= i || n
            }],
            onClick: V
          }, W ? W({
            page: o,
            pageSize: m,
            pageCount: i,
            itemCount: this.mergedItemCount,
            startIndex: this.startIndex,
            endIndex: this.endIndex
          }) : c(ct, {
            clsPrefix: t
          }, {
            default: () => this.rtlEnabled ? c(za, null) : c(Ma, null)
          })));
        case "size-picker":
          return !v && a ? c(Zp, Object.assign({
            consistentMenuWidth: !1,
            placeholder: "",
            showCheckmark: !1,
            to: this.to
          }, this.selectProps, {
            size: b,
            options: f,
            value: m,
            disabled: n,
            theme: d.peers.Select,
            themeOverrides: d.peerOverrides.Select,
            onUpdateValue: z
          })) : null;
        case "quick-jumper":
          return !v && s ? c("div", {
            class: `${t}-pagination-quick-jumper`
          }, k ? k() : Et(this.$slots.goto, () => [u.goto]), c(ja, {
            value: p,
            onUpdateValue: x,
            size: h,
            placeholder: "",
            disabled: n,
            theme: d.peers.Input,
            themeOverrides: d.peerOverrides.Input,
            onChange: O
          })) : null;
        default:
          return null;
      }
    }), F ? c("div", {
      class: `${t}-pagination-suffix`
    }, F({
      page: o,
      pageSize: m,
      pageCount: i,
      startIndex: this.startIndex,
      endIndex: this.endIndex,
      itemCount: this.mergedItemCount
    })) : null);
  }
}), ob = {
  padding: "4px 0",
  optionIconSizeSmall: "14px",
  optionIconSizeMedium: "16px",
  optionIconSizeLarge: "16px",
  optionIconSizeHuge: "18px",
  optionSuffixWidthSmall: "14px",
  optionSuffixWidthMedium: "14px",
  optionSuffixWidthLarge: "16px",
  optionSuffixWidthHuge: "16px",
  optionIconSuffixWidthSmall: "32px",
  optionIconSuffixWidthMedium: "32px",
  optionIconSuffixWidthLarge: "36px",
  optionIconSuffixWidthHuge: "36px",
  optionPrefixWidthSmall: "14px",
  optionPrefixWidthMedium: "14px",
  optionPrefixWidthLarge: "16px",
  optionPrefixWidthHuge: "16px",
  optionIconPrefixWidthSmall: "36px",
  optionIconPrefixWidthMedium: "36px",
  optionIconPrefixWidthLarge: "40px",
  optionIconPrefixWidthHuge: "40px"
};
function ib(e) {
  const {
    primaryColor: t,
    textColor2: n,
    dividerColor: r,
    hoverColor: o,
    popoverColor: i,
    invertedColor: l,
    borderRadius: a,
    fontSizeSmall: s,
    fontSizeMedium: d,
    fontSizeLarge: u,
    fontSizeHuge: h,
    heightSmall: b,
    heightMedium: m,
    heightLarge: f,
    heightHuge: p,
    textColor3: v,
    opacityDisabled: g
  } = e;
  return Object.assign(Object.assign({}, ob), {
    optionHeightSmall: b,
    optionHeightMedium: m,
    optionHeightLarge: f,
    optionHeightHuge: p,
    borderRadius: a,
    fontSizeSmall: s,
    fontSizeMedium: d,
    fontSizeLarge: u,
    fontSizeHuge: h,
    // non-inverted
    optionTextColor: n,
    optionTextColorHover: n,
    optionTextColorActive: t,
    optionTextColorChildActive: t,
    color: i,
    dividerColor: r,
    suffixColor: n,
    prefixColor: n,
    optionColorHover: o,
    optionColorActive: Oe(t, {
      alpha: 0.1
    }),
    groupHeaderTextColor: v,
    // inverted
    optionTextColorInverted: "#BBB",
    optionTextColorHoverInverted: "#FFF",
    optionTextColorActiveInverted: "#FFF",
    optionTextColorChildActiveInverted: "#FFF",
    colorInverted: l,
    dividerColorInverted: "#BBB",
    suffixColorInverted: "#BBB",
    prefixColorInverted: "#BBB",
    optionColorHoverInverted: t,
    optionColorActiveInverted: t,
    groupHeaderTextColorInverted: "#AAA",
    optionOpacityDisabled: g
  });
}
const Ts = {
  name: "Dropdown",
  common: rt,
  peers: {
    Popover: Fn
  },
  self: ib
}, ab = {
  padding: "8px 14px"
};
function lb(e) {
  const {
    borderRadius: t,
    boxShadow2: n,
    baseColor: r
  } = e;
  return Object.assign(Object.assign({}, ab), {
    borderRadius: t,
    boxShadow: n,
    color: Ke(r, "rgba(0, 0, 0, .85)"),
    textColor: r
  });
}
const Ms = {
  name: "Tooltip",
  common: rt,
  peers: {
    Popover: Fn
  },
  self: lb
}, Fs = {
  name: "Ellipsis",
  common: rt,
  peers: {
    Tooltip: Ms
  }
}, sb = {
  radioSizeSmall: "14px",
  radioSizeMedium: "16px",
  radioSizeLarge: "18px",
  labelPadding: "0 8px",
  labelFontWeight: "400"
};
function db(e) {
  const {
    borderColor: t,
    primaryColor: n,
    baseColor: r,
    textColorDisabled: o,
    inputColorDisabled: i,
    textColor2: l,
    opacityDisabled: a,
    borderRadius: s,
    fontSizeSmall: d,
    fontSizeMedium: u,
    fontSizeLarge: h,
    heightSmall: b,
    heightMedium: m,
    heightLarge: f,
    lineHeight: p
  } = e;
  return Object.assign(Object.assign({}, sb), {
    labelLineHeight: p,
    buttonHeightSmall: b,
    buttonHeightMedium: m,
    buttonHeightLarge: f,
    fontSizeSmall: d,
    fontSizeMedium: u,
    fontSizeLarge: h,
    boxShadow: `inset 0 0 0 1px ${t}`,
    boxShadowActive: `inset 0 0 0 1px ${n}`,
    boxShadowFocus: `inset 0 0 0 1px ${n}, 0 0 0 2px ${Oe(n, {
      alpha: 0.2
    })}`,
    boxShadowHover: `inset 0 0 0 1px ${n}`,
    boxShadowDisabled: `inset 0 0 0 1px ${t}`,
    color: r,
    colorDisabled: i,
    colorActive: "#0000",
    textColor: l,
    textColorDisabled: o,
    dotColorActive: n,
    dotColorDisabled: t,
    buttonBorderColor: t,
    buttonBorderColorActive: n,
    buttonBorderColorHover: t,
    buttonColor: r,
    buttonColorActive: r,
    buttonTextColor: l,
    buttonTextColorActive: n,
    buttonTextColorHover: n,
    opacityDisabled: a,
    buttonBoxShadowFocus: `inset 0 0 0 1px ${n}, 0 0 0 2px ${Oe(n, {
      alpha: 0.3
    })}`,
    buttonBoxShadowHover: "inset 0 0 0 1px #0000",
    buttonBoxShadow: "inset 0 0 0 1px #0000",
    buttonBorderRadius: s
  });
}
const Bi = {
  name: "Radio",
  common: rt,
  self: db
}, cb = {
  thPaddingSmall: "8px",
  thPaddingMedium: "12px",
  thPaddingLarge: "12px",
  tdPaddingSmall: "8px",
  tdPaddingMedium: "12px",
  tdPaddingLarge: "12px",
  sorterSize: "15px",
  resizableContainerSize: "8px",
  resizableSize: "2px",
  filterSize: "15px",
  paginationMargin: "12px 0 0 0",
  emptyPadding: "48px 0",
  actionPadding: "8px 12px",
  actionButtonMargin: "0 8px 0 0"
};
function ub(e) {
  const {
    cardColor: t,
    modalColor: n,
    popoverColor: r,
    textColor2: o,
    textColor1: i,
    tableHeaderColor: l,
    tableColorHover: a,
    iconColor: s,
    primaryColor: d,
    fontWeightStrong: u,
    borderRadius: h,
    lineHeight: b,
    fontSizeSmall: m,
    fontSizeMedium: f,
    fontSizeLarge: p,
    dividerColor: v,
    heightSmall: g,
    opacityDisabled: y,
    tableColorStriped: S
  } = e;
  return Object.assign(Object.assign({}, cb), {
    actionDividerColor: v,
    lineHeight: b,
    borderRadius: h,
    fontSizeSmall: m,
    fontSizeMedium: f,
    fontSizeLarge: p,
    borderColor: Ke(t, v),
    tdColorHover: Ke(t, a),
    tdColorSorting: Ke(t, a),
    tdColorStriped: Ke(t, S),
    thColor: Ke(t, l),
    thColorHover: Ke(Ke(t, l), a),
    thColorSorting: Ke(Ke(t, l), a),
    tdColor: t,
    tdTextColor: o,
    thTextColor: i,
    thFontWeight: u,
    thButtonColorHover: a,
    thIconColor: s,
    thIconColorActive: d,
    // modal
    borderColorModal: Ke(n, v),
    tdColorHoverModal: Ke(n, a),
    tdColorSortingModal: Ke(n, a),
    tdColorStripedModal: Ke(n, S),
    thColorModal: Ke(n, l),
    thColorHoverModal: Ke(Ke(n, l), a),
    thColorSortingModal: Ke(Ke(n, l), a),
    tdColorModal: n,
    // popover
    borderColorPopover: Ke(r, v),
    tdColorHoverPopover: Ke(r, a),
    tdColorSortingPopover: Ke(r, a),
    tdColorStripedPopover: Ke(r, S),
    thColorPopover: Ke(r, l),
    thColorHoverPopover: Ke(Ke(r, l), a),
    thColorSortingPopover: Ke(Ke(r, l), a),
    tdColorPopover: r,
    boxShadowBefore: "inset -12px 0 8px -12px rgba(0, 0, 0, .18)",
    boxShadowAfter: "inset 12px 0 8px -12px rgba(0, 0, 0, .18)",
    // loading
    loadingColor: d,
    loadingSize: g,
    opacityLoading: y
  });
}
const fb = {
  name: "DataTable",
  common: rt,
  peers: {
    Button: so,
    Checkbox: Ss,
    Radio: Bi,
    Pagination: zs,
    Scrollbar: ao,
    Empty: zi,
    Popover: Fn,
    Ellipsis: Fs,
    Dropdown: Ts
  },
  self: ub
}, hb = Object.assign(Object.assign({}, we.props), {
  onUnstableColumnResize: Function,
  pagination: {
    type: [Object, Boolean],
    default: !1
  },
  paginateSinglePage: {
    type: Boolean,
    default: !0
  },
  minHeight: [Number, String],
  maxHeight: [Number, String],
  // Use any type as row data to make prop data acceptable
  columns: {
    type: Array,
    default: () => []
  },
  rowClassName: [String, Function],
  rowProps: Function,
  rowKey: Function,
  summary: [Function],
  data: {
    type: Array,
    default: () => []
  },
  loading: Boolean,
  bordered: {
    type: Boolean,
    default: void 0
  },
  bottomBordered: {
    type: Boolean,
    default: void 0
  },
  striped: Boolean,
  scrollX: [Number, String],
  defaultCheckedRowKeys: {
    type: Array,
    default: () => []
  },
  checkedRowKeys: Array,
  singleLine: {
    type: Boolean,
    default: !0
  },
  singleColumn: Boolean,
  size: {
    type: String,
    default: "medium"
  },
  remote: Boolean,
  defaultExpandedRowKeys: {
    type: Array,
    default: []
  },
  defaultExpandAll: Boolean,
  expandedRowKeys: Array,
  stickyExpandedRows: Boolean,
  virtualScroll: Boolean,
  virtualScrollX: Boolean,
  virtualScrollHeader: Boolean,
  headerHeight: {
    type: Number,
    default: 28
  },
  heightForRow: Function,
  minRowHeight: {
    type: Number,
    default: 28
  },
  tableLayout: {
    type: String,
    default: "auto"
  },
  allowCheckingNotLoaded: Boolean,
  cascade: {
    type: Boolean,
    default: !0
  },
  childrenKey: {
    type: String,
    default: "children"
  },
  indent: {
    type: Number,
    default: 16
  },
  flexHeight: Boolean,
  summaryPlacement: {
    type: String,
    default: "bottom"
  },
  paginationBehaviorOnFilter: {
    type: String,
    default: "current"
  },
  filterIconPopoverProps: Object,
  scrollbarProps: Object,
  renderCell: Function,
  renderExpandIcon: Function,
  spinProps: {
    type: Object,
    default: {}
  },
  getCsvCell: Function,
  getCsvHeader: Function,
  onLoad: Function,
  "onUpdate:page": [Function, Array],
  onUpdatePage: [Function, Array],
  "onUpdate:pageSize": [Function, Array],
  onUpdatePageSize: [Function, Array],
  "onUpdate:sorter": [Function, Array],
  onUpdateSorter: [Function, Array],
  "onUpdate:filters": [Function, Array],
  onUpdateFilters: [Function, Array],
  "onUpdate:checkedRowKeys": [Function, Array],
  onUpdateCheckedRowKeys: [Function, Array],
  "onUpdate:expandedRowKeys": [Function, Array],
  onUpdateExpandedRowKeys: [Function, Array],
  onScroll: Function,
  // deprecated
  onPageChange: [Function, Array],
  onPageSizeChange: [Function, Array],
  onSorterChange: [Function, Array],
  onFiltersChange: [Function, Array],
  onCheckedRowKeysChange: [Function, Array]
}), qt = "n-data-table", Os = 40, Bs = 40;
function Ua(e) {
  if (e.type === "selection")
    return e.width === void 0 ? Os : Nt(e.width);
  if (e.type === "expand")
    return e.width === void 0 ? Bs : Nt(e.width);
  if (!("children" in e))
    return typeof e.width == "string" ? Nt(e.width) : e.width;
}
function pb(e) {
  var t, n;
  if (e.type === "selection")
    return ot((t = e.width) !== null && t !== void 0 ? t : Os);
  if (e.type === "expand")
    return ot((n = e.width) !== null && n !== void 0 ? n : Bs);
  if (!("children" in e))
    return ot(e.width);
}
function Dt(e) {
  return e.type === "selection" ? "__n_selection__" : e.type === "expand" ? "__n_expand__" : e.key;
}
function qa(e) {
  return e && (typeof e == "object" ? Object.assign({}, e) : e);
}
function bb(e) {
  return e === "ascend" ? 1 : e === "descend" ? -1 : 0;
}
function gb(e, t, n) {
  return n !== void 0 && (e = Math.min(e, typeof n == "number" ? n : Number.parseFloat(n))), t !== void 0 && (e = Math.max(e, typeof t == "number" ? t : Number.parseFloat(t))), e;
}
function mb(e, t) {
  if (t !== void 0)
    return {
      width: t,
      minWidth: t,
      maxWidth: t
    };
  const n = pb(e), {
    minWidth: r,
    maxWidth: o
  } = e;
  return {
    width: n,
    minWidth: ot(r) || n,
    maxWidth: ot(o)
  };
}
function vb(e, t, n) {
  return typeof n == "function" ? n(e, t) : n || "";
}
function Lo(e) {
  return e.filterOptionValues !== void 0 || e.filterOptionValue === void 0 && e.defaultFilterOptionValues !== void 0;
}
function Ho(e) {
  return "children" in e ? !1 : !!e.sorter;
}
function Es(e) {
  return "children" in e && e.children.length ? !1 : !!e.resizable;
}
function Ga(e) {
  return "children" in e ? !1 : !!e.filter && (!!e.filterOptions || !!e.renderFilterMenu);
}
function Xa(e) {
  if (e) {
    if (e === "descend") return "ascend";
  } else return "descend";
  return !1;
}
function xb(e, t) {
  return e.sorter === void 0 ? null : t === null || t.columnKey !== e.key ? {
    columnKey: e.key,
    sorter: e.sorter,
    order: Xa(!1)
  } : Object.assign(Object.assign({}, t), {
    order: Xa(t.order)
  });
}
function Is(e, t) {
  return t.find((n) => n.columnKey === e.key && n.order) !== void 0;
}
function yb(e) {
  return typeof e == "string" ? e.replace(/,/g, "\\,") : e == null ? "" : `${e}`.replace(/,/g, "\\,");
}
function wb(e, t, n, r) {
  const o = e.filter((a) => a.type !== "expand" && a.type !== "selection" && a.allowExport !== !1), i = o.map((a) => r ? r(a) : a.title).join(","), l = t.map((a) => o.map((s) => n ? n(a[s.key], a, s) : yb(a[s.key])).join(","));
  return [i, ...l].join(`
`);
}
const Cb = ie({
  name: "DataTableBodyCheckbox",
  props: {
    rowKey: {
      type: [String, Number],
      required: !0
    },
    disabled: {
      type: Boolean,
      required: !0
    },
    onUpdateChecked: {
      type: Function,
      required: !0
    }
  },
  setup(e) {
    const {
      mergedCheckedRowKeySetRef: t,
      mergedInderminateRowKeySetRef: n
    } = ke(qt);
    return () => {
      const {
        rowKey: r
      } = e;
      return c(Mi, {
        privateInsideTable: !0,
        disabled: e.disabled,
        indeterminate: n.value.has(r),
        checked: t.value.has(r),
        onUpdateChecked: e.onUpdateChecked
      });
    };
  }
}), Sb = R("radio", `
 line-height: var(--n-label-line-height);
 outline: none;
 position: relative;
 user-select: none;
 -webkit-user-select: none;
 display: inline-flex;
 align-items: flex-start;
 flex-wrap: nowrap;
 font-size: var(--n-font-size);
 word-break: break-word;
`, [_("checked", [A("dot", `
 background-color: var(--n-color-active);
 `)]), A("dot-wrapper", `
 position: relative;
 flex-shrink: 0;
 flex-grow: 0;
 width: var(--n-radio-size);
 `), R("radio-input", `
 position: absolute;
 border: 0;
 border-radius: inherit;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 opacity: 0;
 z-index: 1;
 cursor: pointer;
 `), A("dot", `
 position: absolute;
 top: 50%;
 left: 0;
 transform: translateY(-50%);
 height: var(--n-radio-size);
 width: var(--n-radio-size);
 background: var(--n-color);
 box-shadow: var(--n-box-shadow);
 border-radius: 50%;
 transition:
 background-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier);
 `, [B("&::before", `
 content: "";
 opacity: 0;
 position: absolute;
 left: 4px;
 top: 4px;
 height: calc(100% - 8px);
 width: calc(100% - 8px);
 border-radius: 50%;
 transform: scale(.8);
 background: var(--n-dot-color-active);
 transition: 
 opacity .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 transform .3s var(--n-bezier);
 `), _("checked", {
  boxShadow: "var(--n-box-shadow-active)"
}, [B("&::before", `
 opacity: 1;
 transform: scale(1);
 `)])]), A("label", `
 color: var(--n-text-color);
 padding: var(--n-label-padding);
 font-weight: var(--n-label-font-weight);
 display: inline-block;
 transition: color .3s var(--n-bezier);
 `), Je("disabled", `
 cursor: pointer;
 `, [B("&:hover", [A("dot", {
  boxShadow: "var(--n-box-shadow-hover)"
})]), _("focus", [B("&:not(:active)", [A("dot", {
  boxShadow: "var(--n-box-shadow-focus)"
})])])]), _("disabled", `
 cursor: not-allowed;
 `, [A("dot", {
  boxShadow: "var(--n-box-shadow-disabled)",
  backgroundColor: "var(--n-color-disabled)"
}, [B("&::before", {
  backgroundColor: "var(--n-dot-color-disabled)"
}), _("checked", `
 opacity: 1;
 `)]), A("label", {
  color: "var(--n-text-color-disabled)"
}), R("radio-input", `
 cursor: not-allowed;
 `)])]), kb = {
  name: String,
  value: {
    type: [String, Number, Boolean],
    default: "on"
  },
  checked: {
    type: Boolean,
    default: void 0
  },
  defaultChecked: Boolean,
  disabled: {
    type: Boolean,
    default: void 0
  },
  label: String,
  size: String,
  onUpdateChecked: [Function, Array],
  "onUpdate:checked": [Function, Array],
  // deprecated
  checkedValue: {
    type: Boolean,
    default: void 0
  }
}, _s = "n-radio-group";
function Rb(e) {
  const t = ke(_s, null), n = Tn(e, {
    mergedSize(y) {
      const {
        size: S
      } = e;
      if (S !== void 0) return S;
      if (t) {
        const {
          mergedSizeRef: {
            value: w
          }
        } = t;
        if (w !== void 0)
          return w;
      }
      return y ? y.mergedSize.value : "medium";
    },
    mergedDisabled(y) {
      return !!(e.disabled || t != null && t.disabledRef.value || y != null && y.disabled.value);
    }
  }), {
    mergedSizeRef: r,
    mergedDisabledRef: o
  } = n, i = L(null), l = L(null), a = L(e.defaultChecked), s = ae(e, "checked"), d = zt(s, a), u = Ue(() => t ? t.valueRef.value === e.value : d.value), h = Ue(() => {
    const {
      name: y
    } = e;
    if (y !== void 0) return y;
    if (t) return t.nameRef.value;
  }), b = L(!1);
  function m() {
    if (t) {
      const {
        doUpdateValue: y
      } = t, {
        value: S
      } = e;
      oe(y, S);
    } else {
      const {
        onUpdateChecked: y,
        "onUpdate:checked": S
      } = e, {
        nTriggerFormInput: w,
        nTriggerFormChange: C
      } = n;
      y && oe(y, !0), S && oe(S, !0), w(), C(), a.value = !0;
    }
  }
  function f() {
    o.value || u.value || m();
  }
  function p() {
    f(), i.value && (i.value.checked = u.value);
  }
  function v() {
    b.value = !1;
  }
  function g() {
    b.value = !0;
  }
  return {
    mergedClsPrefix: t ? t.mergedClsPrefixRef : _e(e).mergedClsPrefixRef,
    inputRef: i,
    labelRef: l,
    mergedName: h,
    mergedDisabled: o,
    renderSafeChecked: u,
    focus: b,
    mergedSize: r,
    handleRadioInputChange: p,
    handleRadioInputBlur: v,
    handleRadioInputFocus: g
  };
}
const Pb = Object.assign(Object.assign({}, we.props), kb), As = ie({
  name: "Radio",
  props: Pb,
  setup(e) {
    const t = Rb(e), n = we("Radio", "-radio", Sb, Bi, e, t.mergedClsPrefix), r = T(() => {
      const {
        mergedSize: {
          value: d
        }
      } = t, {
        common: {
          cubicBezierEaseInOut: u
        },
        self: {
          boxShadow: h,
          boxShadowActive: b,
          boxShadowDisabled: m,
          boxShadowFocus: f,
          boxShadowHover: p,
          color: v,
          colorDisabled: g,
          colorActive: y,
          textColor: S,
          textColorDisabled: w,
          dotColorActive: C,
          dotColorDisabled: k,
          labelPadding: x,
          labelLineHeight: z,
          labelFontWeight: $,
          [J("fontSize", d)]: M,
          [J("radioSize", d)]: V
        }
      } = n.value;
      return {
        "--n-bezier": u,
        "--n-label-line-height": z,
        "--n-label-font-weight": $,
        "--n-box-shadow": h,
        "--n-box-shadow-active": b,
        "--n-box-shadow-disabled": m,
        "--n-box-shadow-focus": f,
        "--n-box-shadow-hover": p,
        "--n-color": v,
        "--n-color-active": y,
        "--n-color-disabled": g,
        "--n-dot-color-active": C,
        "--n-dot-color-disabled": k,
        "--n-font-size": M,
        "--n-radio-size": V,
        "--n-text-color": S,
        "--n-text-color-disabled": w,
        "--n-label-padding": x
      };
    }), {
      inlineThemeDisabled: o,
      mergedClsPrefixRef: i,
      mergedRtlRef: l
    } = _e(e), a = $t("Radio", l, i), s = o ? it("radio", T(() => t.mergedSize.value[0]), r, e) : void 0;
    return Object.assign(t, {
      rtlEnabled: a,
      cssVars: o ? void 0 : r,
      themeClass: s == null ? void 0 : s.themeClass,
      onRender: s == null ? void 0 : s.onRender
    });
  },
  render() {
    const {
      $slots: e,
      mergedClsPrefix: t,
      onRender: n,
      label: r
    } = this;
    return n == null || n(), c("label", {
      class: [`${t}-radio`, this.themeClass, this.rtlEnabled && `${t}-radio--rtl`, this.mergedDisabled && `${t}-radio--disabled`, this.renderSafeChecked && `${t}-radio--checked`, this.focus && `${t}-radio--focus`],
      style: this.cssVars
    }, c("input", {
      ref: "inputRef",
      type: "radio",
      class: `${t}-radio-input`,
      value: this.value,
      name: this.mergedName,
      checked: this.renderSafeChecked,
      disabled: this.mergedDisabled,
      onChange: this.handleRadioInputChange,
      onFocus: this.handleRadioInputFocus,
      onBlur: this.handleRadioInputBlur
    }), c("div", {
      class: `${t}-radio__dot-wrapper`
    }, " ", c("div", {
      class: [`${t}-radio__dot`, this.renderSafeChecked && `${t}-radio__dot--checked`]
    })), Ze(e.default, (o) => !o && !r ? null : c("div", {
      ref: "labelRef",
      class: `${t}-radio__label`
    }, o || r)));
  }
}), zb = R("radio-group", `
 display: inline-block;
 font-size: var(--n-font-size);
`, [A("splitor", `
 display: inline-block;
 vertical-align: bottom;
 width: 1px;
 transition:
 background-color .3s var(--n-bezier),
 opacity .3s var(--n-bezier);
 background: var(--n-button-border-color);
 `, [_("checked", {
  backgroundColor: "var(--n-button-border-color-active)"
}), _("disabled", {
  opacity: "var(--n-opacity-disabled)"
})]), _("button-group", `
 white-space: nowrap;
 height: var(--n-height);
 line-height: var(--n-height);
 `, [R("radio-button", {
  height: "var(--n-height)",
  lineHeight: "var(--n-height)"
}), A("splitor", {
  height: "var(--n-height)"
})]), R("radio-button", `
 vertical-align: bottom;
 outline: none;
 position: relative;
 user-select: none;
 -webkit-user-select: none;
 display: inline-block;
 box-sizing: border-box;
 padding-left: 14px;
 padding-right: 14px;
 white-space: nowrap;
 transition:
 background-color .3s var(--n-bezier),
 opacity .3s var(--n-bezier),
 border-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 background: var(--n-button-color);
 color: var(--n-button-text-color);
 border-top: 1px solid var(--n-button-border-color);
 border-bottom: 1px solid var(--n-button-border-color);
 `, [R("radio-input", `
 pointer-events: none;
 position: absolute;
 border: 0;
 border-radius: inherit;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 opacity: 0;
 z-index: 1;
 `), A("state-border", `
 z-index: 1;
 pointer-events: none;
 position: absolute;
 box-shadow: var(--n-button-box-shadow);
 transition: box-shadow .3s var(--n-bezier);
 left: -1px;
 bottom: -1px;
 right: -1px;
 top: -1px;
 `), B("&:first-child", `
 border-top-left-radius: var(--n-button-border-radius);
 border-bottom-left-radius: var(--n-button-border-radius);
 border-left: 1px solid var(--n-button-border-color);
 `, [A("state-border", `
 border-top-left-radius: var(--n-button-border-radius);
 border-bottom-left-radius: var(--n-button-border-radius);
 `)]), B("&:last-child", `
 border-top-right-radius: var(--n-button-border-radius);
 border-bottom-right-radius: var(--n-button-border-radius);
 border-right: 1px solid var(--n-button-border-color);
 `, [A("state-border", `
 border-top-right-radius: var(--n-button-border-radius);
 border-bottom-right-radius: var(--n-button-border-radius);
 `)]), Je("disabled", `
 cursor: pointer;
 `, [B("&:hover", [A("state-border", `
 transition: box-shadow .3s var(--n-bezier);
 box-shadow: var(--n-button-box-shadow-hover);
 `), Je("checked", {
  color: "var(--n-button-text-color-hover)"
})]), _("focus", [B("&:not(:active)", [A("state-border", {
  boxShadow: "var(--n-button-box-shadow-focus)"
})])])]), _("checked", `
 background: var(--n-button-color-active);
 color: var(--n-button-text-color-active);
 border-color: var(--n-button-border-color-active);
 `), _("disabled", `
 cursor: not-allowed;
 opacity: var(--n-opacity-disabled);
 `)])]);
function $b(e, t, n) {
  var r;
  const o = [];
  let i = !1;
  for (let l = 0; l < e.length; ++l) {
    const a = e[l], s = (r = a.type) === null || r === void 0 ? void 0 : r.name;
    s === "RadioButton" && (i = !0);
    const d = a.props;
    if (s !== "RadioButton") {
      o.push(a);
      continue;
    }
    if (l === 0)
      o.push(a);
    else {
      const u = o[o.length - 1].props, h = t === u.value, b = u.disabled, m = t === d.value, f = d.disabled, p = (h ? 2 : 0) + (b ? 0 : 1), v = (m ? 2 : 0) + (f ? 0 : 1), g = {
        [`${n}-radio-group__splitor--disabled`]: b,
        [`${n}-radio-group__splitor--checked`]: h
      }, y = {
        [`${n}-radio-group__splitor--disabled`]: f,
        [`${n}-radio-group__splitor--checked`]: m
      }, S = p < v ? y : g;
      o.push(c("div", {
        class: [`${n}-radio-group__splitor`, S]
      }), a);
    }
  }
  return {
    children: o,
    isButtonGroup: i
  };
}
const Tb = Object.assign(Object.assign({}, we.props), {
  name: String,
  value: [String, Number, Boolean],
  defaultValue: {
    type: [String, Number, Boolean],
    default: null
  },
  size: String,
  disabled: {
    type: Boolean,
    default: void 0
  },
  "onUpdate:value": [Function, Array],
  onUpdateValue: [Function, Array]
}), Mb = ie({
  name: "RadioGroup",
  props: Tb,
  setup(e) {
    const t = L(null), {
      mergedSizeRef: n,
      mergedDisabledRef: r,
      nTriggerFormChange: o,
      nTriggerFormInput: i,
      nTriggerFormBlur: l,
      nTriggerFormFocus: a
    } = Tn(e), {
      mergedClsPrefixRef: s,
      inlineThemeDisabled: d,
      mergedRtlRef: u
    } = _e(e), h = we("Radio", "-radio-group", zb, Bi, e, s), b = L(e.defaultValue), m = ae(e, "value"), f = zt(m, b);
    function p(C) {
      const {
        onUpdateValue: k,
        "onUpdate:value": x
      } = e;
      k && oe(k, C), x && oe(x, C), b.value = C, o(), i();
    }
    function v(C) {
      const {
        value: k
      } = t;
      k && (k.contains(C.relatedTarget) || a());
    }
    function g(C) {
      const {
        value: k
      } = t;
      k && (k.contains(C.relatedTarget) || l());
    }
    We(_s, {
      mergedClsPrefixRef: s,
      nameRef: ae(e, "name"),
      valueRef: f,
      disabledRef: r,
      mergedSizeRef: n,
      doUpdateValue: p
    });
    const y = $t("Radio", u, s), S = T(() => {
      const {
        value: C
      } = n, {
        common: {
          cubicBezierEaseInOut: k
        },
        self: {
          buttonBorderColor: x,
          buttonBorderColorActive: z,
          buttonBorderRadius: $,
          buttonBoxShadow: M,
          buttonBoxShadowFocus: V,
          buttonBoxShadowHover: O,
          buttonColor: E,
          buttonColorActive: I,
          buttonTextColor: F,
          buttonTextColorActive: N,
          buttonTextColorHover: W,
          opacityDisabled: X,
          [J("buttonHeight", C)]: re,
          [J("fontSize", C)]: Q
        }
      } = h.value;
      return {
        "--n-font-size": Q,
        "--n-bezier": k,
        "--n-button-border-color": x,
        "--n-button-border-color-active": z,
        "--n-button-border-radius": $,
        "--n-button-box-shadow": M,
        "--n-button-box-shadow-focus": V,
        "--n-button-box-shadow-hover": O,
        "--n-button-color": E,
        "--n-button-color-active": I,
        "--n-button-text-color": F,
        "--n-button-text-color-hover": W,
        "--n-button-text-color-active": N,
        "--n-height": re,
        "--n-opacity-disabled": X
      };
    }), w = d ? it("radio-group", T(() => n.value[0]), S, e) : void 0;
    return {
      selfElRef: t,
      rtlEnabled: y,
      mergedClsPrefix: s,
      mergedValue: f,
      handleFocusout: g,
      handleFocusin: v,
      cssVars: d ? void 0 : S,
      themeClass: w == null ? void 0 : w.themeClass,
      onRender: w == null ? void 0 : w.onRender
    };
  },
  render() {
    var e;
    const {
      mergedValue: t,
      mergedClsPrefix: n,
      handleFocusin: r,
      handleFocusout: o
    } = this, {
      children: i,
      isButtonGroup: l
    } = $b(an(Yl(this)), t, n);
    return (e = this.onRender) === null || e === void 0 || e.call(this), c("div", {
      onFocusin: r,
      onFocusout: o,
      ref: "selfElRef",
      class: [`${n}-radio-group`, this.rtlEnabled && `${n}-radio-group--rtl`, this.themeClass, l && `${n}-radio-group--button-group`],
      style: this.cssVars
    }, i);
  }
}), Fb = ie({
  name: "DataTableBodyRadio",
  props: {
    rowKey: {
      type: [String, Number],
      required: !0
    },
    disabled: {
      type: Boolean,
      required: !0
    },
    onUpdateChecked: {
      type: Function,
      required: !0
    }
  },
  setup(e) {
    const {
      mergedCheckedRowKeySetRef: t,
      componentId: n
    } = ke(qt);
    return () => {
      const {
        rowKey: r
      } = e;
      return c(As, {
        name: n,
        disabled: e.disabled,
        checked: t.value.has(r),
        onUpdateChecked: e.onUpdateChecked
      });
    };
  }
}), Ob = Object.assign(Object.assign({}, zn), we.props), Bb = ie({
  name: "Tooltip",
  props: Ob,
  slots: Object,
  __popover__: !0,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(e), n = we("Tooltip", "-tooltip", void 0, Ms, e, t), r = L(null);
    return Object.assign(Object.assign({}, {
      syncPosition() {
        r.value.syncPosition();
      },
      setShow(i) {
        r.value.setShow(i);
      }
    }), {
      popoverRef: r,
      mergedTheme: n,
      popoverThemeOverrides: T(() => n.value.self)
    });
  },
  render() {
    const {
      mergedTheme: e,
      internalExtraClass: t
    } = this;
    return c(Jn, Object.assign(Object.assign({}, this.$props), {
      theme: e.peers.Popover,
      themeOverrides: e.peerOverrides.Popover,
      builtinThemeOverrides: this.popoverThemeOverrides,
      internalExtraClass: t.concat("tooltip"),
      ref: "popoverRef"
    }), this.$slots);
  }
}), Ls = R("ellipsis", {
  overflow: "hidden"
}, [Je("line-clamp", `
 white-space: nowrap;
 display: inline-block;
 vertical-align: bottom;
 max-width: 100%;
 `), _("line-clamp", `
 display: -webkit-inline-box;
 -webkit-box-orient: vertical;
 `), _("cursor-pointer", `
 cursor: pointer;
 `)]);
function ti(e) {
  return `${e}-ellipsis--line-clamp`;
}
function ni(e, t) {
  return `${e}-ellipsis--cursor-${t}`;
}
const Hs = Object.assign(Object.assign({}, we.props), {
  expandTrigger: String,
  lineClamp: [Number, String],
  tooltip: {
    type: [Boolean, Object],
    default: !0
  }
}), Ei = ie({
  name: "Ellipsis",
  inheritAttrs: !1,
  props: Hs,
  slots: Object,
  setup(e, {
    slots: t,
    attrs: n
  }) {
    const r = Zl(), o = we("Ellipsis", "-ellipsis", Ls, Fs, e, r), i = L(null), l = L(null), a = L(null), s = L(!1), d = T(() => {
      const {
        lineClamp: v
      } = e, {
        value: g
      } = s;
      return v !== void 0 ? {
        textOverflow: "",
        "-webkit-line-clamp": g ? "" : v
      } : {
        textOverflow: g ? "" : "ellipsis",
        "-webkit-line-clamp": ""
      };
    });
    function u() {
      let v = !1;
      const {
        value: g
      } = s;
      if (g) return !0;
      const {
        value: y
      } = i;
      if (y) {
        const {
          lineClamp: S
        } = e;
        if (m(y), S !== void 0)
          v = y.scrollHeight <= y.offsetHeight;
        else {
          const {
            value: w
          } = l;
          w && (v = w.getBoundingClientRect().width <= y.getBoundingClientRect().width);
        }
        f(y, v);
      }
      return v;
    }
    const h = T(() => e.expandTrigger === "click" ? () => {
      var v;
      const {
        value: g
      } = s;
      g && ((v = a.value) === null || v === void 0 || v.setShow(!1)), s.value = !g;
    } : void 0);
    ui(() => {
      var v;
      e.tooltip && ((v = a.value) === null || v === void 0 || v.setShow(!1));
    });
    const b = () => c("span", Object.assign({}, Vt(n, {
      class: [`${r.value}-ellipsis`, e.lineClamp !== void 0 ? ti(r.value) : void 0, e.expandTrigger === "click" ? ni(r.value, "pointer") : void 0],
      style: d.value
    }), {
      ref: "triggerRef",
      onClick: h.value,
      onMouseenter: (
        // get tooltip disabled will derive cursor style
        e.expandTrigger === "click" ? u : void 0
      )
    }), e.lineClamp ? t : c("span", {
      ref: "triggerInnerRef"
    }, t));
    function m(v) {
      if (!v) return;
      const g = d.value, y = ti(r.value);
      e.lineClamp !== void 0 ? p(v, y, "add") : p(v, y, "remove");
      for (const S in g)
        v.style[S] !== g[S] && (v.style[S] = g[S]);
    }
    function f(v, g) {
      const y = ni(r.value, "pointer");
      e.expandTrigger === "click" && !g ? p(v, y, "add") : p(v, y, "remove");
    }
    function p(v, g, y) {
      y === "add" ? v.classList.contains(g) || v.classList.add(g) : v.classList.contains(g) && v.classList.remove(g);
    }
    return {
      mergedTheme: o,
      triggerRef: i,
      triggerInnerRef: l,
      tooltipRef: a,
      handleClick: h,
      renderTrigger: b,
      getTooltipDisabled: u
    };
  },
  render() {
    var e;
    const {
      tooltip: t,
      renderTrigger: n,
      $slots: r
    } = this;
    if (t) {
      const {
        mergedTheme: o
      } = this;
      return c(Bb, Object.assign({
        ref: "tooltipRef",
        placement: "top"
      }, t, {
        getDisabled: this.getTooltipDisabled,
        theme: o.peers.Tooltip,
        themeOverrides: o.peerOverrides.Tooltip
      }), {
        trigger: n,
        default: (e = r.tooltip) !== null && e !== void 0 ? e : r.default
      });
    } else
      return n();
  }
}), Eb = ie({
  name: "PerformantEllipsis",
  props: Hs,
  inheritAttrs: !1,
  setup(e, {
    attrs: t,
    slots: n
  }) {
    const r = L(!1), o = Zl();
    return Mn("-ellipsis", Ls, o), {
      mouseEntered: r,
      renderTrigger: () => {
        const {
          lineClamp: l
        } = e, a = o.value;
        return c("span", Object.assign({}, Vt(t, {
          class: [`${a}-ellipsis`, l !== void 0 ? ti(a) : void 0, e.expandTrigger === "click" ? ni(a, "pointer") : void 0],
          style: l === void 0 ? {
            textOverflow: "ellipsis"
          } : {
            "-webkit-line-clamp": l
          }
        }), {
          onMouseenter: () => {
            r.value = !0;
          }
        }), l ? n : c("span", null, n));
      }
    };
  },
  render() {
    return this.mouseEntered ? c(Ei, Vt({}, this.$attrs, this.$props), this.$slots) : this.renderTrigger();
  }
}), Ib = ie({
  name: "DataTableCell",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    row: {
      type: Object,
      required: !0
    },
    index: {
      type: Number,
      required: !0
    },
    column: {
      type: Object,
      required: !0
    },
    isSummary: Boolean,
    mergedTheme: {
      type: Object,
      required: !0
    },
    renderCell: Function
  },
  render() {
    var e;
    const {
      isSummary: t,
      column: n,
      row: r,
      renderCell: o
    } = this;
    let i;
    const {
      render: l,
      key: a,
      ellipsis: s
    } = n;
    if (l && !t ? i = l(r, this.index) : t ? i = (e = r[a]) === null || e === void 0 ? void 0 : e.value : i = o ? o(Kr(r, a), r, n) : Kr(r, a), s)
      if (typeof s == "object") {
        const {
          mergedTheme: d
        } = this;
        return n.ellipsisComponent === "performant-ellipsis" ? c(Eb, Object.assign({}, s, {
          theme: d.peers.Ellipsis,
          themeOverrides: d.peerOverrides.Ellipsis
        }), {
          default: () => i
        }) : c(Ei, Object.assign({}, s, {
          theme: d.peers.Ellipsis,
          themeOverrides: d.peerOverrides.Ellipsis
        }), {
          default: () => i
        });
      } else
        return c("span", {
          class: `${this.clsPrefix}-data-table-td__ellipsis`
        }, i);
    return i;
  }
}), Ya = ie({
  name: "DataTableExpandTrigger",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    expanded: Boolean,
    loading: Boolean,
    onClick: {
      type: Function,
      required: !0
    },
    renderExpandIcon: {
      type: Function
    },
    rowData: {
      type: Object,
      required: !0
    }
  },
  render() {
    const {
      clsPrefix: e
    } = this;
    return c("div", {
      class: [`${e}-data-table-expand-trigger`, this.expanded && `${e}-data-table-expand-trigger--expanded`],
      onClick: this.onClick,
      onMousedown: (t) => {
        t.preventDefault();
      }
    }, c(Gn, null, {
      default: () => this.loading ? c(Yn, {
        key: "loading",
        clsPrefix: this.clsPrefix,
        radius: 85,
        strokeWidth: 15,
        scale: 0.88
      }) : this.renderExpandIcon ? this.renderExpandIcon({
        expanded: this.expanded,
        rowData: this.rowData
      }) : c(ct, {
        clsPrefix: e,
        key: "base-icon"
      }, {
        default: () => c(ts, null)
      })
    }));
  }
}), _b = ie({
  name: "DataTableFilterMenu",
  props: {
    column: {
      type: Object,
      required: !0
    },
    radioGroupName: {
      type: String,
      required: !0
    },
    multiple: {
      type: Boolean,
      required: !0
    },
    value: {
      type: [Array, String, Number],
      default: null
    },
    options: {
      type: Array,
      required: !0
    },
    onConfirm: {
      type: Function,
      required: !0
    },
    onClear: {
      type: Function,
      required: !0
    },
    onChange: {
      type: Function,
      required: !0
    }
  },
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedRtlRef: n
    } = _e(e), r = $t("DataTable", n, t), {
      mergedClsPrefixRef: o,
      mergedThemeRef: i,
      localeRef: l
    } = ke(qt), a = L(e.value), s = T(() => {
      const {
        value: f
      } = a;
      return Array.isArray(f) ? f : null;
    }), d = T(() => {
      const {
        value: f
      } = a;
      return Lo(e.column) ? Array.isArray(f) && f.length && f[0] || null : Array.isArray(f) ? null : f;
    });
    function u(f) {
      e.onChange(f);
    }
    function h(f) {
      e.multiple && Array.isArray(f) ? a.value = f : Lo(e.column) && !Array.isArray(f) ? a.value = [f] : a.value = f;
    }
    function b() {
      u(a.value), e.onConfirm();
    }
    function m() {
      e.multiple || Lo(e.column) ? u([]) : u(null), e.onClear();
    }
    return {
      mergedClsPrefix: o,
      rtlEnabled: r,
      mergedTheme: i,
      locale: l,
      checkboxGroupValue: s,
      radioGroupValue: d,
      handleChange: h,
      handleConfirmClick: b,
      handleClearClick: m
    };
  },
  render() {
    const {
      mergedTheme: e,
      locale: t,
      mergedClsPrefix: n
    } = this;
    return c("div", {
      class: [`${n}-data-table-filter-menu`, this.rtlEnabled && `${n}-data-table-filter-menu--rtl`]
    }, c(Zn, null, {
      default: () => {
        const {
          checkboxGroupValue: r,
          handleChange: o
        } = this;
        return this.multiple ? c(Ap, {
          value: r,
          class: `${n}-data-table-filter-menu__group`,
          onUpdateValue: o
        }, {
          default: () => this.options.map((i) => c(Mi, {
            key: i.value,
            theme: e.peers.Checkbox,
            themeOverrides: e.peerOverrides.Checkbox,
            value: i.value
          }, {
            default: () => i.label
          }))
        }) : c(Mb, {
          name: this.radioGroupName,
          class: `${n}-data-table-filter-menu__group`,
          value: this.radioGroupValue,
          onUpdateValue: this.handleChange
        }, {
          default: () => this.options.map((i) => c(As, {
            key: i.value,
            value: i.value,
            theme: e.peers.Radio,
            themeOverrides: e.peerOverrides.Radio
          }, {
            default: () => i.label
          }))
        });
      }
    }), c("div", {
      class: `${n}-data-table-filter-menu__action`
    }, c(Nn, {
      size: "tiny",
      theme: e.peers.Button,
      themeOverrides: e.peerOverrides.Button,
      onClick: this.handleClearClick
    }, {
      default: () => t.clear
    }), c(Nn, {
      theme: e.peers.Button,
      themeOverrides: e.peerOverrides.Button,
      type: "primary",
      size: "tiny",
      onClick: this.handleConfirmClick
    }, {
      default: () => t.confirm
    })));
  }
}), Ab = ie({
  name: "DataTableRenderFilter",
  props: {
    render: {
      type: Function,
      required: !0
    },
    active: {
      type: Boolean,
      default: !1
    },
    show: {
      type: Boolean,
      default: !1
    }
  },
  render() {
    const {
      render: e,
      active: t,
      show: n
    } = this;
    return e({
      active: t,
      show: n
    });
  }
});
function Lb(e, t, n) {
  const r = Object.assign({}, e);
  return r[t] = n, r;
}
const Hb = ie({
  name: "DataTableFilterButton",
  props: {
    column: {
      type: Object,
      required: !0
    },
    options: {
      type: Array,
      default: () => []
    }
  },
  setup(e) {
    const {
      mergedComponentPropsRef: t
    } = _e(), {
      mergedThemeRef: n,
      mergedClsPrefixRef: r,
      mergedFilterStateRef: o,
      filterMenuCssVarsRef: i,
      paginationBehaviorOnFilterRef: l,
      doUpdatePage: a,
      doUpdateFilters: s,
      filterIconPopoverPropsRef: d
    } = ke(qt), u = L(!1), h = o, b = T(() => e.column.filterMultiple !== !1), m = T(() => {
      const S = h.value[e.column.key];
      if (S === void 0) {
        const {
          value: w
        } = b;
        return w ? [] : null;
      }
      return S;
    }), f = T(() => {
      const {
        value: S
      } = m;
      return Array.isArray(S) ? S.length > 0 : S !== null;
    }), p = T(() => {
      var S, w;
      return ((w = (S = t == null ? void 0 : t.value) === null || S === void 0 ? void 0 : S.DataTable) === null || w === void 0 ? void 0 : w.renderFilter) || e.column.renderFilter;
    });
    function v(S) {
      const w = Lb(h.value, e.column.key, S);
      s(w, e.column), l.value === "first" && a(1);
    }
    function g() {
      u.value = !1;
    }
    function y() {
      u.value = !1;
    }
    return {
      mergedTheme: n,
      mergedClsPrefix: r,
      active: f,
      showPopover: u,
      mergedRenderFilter: p,
      filterIconPopoverProps: d,
      filterMultiple: b,
      mergedFilterValue: m,
      filterMenuCssVars: i,
      handleFilterChange: v,
      handleFilterMenuConfirm: y,
      handleFilterMenuCancel: g
    };
  },
  render() {
    const {
      mergedTheme: e,
      mergedClsPrefix: t,
      handleFilterMenuCancel: n,
      filterIconPopoverProps: r
    } = this;
    return c(Jn, Object.assign({
      show: this.showPopover,
      onUpdateShow: (o) => this.showPopover = o,
      trigger: "click",
      theme: e.peers.Popover,
      themeOverrides: e.peerOverrides.Popover,
      placement: "bottom"
    }, r, {
      style: {
        padding: 0
      }
    }), {
      trigger: () => {
        const {
          mergedRenderFilter: o
        } = this;
        if (o)
          return c(Ab, {
            "data-data-table-filter": !0,
            render: o,
            active: this.active,
            show: this.showPopover
          });
        const {
          renderFilterIcon: i
        } = this.column;
        return c("div", {
          "data-data-table-filter": !0,
          class: [`${t}-data-table-filter`, {
            [`${t}-data-table-filter--active`]: this.active,
            [`${t}-data-table-filter--show`]: this.showPopover
          }]
        }, i ? i({
          active: this.active,
          show: this.showPopover
        }) : c(ct, {
          clsPrefix: t
        }, {
          default: () => c(Zf, null)
        }));
      },
      default: () => {
        const {
          renderFilterMenu: o
        } = this.column;
        return o ? o({
          hide: n
        }) : c(_b, {
          style: this.filterMenuCssVars,
          radioGroupName: String(this.column.key),
          multiple: this.filterMultiple,
          value: this.mergedFilterValue,
          options: this.options,
          column: this.column,
          onChange: this.handleFilterChange,
          onClear: this.handleFilterMenuCancel,
          onConfirm: this.handleFilterMenuConfirm
        });
      }
    });
  }
}), Db = ie({
  name: "ColumnResizeButton",
  props: {
    onResizeStart: Function,
    onResize: Function,
    onResizeEnd: Function
  },
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = ke(qt), n = L(!1);
    let r = 0;
    function o(s) {
      return s.clientX;
    }
    function i(s) {
      var d;
      s.preventDefault();
      const u = n.value;
      r = o(s), n.value = !0, u || (De("mousemove", window, l), De("mouseup", window, a), (d = e.onResizeStart) === null || d === void 0 || d.call(e));
    }
    function l(s) {
      var d;
      (d = e.onResize) === null || d === void 0 || d.call(e, o(s) - r);
    }
    function a() {
      var s;
      n.value = !1, (s = e.onResizeEnd) === null || s === void 0 || s.call(e), He("mousemove", window, l), He("mouseup", window, a);
    }
    return ut(() => {
      He("mousemove", window, l), He("mouseup", window, a);
    }), {
      mergedClsPrefix: t,
      active: n,
      handleMousedown: i
    };
  },
  render() {
    const {
      mergedClsPrefix: e
    } = this;
    return c("span", {
      "data-data-table-resizable": !0,
      class: [`${e}-data-table-resize-button`, this.active && `${e}-data-table-resize-button--active`],
      onMousedown: this.handleMousedown
    });
  }
}), jb = ie({
  name: "DataTableRenderSorter",
  props: {
    render: {
      type: Function,
      required: !0
    },
    order: {
      // asc, desc
      type: [String, Boolean],
      default: !1
    }
  },
  render() {
    const {
      render: e,
      order: t
    } = this;
    return e({
      order: t
    });
  }
}), Wb = ie({
  name: "SortIcon",
  props: {
    column: {
      type: Object,
      required: !0
    }
  },
  setup(e) {
    const {
      mergedComponentPropsRef: t
    } = _e(), {
      mergedSortStateRef: n,
      mergedClsPrefixRef: r
    } = ke(qt), o = T(() => n.value.find((s) => s.columnKey === e.column.key)), i = T(() => o.value !== void 0), l = T(() => {
      const {
        value: s
      } = o;
      return s && i.value ? s.order : !1;
    }), a = T(() => {
      var s, d;
      return ((d = (s = t == null ? void 0 : t.value) === null || s === void 0 ? void 0 : s.DataTable) === null || d === void 0 ? void 0 : d.renderSorter) || e.column.renderSorter;
    });
    return {
      mergedClsPrefix: r,
      active: i,
      mergedSortOrder: l,
      mergedRenderSorter: a
    };
  },
  render() {
    const {
      mergedRenderSorter: e,
      mergedSortOrder: t,
      mergedClsPrefix: n
    } = this, {
      renderSorterIcon: r
    } = this.column;
    return e ? c(jb, {
      render: e,
      order: t
    }) : c("span", {
      class: [`${n}-data-table-sorter`, t === "ascend" && `${n}-data-table-sorter--asc`, t === "descend" && `${n}-data-table-sorter--desc`]
    }, r ? r({
      order: t
    }) : c(ct, {
      clsPrefix: n
    }, {
      default: () => c(Kf, null)
    }));
  }
}), Ii = "n-dropdown-menu", co = "n-dropdown", Za = "n-dropdown-option", Ds = ie({
  name: "DropdownDivider",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    }
  },
  render() {
    return c("div", {
      class: `${this.clsPrefix}-dropdown-divider`
    });
  }
}), Nb = ie({
  name: "DropdownGroupHeader",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNode: {
      type: Object,
      required: !0
    }
  },
  setup() {
    const {
      showIconRef: e,
      hasSubmenuRef: t
    } = ke(Ii), {
      renderLabelRef: n,
      labelFieldRef: r,
      nodePropsRef: o,
      renderOptionRef: i
    } = ke(co);
    return {
      labelField: r,
      showIcon: e,
      hasSubmenu: t,
      renderLabel: n,
      nodeProps: o,
      renderOption: i
    };
  },
  render() {
    var e;
    const {
      clsPrefix: t,
      hasSubmenu: n,
      showIcon: r,
      nodeProps: o,
      renderLabel: i,
      renderOption: l
    } = this, {
      rawNode: a
    } = this.tmNode, s = c("div", Object.assign({
      class: `${t}-dropdown-option`
    }, o == null ? void 0 : o(a)), c("div", {
      class: `${t}-dropdown-option-body ${t}-dropdown-option-body--group`
    }, c("div", {
      "data-dropdown-option": !0,
      class: [`${t}-dropdown-option-body__prefix`, r && `${t}-dropdown-option-body__prefix--show-icon`]
    }, gt(a.icon)), c("div", {
      class: `${t}-dropdown-option-body__label`,
      "data-dropdown-option": !0
    }, i ? i(a) : gt((e = a.title) !== null && e !== void 0 ? e : a[this.labelField])), c("div", {
      class: [`${t}-dropdown-option-body__suffix`, n && `${t}-dropdown-option-body__suffix--has-submenu`],
      "data-dropdown-option": !0
    })));
    return l ? l({
      node: s,
      option: a
    }) : s;
  }
});
function Vb(e) {
  const {
    textColorBase: t,
    opacity1: n,
    opacity2: r,
    opacity3: o,
    opacity4: i,
    opacity5: l
  } = e;
  return {
    color: t,
    opacity1Depth: n,
    opacity2Depth: r,
    opacity3Depth: o,
    opacity4Depth: i,
    opacity5Depth: l
  };
}
const Kb = {
  name: "Icon",
  common: rt,
  self: Vb
}, Ub = R("icon", `
 height: 1em;
 width: 1em;
 line-height: 1em;
 text-align: center;
 display: inline-block;
 position: relative;
 fill: currentColor;
 transform: translateZ(0);
`, [_("color-transition", {
  transition: "color .3s var(--n-bezier)"
}), _("depth", {
  color: "var(--n-color)"
}, [B("svg", {
  opacity: "var(--n-opacity)",
  transition: "opacity .3s var(--n-bezier)"
})]), B("svg", {
  height: "1em",
  width: "1em"
})]), qb = Object.assign(Object.assign({}, we.props), {
  depth: [String, Number],
  size: [Number, String],
  color: String,
  component: [Object, Function]
}), Gb = ie({
  _n_icon__: !0,
  name: "Icon",
  inheritAttrs: !1,
  props: qb,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      inlineThemeDisabled: n
    } = _e(e), r = we("Icon", "-icon", Ub, Kb, e, t), o = T(() => {
      const {
        depth: l
      } = e, {
        common: {
          cubicBezierEaseInOut: a
        },
        self: s
      } = r.value;
      if (l !== void 0) {
        const {
          color: d,
          [`opacity${l}Depth`]: u
        } = s;
        return {
          "--n-bezier": a,
          "--n-color": d,
          "--n-opacity": u
        };
      }
      return {
        "--n-bezier": a,
        "--n-color": "",
        "--n-opacity": ""
      };
    }), i = n ? it("icon", T(() => `${e.depth || "d"}`), o, e) : void 0;
    return {
      mergedClsPrefix: t,
      mergedStyle: T(() => {
        const {
          size: l,
          color: a
        } = e;
        return {
          fontSize: ot(l),
          color: a
        };
      }),
      cssVars: n ? void 0 : o,
      themeClass: i == null ? void 0 : i.themeClass,
      onRender: i == null ? void 0 : i.onRender
    };
  },
  render() {
    var e;
    const {
      $parent: t,
      depth: n,
      mergedClsPrefix: r,
      component: o,
      onRender: i,
      themeClass: l
    } = this;
    return !((e = t == null ? void 0 : t.$options) === null || e === void 0) && e._n_icon__ && Kt("icon", "don't wrap `n-icon` inside `n-icon`"), i == null || i(), c("i", Vt(this.$attrs, {
      role: "img",
      class: [`${r}-icon`, l, {
        [`${r}-icon--depth`]: n,
        [`${r}-icon--color-transition`]: n !== void 0
      }],
      style: [this.cssVars, this.mergedStyle]
    }), o ? c(o) : this.$slots);
  }
});
function ri(e, t) {
  return e.type === "submenu" || e.type === void 0 && e[t] !== void 0;
}
function Xb(e) {
  return e.type === "group";
}
function js(e) {
  return e.type === "divider";
}
function Yb(e) {
  return e.type === "render";
}
const Ws = ie({
  name: "DropdownOption",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNode: {
      type: Object,
      required: !0
    },
    parentKey: {
      type: [String, Number],
      default: null
    },
    placement: {
      type: String,
      default: "right-start"
    },
    props: Object,
    scrollable: Boolean
  },
  setup(e) {
    const t = ke(co), {
      hoverKeyRef: n,
      keyboardKeyRef: r,
      lastToggledSubmenuKeyRef: o,
      pendingKeyPathRef: i,
      activeKeyPathRef: l,
      animatedRef: a,
      mergedShowRef: s,
      renderLabelRef: d,
      renderIconRef: u,
      labelFieldRef: h,
      childrenFieldRef: b,
      renderOptionRef: m,
      nodePropsRef: f,
      menuPropsRef: p
    } = t, v = ke(Za, null), g = ke(Ii), y = ke(Sr), S = T(() => e.tmNode.rawNode), w = T(() => {
      const {
        value: W
      } = b;
      return ri(e.tmNode.rawNode, W);
    }), C = T(() => {
      const {
        disabled: W
      } = e.tmNode;
      return W;
    }), k = T(() => {
      if (!w.value) return !1;
      const {
        key: W,
        disabled: X
      } = e.tmNode;
      if (X) return !1;
      const {
        value: re
      } = n, {
        value: Q
      } = r, {
        value: G
      } = o, {
        value: j
      } = i;
      return re !== null ? j.includes(W) : Q !== null ? j.includes(W) && j[j.length - 1] !== W : G !== null ? j.includes(W) : !1;
    }), x = T(() => r.value === null && !a.value), z = Cc(k, 300, x), $ = T(() => !!(v != null && v.enteringSubmenuRef.value)), M = L(!1);
    We(Za, {
      enteringSubmenuRef: M
    });
    function V() {
      M.value = !0;
    }
    function O() {
      M.value = !1;
    }
    function E() {
      const {
        parentKey: W,
        tmNode: X
      } = e;
      X.disabled || s.value && (o.value = W, r.value = null, n.value = X.key);
    }
    function I() {
      const {
        tmNode: W
      } = e;
      W.disabled || s.value && n.value !== W.key && E();
    }
    function F(W) {
      if (e.tmNode.disabled || !s.value) return;
      const {
        relatedTarget: X
      } = W;
      X && !Lt({
        target: X
      }, "dropdownOption") && !Lt({
        target: X
      }, "scrollbarRail") && (n.value = null);
    }
    function N() {
      const {
        value: W
      } = w, {
        tmNode: X
      } = e;
      s.value && !W && !X.disabled && (t.doSelect(X.key, X.rawNode), t.doUpdateShow(!1));
    }
    return {
      labelField: h,
      renderLabel: d,
      renderIcon: u,
      siblingHasIcon: g.showIconRef,
      siblingHasSubmenu: g.hasSubmenuRef,
      menuProps: p,
      popoverBody: y,
      animated: a,
      mergedShowSubmenu: T(() => z.value && !$.value),
      rawNode: S,
      hasSubmenu: w,
      pending: Ue(() => {
        const {
          value: W
        } = i, {
          key: X
        } = e.tmNode;
        return W.includes(X);
      }),
      childActive: Ue(() => {
        const {
          value: W
        } = l, {
          key: X
        } = e.tmNode, re = W.findIndex((Q) => X === Q);
        return re === -1 ? !1 : re < W.length - 1;
      }),
      active: Ue(() => {
        const {
          value: W
        } = l, {
          key: X
        } = e.tmNode, re = W.findIndex((Q) => X === Q);
        return re === -1 ? !1 : re === W.length - 1;
      }),
      mergedDisabled: C,
      renderOption: m,
      nodeProps: f,
      handleClick: N,
      handleMouseMove: I,
      handleMouseEnter: E,
      handleMouseLeave: F,
      handleSubmenuBeforeEnter: V,
      handleSubmenuAfterEnter: O
    };
  },
  render() {
    var e, t;
    const {
      animated: n,
      rawNode: r,
      mergedShowSubmenu: o,
      clsPrefix: i,
      siblingHasIcon: l,
      siblingHasSubmenu: a,
      renderLabel: s,
      renderIcon: d,
      renderOption: u,
      nodeProps: h,
      props: b,
      scrollable: m
    } = this;
    let f = null;
    if (o) {
      const y = (e = this.menuProps) === null || e === void 0 ? void 0 : e.call(this, r, r.children);
      f = c(Ns, Object.assign({}, y, {
        clsPrefix: i,
        scrollable: this.scrollable,
        tmNodes: this.tmNode.children,
        parentKey: this.tmNode.key
      }));
    }
    const p = {
      class: [`${i}-dropdown-option-body`, this.pending && `${i}-dropdown-option-body--pending`, this.active && `${i}-dropdown-option-body--active`, this.childActive && `${i}-dropdown-option-body--child-active`, this.mergedDisabled && `${i}-dropdown-option-body--disabled`],
      onMousemove: this.handleMouseMove,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave,
      onClick: this.handleClick
    }, v = h == null ? void 0 : h(r), g = c("div", Object.assign({
      class: [`${i}-dropdown-option`, v == null ? void 0 : v.class],
      "data-dropdown-option": !0
    }, v), c("div", Vt(p, b), [c("div", {
      class: [`${i}-dropdown-option-body__prefix`, l && `${i}-dropdown-option-body__prefix--show-icon`]
    }, [d ? d(r) : gt(r.icon)]), c("div", {
      "data-dropdown-option": !0,
      class: `${i}-dropdown-option-body__label`
    }, s ? s(r) : gt((t = r[this.labelField]) !== null && t !== void 0 ? t : r.title)), c("div", {
      "data-dropdown-option": !0,
      class: [`${i}-dropdown-option-body__suffix`, a && `${i}-dropdown-option-body__suffix--has-submenu`]
    }, this.hasSubmenu ? c(Gb, null, {
      default: () => c(ts, null)
    }) : null)]), this.hasSubmenu ? c(vi, null, {
      default: () => [c(xi, null, {
        default: () => c("div", {
          class: `${i}-dropdown-offset-container`
        }, c(wi, {
          show: this.mergedShowSubmenu,
          placement: this.placement,
          to: m && this.popoverBody || void 0,
          teleportDisabled: !m
        }, {
          default: () => c("div", {
            class: `${i}-dropdown-menu-wrapper`
          }, n ? c(Ht, {
            onBeforeEnter: this.handleSubmenuBeforeEnter,
            onAfterEnter: this.handleSubmenuAfterEnter,
            name: "fade-in-scale-up-transition",
            appear: !0
          }, {
            default: () => f
          }) : f)
        }))
      })]
    }) : null);
    return u ? u({
      node: g,
      option: r
    }) : g;
  }
}), Zb = ie({
  name: "NDropdownGroup",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNode: {
      type: Object,
      required: !0
    },
    parentKey: {
      type: [String, Number],
      default: null
    }
  },
  render() {
    const {
      tmNode: e,
      parentKey: t,
      clsPrefix: n
    } = this, {
      children: r
    } = e;
    return c(Pt, null, c(Nb, {
      clsPrefix: n,
      tmNode: e,
      key: e.key
    }), r == null ? void 0 : r.map((o) => {
      const {
        rawNode: i
      } = o;
      return i.show === !1 ? null : js(i) ? c(Ds, {
        clsPrefix: n,
        key: o.key
      }) : o.isGroup ? (Kt("dropdown", "`group` node is not allowed to be put in `group` node."), null) : c(Ws, {
        clsPrefix: n,
        tmNode: o,
        parentKey: t,
        key: o.key
      });
    }));
  }
}), Jb = ie({
  name: "DropdownRenderOption",
  props: {
    tmNode: {
      type: Object,
      required: !0
    }
  },
  render() {
    const {
      rawNode: {
        render: e,
        props: t
      }
    } = this.tmNode;
    return c("div", t, [e == null ? void 0 : e()]);
  }
}), Ns = ie({
  name: "DropdownMenu",
  props: {
    scrollable: Boolean,
    showArrow: Boolean,
    arrowStyle: [String, Object],
    clsPrefix: {
      type: String,
      required: !0
    },
    tmNodes: {
      type: Array,
      default: () => []
    },
    parentKey: {
      type: [String, Number],
      default: null
    }
  },
  setup(e) {
    const {
      renderIconRef: t,
      childrenFieldRef: n
    } = ke(co);
    We(Ii, {
      showIconRef: T(() => {
        const o = t.value;
        return e.tmNodes.some((i) => {
          var l;
          if (i.isGroup)
            return (l = i.children) === null || l === void 0 ? void 0 : l.some(({
              rawNode: s
            }) => o ? o(s) : s.icon);
          const {
            rawNode: a
          } = i;
          return o ? o(a) : a.icon;
        });
      }),
      hasSubmenuRef: T(() => {
        const {
          value: o
        } = n;
        return e.tmNodes.some((i) => {
          var l;
          if (i.isGroup)
            return (l = i.children) === null || l === void 0 ? void 0 : l.some(({
              rawNode: s
            }) => ri(s, o));
          const {
            rawNode: a
          } = i;
          return ri(a, o);
        });
      })
    });
    const r = L(null);
    return We(oo, null), We(ro, null), We(Sr, r), {
      bodyRef: r
    };
  },
  render() {
    const {
      parentKey: e,
      clsPrefix: t,
      scrollable: n
    } = this, r = this.tmNodes.map((o) => {
      const {
        rawNode: i
      } = o;
      return i.show === !1 ? null : Yb(i) ? c(Jb, {
        tmNode: o,
        key: o.key
      }) : js(i) ? c(Ds, {
        clsPrefix: t,
        key: o.key
      }) : Xb(i) ? c(Zb, {
        clsPrefix: t,
        tmNode: o,
        parentKey: e,
        key: o.key
      }) : c(Ws, {
        clsPrefix: t,
        tmNode: o,
        parentKey: e,
        key: o.key,
        props: i.props,
        scrollable: n
      });
    });
    return c("div", {
      class: [`${t}-dropdown-menu`, n && `${t}-dropdown-menu--scrollable`],
      ref: "bodyRef"
    }, n ? c(ss, {
      contentClass: `${t}-dropdown-menu__content`
    }, {
      default: () => r
    }) : r, this.showArrow ? ps({
      clsPrefix: t,
      arrowStyle: this.arrowStyle,
      arrowClass: void 0,
      arrowWrapperClass: void 0,
      arrowWrapperStyle: void 0
    }) : null);
  }
}), Qb = R("dropdown-menu", `
 transform-origin: var(--v-transform-origin);
 background-color: var(--n-color);
 border-radius: var(--n-border-radius);
 box-shadow: var(--n-box-shadow);
 position: relative;
 transition:
 background-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier);
`, [Pr(), R("dropdown-option", `
 position: relative;
 `, [B("a", `
 text-decoration: none;
 color: inherit;
 outline: none;
 `, [B("&::before", `
 content: "";
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 `)]), R("dropdown-option-body", `
 display: flex;
 cursor: pointer;
 position: relative;
 height: var(--n-option-height);
 line-height: var(--n-option-height);
 font-size: var(--n-font-size);
 color: var(--n-option-text-color);
 transition: color .3s var(--n-bezier);
 `, [B("&::before", `
 content: "";
 position: absolute;
 top: 0;
 bottom: 0;
 left: 4px;
 right: 4px;
 transition: background-color .3s var(--n-bezier);
 border-radius: var(--n-border-radius);
 `), Je("disabled", [_("pending", `
 color: var(--n-option-text-color-hover);
 `, [A("prefix, suffix", `
 color: var(--n-option-text-color-hover);
 `), B("&::before", "background-color: var(--n-option-color-hover);")]), _("active", `
 color: var(--n-option-text-color-active);
 `, [A("prefix, suffix", `
 color: var(--n-option-text-color-active);
 `), B("&::before", "background-color: var(--n-option-color-active);")]), _("child-active", `
 color: var(--n-option-text-color-child-active);
 `, [A("prefix, suffix", `
 color: var(--n-option-text-color-child-active);
 `)])]), _("disabled", `
 cursor: not-allowed;
 opacity: var(--n-option-opacity-disabled);
 `), _("group", `
 font-size: calc(var(--n-font-size) - 1px);
 color: var(--n-group-header-text-color);
 `, [A("prefix", `
 width: calc(var(--n-option-prefix-width) / 2);
 `, [_("show-icon", `
 width: calc(var(--n-option-icon-prefix-width) / 2);
 `)])]), A("prefix", `
 width: var(--n-option-prefix-width);
 display: flex;
 justify-content: center;
 align-items: center;
 color: var(--n-prefix-color);
 transition: color .3s var(--n-bezier);
 z-index: 1;
 `, [_("show-icon", `
 width: var(--n-option-icon-prefix-width);
 `), R("icon", `
 font-size: var(--n-option-icon-size);
 `)]), A("label", `
 white-space: nowrap;
 flex: 1;
 z-index: 1;
 `), A("suffix", `
 box-sizing: border-box;
 flex-grow: 0;
 flex-shrink: 0;
 display: flex;
 justify-content: flex-end;
 align-items: center;
 min-width: var(--n-option-suffix-width);
 padding: 0 8px;
 transition: color .3s var(--n-bezier);
 color: var(--n-suffix-color);
 z-index: 1;
 `, [_("has-submenu", `
 width: var(--n-option-icon-suffix-width);
 `), R("icon", `
 font-size: var(--n-option-icon-size);
 `)]), R("dropdown-menu", "pointer-events: all;")]), R("dropdown-offset-container", `
 pointer-events: none;
 position: absolute;
 left: 0;
 right: 0;
 top: -4px;
 bottom: -4px;
 `)]), R("dropdown-divider", `
 transition: background-color .3s var(--n-bezier);
 background-color: var(--n-divider-color);
 height: 1px;
 margin: 4px 0;
 `), R("dropdown-menu-wrapper", `
 transform-origin: var(--v-transform-origin);
 width: fit-content;
 `), B(">", [R("scrollbar", `
 height: inherit;
 max-height: inherit;
 `)]), Je("scrollable", `
 padding: var(--n-padding);
 `), _("scrollable", [A("content", `
 padding: var(--n-padding);
 `)])]), eg = {
  animated: {
    type: Boolean,
    default: !0
  },
  keyboard: {
    type: Boolean,
    default: !0
  },
  size: {
    type: String,
    default: "medium"
  },
  inverted: Boolean,
  placement: {
    type: String,
    default: "bottom"
  },
  onSelect: [Function, Array],
  options: {
    type: Array,
    default: () => []
  },
  menuProps: Function,
  showArrow: Boolean,
  renderLabel: Function,
  renderIcon: Function,
  renderOption: Function,
  nodeProps: Function,
  labelField: {
    type: String,
    default: "label"
  },
  keyField: {
    type: String,
    default: "key"
  },
  childrenField: {
    type: String,
    default: "children"
  },
  // for menu, not documented
  value: [String, Number]
}, tg = Object.keys(zn), ng = Object.assign(Object.assign(Object.assign({}, zn), eg), we.props), rg = ie({
  name: "Dropdown",
  inheritAttrs: !1,
  props: ng,
  setup(e) {
    const t = L(!1), n = zt(ae(e, "show"), t), r = T(() => {
      const {
        keyField: O,
        childrenField: E
      } = e;
      return lo(e.options, {
        getKey(I) {
          return I[O];
        },
        getDisabled(I) {
          return I.disabled === !0;
        },
        getIgnored(I) {
          return I.type === "divider" || I.type === "render";
        },
        getChildren(I) {
          return I[E];
        }
      });
    }), o = T(() => r.value.treeNodes), i = L(null), l = L(null), a = L(null), s = T(() => {
      var O, E, I;
      return (I = (E = (O = i.value) !== null && O !== void 0 ? O : l.value) !== null && E !== void 0 ? E : a.value) !== null && I !== void 0 ? I : null;
    }), d = T(() => r.value.getPath(s.value).keyPath), u = T(() => r.value.getPath(e.value).keyPath), h = Ue(() => e.keyboard && n.value);
    xc({
      keydown: {
        ArrowUp: {
          prevent: !0,
          handler: C
        },
        ArrowRight: {
          prevent: !0,
          handler: w
        },
        ArrowDown: {
          prevent: !0,
          handler: k
        },
        ArrowLeft: {
          prevent: !0,
          handler: S
        },
        Enter: {
          prevent: !0,
          handler: x
        },
        Escape: y
      }
    }, h);
    const {
      mergedClsPrefixRef: b,
      inlineThemeDisabled: m
    } = _e(e), f = we("Dropdown", "-dropdown", Qb, Ts, e, b);
    We(co, {
      labelFieldRef: ae(e, "labelField"),
      childrenFieldRef: ae(e, "childrenField"),
      renderLabelRef: ae(e, "renderLabel"),
      renderIconRef: ae(e, "renderIcon"),
      hoverKeyRef: i,
      keyboardKeyRef: l,
      lastToggledSubmenuKeyRef: a,
      pendingKeyPathRef: d,
      activeKeyPathRef: u,
      animatedRef: ae(e, "animated"),
      mergedShowRef: n,
      nodePropsRef: ae(e, "nodeProps"),
      renderOptionRef: ae(e, "renderOption"),
      menuPropsRef: ae(e, "menuProps"),
      doSelect: p,
      doUpdateShow: v
    }), je(n, (O) => {
      !e.animated && !O && g();
    });
    function p(O, E) {
      const {
        onSelect: I
      } = e;
      I && oe(I, O, E);
    }
    function v(O) {
      const {
        "onUpdate:show": E,
        onUpdateShow: I
      } = e;
      E && oe(E, O), I && oe(I, O), t.value = O;
    }
    function g() {
      i.value = null, l.value = null, a.value = null;
    }
    function y() {
      v(!1);
    }
    function S() {
      $("left");
    }
    function w() {
      $("right");
    }
    function C() {
      $("up");
    }
    function k() {
      $("down");
    }
    function x() {
      const O = z();
      O != null && O.isLeaf && n.value && (p(O.key, O.rawNode), v(!1));
    }
    function z() {
      var O;
      const {
        value: E
      } = r, {
        value: I
      } = s;
      return !E || I === null ? null : (O = E.getNode(I)) !== null && O !== void 0 ? O : null;
    }
    function $(O) {
      const {
        value: E
      } = s, {
        value: {
          getFirstAvailableNode: I
        }
      } = r;
      let F = null;
      if (E === null) {
        const N = I();
        N !== null && (F = N.key);
      } else {
        const N = z();
        if (N) {
          let W;
          switch (O) {
            case "down":
              W = N.getNext();
              break;
            case "up":
              W = N.getPrev();
              break;
            case "right":
              W = N.getChild();
              break;
            case "left":
              W = N.getParent();
              break;
          }
          W && (F = W.key);
        }
      }
      F !== null && (i.value = null, l.value = F);
    }
    const M = T(() => {
      const {
        size: O,
        inverted: E
      } = e, {
        common: {
          cubicBezierEaseInOut: I
        },
        self: F
      } = f.value, {
        padding: N,
        dividerColor: W,
        borderRadius: X,
        optionOpacityDisabled: re,
        [J("optionIconSuffixWidth", O)]: Q,
        [J("optionSuffixWidth", O)]: G,
        [J("optionIconPrefixWidth", O)]: j,
        [J("optionPrefixWidth", O)]: q,
        [J("fontSize", O)]: Z,
        [J("optionHeight", O)]: le,
        [J("optionIconSize", O)]: ue
      } = F, be = {
        "--n-bezier": I,
        "--n-font-size": Z,
        "--n-padding": N,
        "--n-border-radius": X,
        "--n-option-height": le,
        "--n-option-prefix-width": q,
        "--n-option-icon-prefix-width": j,
        "--n-option-suffix-width": G,
        "--n-option-icon-suffix-width": Q,
        "--n-option-icon-size": ue,
        "--n-divider-color": W,
        "--n-option-opacity-disabled": re
      };
      return E ? (be["--n-color"] = F.colorInverted, be["--n-option-color-hover"] = F.optionColorHoverInverted, be["--n-option-color-active"] = F.optionColorActiveInverted, be["--n-option-text-color"] = F.optionTextColorInverted, be["--n-option-text-color-hover"] = F.optionTextColorHoverInverted, be["--n-option-text-color-active"] = F.optionTextColorActiveInverted, be["--n-option-text-color-child-active"] = F.optionTextColorChildActiveInverted, be["--n-prefix-color"] = F.prefixColorInverted, be["--n-suffix-color"] = F.suffixColorInverted, be["--n-group-header-text-color"] = F.groupHeaderTextColorInverted) : (be["--n-color"] = F.color, be["--n-option-color-hover"] = F.optionColorHover, be["--n-option-color-active"] = F.optionColorActive, be["--n-option-text-color"] = F.optionTextColor, be["--n-option-text-color-hover"] = F.optionTextColorHover, be["--n-option-text-color-active"] = F.optionTextColorActive, be["--n-option-text-color-child-active"] = F.optionTextColorChildActive, be["--n-prefix-color"] = F.prefixColor, be["--n-suffix-color"] = F.suffixColor, be["--n-group-header-text-color"] = F.groupHeaderTextColor), be;
    }), V = m ? it("dropdown", T(() => `${e.size[0]}${e.inverted ? "i" : ""}`), M, e) : void 0;
    return {
      mergedClsPrefix: b,
      mergedTheme: f,
      // data
      tmNodes: o,
      // show
      mergedShow: n,
      // methods
      handleAfterLeave: () => {
        e.animated && g();
      },
      doUpdateShow: v,
      cssVars: m ? void 0 : M,
      themeClass: V == null ? void 0 : V.themeClass,
      onRender: V == null ? void 0 : V.onRender
    };
  },
  render() {
    const e = (r, o, i, l, a) => {
      var s;
      const {
        mergedClsPrefix: d,
        menuProps: u
      } = this;
      (s = this.onRender) === null || s === void 0 || s.call(this);
      const h = (u == null ? void 0 : u(void 0, this.tmNodes.map((m) => m.rawNode))) || {}, b = {
        ref: Xl(o),
        class: [r, `${d}-dropdown`, this.themeClass],
        clsPrefix: d,
        tmNodes: this.tmNodes,
        style: [...i, this.cssVars],
        showArrow: this.showArrow,
        arrowStyle: this.arrowStyle,
        scrollable: this.scrollable,
        onMouseenter: l,
        onMouseleave: a
      };
      return c(Ns, Vt(this.$attrs, b, h));
    }, {
      mergedTheme: t
    } = this, n = {
      show: this.mergedShow,
      theme: t.peers.Popover,
      themeOverrides: t.peerOverrides.Popover,
      internalOnAfterLeave: this.handleAfterLeave,
      internalRenderBody: e,
      onUpdateShow: this.doUpdateShow,
      "onUpdate:show": void 0
    };
    return c(Jn, Object.assign({}, kn(this.$props, tg), n), {
      trigger: () => {
        var r, o;
        return (o = (r = this.$slots).default) === null || o === void 0 ? void 0 : o.call(r);
      }
    });
  }
}), Vs = "_n_all__", Ks = "_n_none__";
function og(e, t, n, r) {
  return e ? (o) => {
    for (const i of e)
      switch (o) {
        case Vs:
          n(!0);
          return;
        case Ks:
          r(!0);
          return;
        default:
          if (typeof i == "object" && i.key === o) {
            i.onSelect(t.value);
            return;
          }
      }
  } : () => {
  };
}
function ig(e, t) {
  return e ? e.map((n) => {
    switch (n) {
      case "all":
        return {
          label: t.checkTableAll,
          key: Vs
        };
      case "none":
        return {
          label: t.uncheckTableAll,
          key: Ks
        };
      default:
        return n;
    }
  }) : [];
}
const ag = ie({
  name: "DataTableSelectionMenu",
  props: {
    clsPrefix: {
      type: String,
      required: !0
    }
  },
  setup(e) {
    const {
      props: t,
      localeRef: n,
      checkOptionsRef: r,
      rawPaginatedDataRef: o,
      doCheckAll: i,
      doUncheckAll: l
    } = ke(qt), a = T(() => og(r.value, o, i, l)), s = T(() => ig(r.value, n.value));
    return () => {
      var d, u, h, b;
      const {
        clsPrefix: m
      } = e;
      return c(rg, {
        theme: (u = (d = t.theme) === null || d === void 0 ? void 0 : d.peers) === null || u === void 0 ? void 0 : u.Dropdown,
        themeOverrides: (b = (h = t.themeOverrides) === null || h === void 0 ? void 0 : h.peers) === null || b === void 0 ? void 0 : b.Dropdown,
        options: s.value,
        onSelect: a.value
      }, {
        default: () => c(ct, {
          clsPrefix: m,
          class: `${m}-data-table-check-extra`
        }, {
          default: () => c(es, null)
        })
      });
    };
  }
});
function Do(e) {
  return typeof e.title == "function" ? e.title(e) : e.title;
}
const lg = ie({
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    id: {
      type: String,
      required: !0
    },
    cols: {
      type: Array,
      required: !0
    },
    width: String
  },
  render() {
    const {
      clsPrefix: e,
      id: t,
      cols: n,
      width: r
    } = this;
    return c("table", {
      style: {
        tableLayout: "fixed",
        width: r
      },
      class: `${e}-data-table-table`
    }, c("colgroup", null, n.map((o) => c("col", {
      key: o.key,
      style: o.style
    }))), c("thead", {
      "data-n-id": t,
      class: `${e}-data-table-thead`
    }, this.$slots));
  }
}), Us = ie({
  name: "DataTableHeader",
  props: {
    discrete: {
      type: Boolean,
      default: !0
    }
  },
  setup() {
    const {
      mergedClsPrefixRef: e,
      scrollXRef: t,
      fixedColumnLeftMapRef: n,
      fixedColumnRightMapRef: r,
      mergedCurrentPageRef: o,
      allRowsCheckedRef: i,
      someRowsCheckedRef: l,
      rowsRef: a,
      colsRef: s,
      mergedThemeRef: d,
      checkOptionsRef: u,
      mergedSortStateRef: h,
      componentId: b,
      mergedTableLayoutRef: m,
      headerCheckboxDisabledRef: f,
      virtualScrollHeaderRef: p,
      headerHeightRef: v,
      onUnstableColumnResize: g,
      doUpdateResizableWidth: y,
      handleTableHeaderScroll: S,
      deriveNextSorter: w,
      doUncheckAll: C,
      doCheckAll: k
    } = ke(qt), x = L(), z = L({});
    function $(F) {
      const N = z.value[F];
      return N == null ? void 0 : N.getBoundingClientRect().width;
    }
    function M() {
      i.value ? C() : k();
    }
    function V(F, N) {
      if (Lt(F, "dataTableFilter") || Lt(F, "dataTableResizable") || !Ho(N)) return;
      const W = h.value.find((re) => re.columnKey === N.key) || null, X = xb(N, W);
      w(X);
    }
    const O = /* @__PURE__ */ new Map();
    function E(F) {
      O.set(F.key, $(F.key));
    }
    function I(F, N) {
      const W = O.get(F.key);
      if (W === void 0)
        return;
      const X = W + N, re = gb(X, F.minWidth, F.maxWidth);
      g(X, re, F, $), y(F, re);
    }
    return {
      cellElsRef: z,
      componentId: b,
      mergedSortState: h,
      mergedClsPrefix: e,
      scrollX: t,
      fixedColumnLeftMap: n,
      fixedColumnRightMap: r,
      currentPage: o,
      allRowsChecked: i,
      someRowsChecked: l,
      rows: a,
      cols: s,
      mergedTheme: d,
      checkOptions: u,
      mergedTableLayout: m,
      headerCheckboxDisabled: f,
      headerHeight: v,
      virtualScrollHeader: p,
      virtualListRef: x,
      handleCheckboxUpdateChecked: M,
      handleColHeaderClick: V,
      handleTableHeaderScroll: S,
      handleColumnResizeStart: E,
      handleColumnResize: I
    };
  },
  render() {
    const {
      cellElsRef: e,
      mergedClsPrefix: t,
      fixedColumnLeftMap: n,
      fixedColumnRightMap: r,
      currentPage: o,
      allRowsChecked: i,
      someRowsChecked: l,
      rows: a,
      cols: s,
      mergedTheme: d,
      checkOptions: u,
      componentId: h,
      discrete: b,
      mergedTableLayout: m,
      headerCheckboxDisabled: f,
      mergedSortState: p,
      virtualScrollHeader: v,
      handleColHeaderClick: g,
      handleCheckboxUpdateChecked: y,
      handleColumnResizeStart: S,
      handleColumnResize: w
    } = this, C = ($, M, V) => $.map(({
      column: O,
      colIndex: E,
      colSpan: I,
      rowSpan: F,
      isLast: N
    }) => {
      var W, X;
      const re = Dt(O), {
        ellipsis: Q
      } = O, G = () => O.type === "selection" ? O.multiple !== !1 ? c(Pt, null, c(Mi, {
        key: o,
        privateInsideTable: !0,
        checked: i,
        indeterminate: l,
        disabled: f,
        onUpdateChecked: y
      }), u ? c(ag, {
        clsPrefix: t
      }) : null) : null : c(Pt, null, c("div", {
        class: `${t}-data-table-th__title-wrapper`
      }, c("div", {
        class: `${t}-data-table-th__title`
      }, Q === !0 || Q && !Q.tooltip ? c("div", {
        class: `${t}-data-table-th__ellipsis`
      }, Do(O)) : Q && typeof Q == "object" ? c(Ei, Object.assign({}, Q, {
        theme: d.peers.Ellipsis,
        themeOverrides: d.peerOverrides.Ellipsis
      }), {
        default: () => Do(O)
      }) : Do(O)), Ho(O) ? c(Wb, {
        column: O
      }) : null), Ga(O) ? c(Hb, {
        column: O,
        options: O.filterOptions
      }) : null, Es(O) ? c(Db, {
        onResizeStart: () => {
          S(O);
        },
        onResize: (le) => {
          w(O, le);
        }
      }) : null), j = re in n, q = re in r, Z = M && !O.fixed ? "div" : "th";
      return c(Z, {
        ref: (le) => e[re] = le,
        key: re,
        style: [M && !O.fixed ? {
          position: "absolute",
          left: wt(M(E)),
          top: 0,
          bottom: 0
        } : {
          left: wt((W = n[re]) === null || W === void 0 ? void 0 : W.start),
          right: wt((X = r[re]) === null || X === void 0 ? void 0 : X.start)
        }, {
          width: wt(O.width),
          textAlign: O.titleAlign || O.align,
          height: V
        }],
        colspan: I,
        rowspan: F,
        "data-col-key": re,
        class: [`${t}-data-table-th`, (j || q) && `${t}-data-table-th--fixed-${j ? "left" : "right"}`, {
          [`${t}-data-table-th--sorting`]: Is(O, p),
          [`${t}-data-table-th--filterable`]: Ga(O),
          [`${t}-data-table-th--sortable`]: Ho(O),
          [`${t}-data-table-th--selection`]: O.type === "selection",
          [`${t}-data-table-th--last`]: N
        }, O.className],
        onClick: O.type !== "selection" && O.type !== "expand" && !("children" in O) ? (le) => {
          g(le, O);
        } : void 0
      }, G());
    });
    if (v) {
      const {
        headerHeight: $
      } = this;
      let M = 0, V = 0;
      return s.forEach((O) => {
        O.column.fixed === "left" ? M++ : O.column.fixed === "right" && V++;
      }), c(Si, {
        ref: "virtualListRef",
        class: `${t}-data-table-base-table-header`,
        style: {
          height: wt($)
        },
        onScroll: this.handleTableHeaderScroll,
        columns: s,
        itemSize: $,
        showScrollbar: !1,
        items: [{}],
        itemResizable: !1,
        visibleItemsTag: lg,
        visibleItemsProps: {
          clsPrefix: t,
          id: h,
          cols: s,
          width: ot(this.scrollX)
        },
        renderItemWithCols: ({
          startColIndex: O,
          endColIndex: E,
          getLeft: I
        }) => {
          const F = s.map((W, X) => ({
            column: W.column,
            isLast: X === s.length - 1,
            colIndex: W.index,
            colSpan: 1,
            rowSpan: 1
          })).filter(({
            column: W
          }, X) => !!(O <= X && X <= E || W.fixed)), N = C(F, I, wt($));
          return N.splice(M, 0, c("th", {
            colspan: s.length - M - V,
            style: {
              pointerEvents: "none",
              visibility: "hidden",
              height: 0
            }
          })), c("tr", {
            style: {
              position: "relative"
            }
          }, N);
        }
      }, {
        default: ({
          renderedItemWithCols: O
        }) => O
      });
    }
    const k = c("thead", {
      class: `${t}-data-table-thead`,
      "data-n-id": h
    }, a.map(($) => c("tr", {
      class: `${t}-data-table-tr`
    }, C($, null, void 0))));
    if (!b)
      return k;
    const {
      handleTableHeaderScroll: x,
      scrollX: z
    } = this;
    return c("div", {
      class: `${t}-data-table-base-table-header`,
      onScroll: x
    }, c("table", {
      class: `${t}-data-table-table`,
      style: {
        minWidth: ot(z),
        tableLayout: m
      }
    }, c("colgroup", null, s.map(($) => c("col", {
      key: $.key,
      style: $.style
    }))), k));
  }
});
function sg(e, t) {
  const n = [];
  function r(o, i) {
    o.forEach((l) => {
      l.children && t.has(l.key) ? (n.push({
        tmNode: l,
        striped: !1,
        key: l.key,
        index: i
      }), r(l.children, i)) : n.push({
        key: l.key,
        tmNode: l,
        striped: !1,
        index: i
      });
    });
  }
  return e.forEach((o) => {
    n.push(o);
    const {
      children: i
    } = o.tmNode;
    i && t.has(o.key) && r(i, o.index);
  }), n;
}
const dg = ie({
  props: {
    clsPrefix: {
      type: String,
      required: !0
    },
    id: {
      type: String,
      required: !0
    },
    cols: {
      type: Array,
      required: !0
    },
    onMouseenter: Function,
    onMouseleave: Function
  },
  render() {
    const {
      clsPrefix: e,
      id: t,
      cols: n,
      onMouseenter: r,
      onMouseleave: o
    } = this;
    return c("table", {
      style: {
        tableLayout: "fixed"
      },
      class: `${e}-data-table-table`,
      onMouseenter: r,
      onMouseleave: o
    }, c("colgroup", null, n.map((i) => c("col", {
      key: i.key,
      style: i.style
    }))), c("tbody", {
      "data-n-id": t,
      class: `${e}-data-table-tbody`
    }, this.$slots));
  }
}), cg = ie({
  name: "DataTableBody",
  props: {
    onResize: Function,
    showHeader: Boolean,
    flexHeight: Boolean,
    bodyStyle: Object
  },
  setup(e) {
    const {
      slots: t,
      bodyWidthRef: n,
      mergedExpandedRowKeysRef: r,
      mergedClsPrefixRef: o,
      mergedThemeRef: i,
      scrollXRef: l,
      colsRef: a,
      paginatedDataRef: s,
      rawPaginatedDataRef: d,
      fixedColumnLeftMapRef: u,
      fixedColumnRightMapRef: h,
      mergedCurrentPageRef: b,
      rowClassNameRef: m,
      leftActiveFixedColKeyRef: f,
      leftActiveFixedChildrenColKeysRef: p,
      rightActiveFixedColKeyRef: v,
      rightActiveFixedChildrenColKeysRef: g,
      renderExpandRef: y,
      hoverKeyRef: S,
      summaryRef: w,
      mergedSortStateRef: C,
      virtualScrollRef: k,
      virtualScrollXRef: x,
      heightForRowRef: z,
      minRowHeightRef: $,
      componentId: M,
      mergedTableLayoutRef: V,
      childTriggerColIndexRef: O,
      indentRef: E,
      rowPropsRef: I,
      maxHeightRef: F,
      stripedRef: N,
      loadingRef: W,
      onLoadRef: X,
      loadingKeySetRef: re,
      expandableRef: Q,
      stickyExpandedRowsRef: G,
      renderExpandIconRef: j,
      summaryPlacementRef: q,
      treeMateRef: Z,
      scrollbarPropsRef: le,
      setHeaderScrollLeft: ue,
      doUpdateExpandedRowKeys: be,
      handleTableBodyScroll: Re,
      doCheck: K,
      doUncheck: fe,
      renderCell: Me
    } = ke(qt), ye = ke(Ut), Fe = L(null), Te = L(null), Qe = L(null), qe = Ue(() => s.value.length === 0), tt = Ue(() => e.showHeader || !qe.value), et = Ue(() => e.showHeader || qe.value);
    let me = "";
    const U = T(() => new Set(r.value));
    function Y(pe) {
      var Pe;
      return (Pe = Z.value.getNode(pe)) === null || Pe === void 0 ? void 0 : Pe.rawNode;
    }
    function de(pe, Pe, P) {
      const D = Y(pe.key);
      if (!D) {
        Kt("data-table", `fail to get row data with key ${pe.key}`);
        return;
      }
      if (P) {
        const ee = s.value.findIndex((se) => se.key === me);
        if (ee !== -1) {
          const se = s.value.findIndex((Se) => Se.key === pe.key), he = Math.min(ee, se), ge = Math.max(ee, se), ve = [];
          s.value.slice(he, ge + 1).forEach((Se) => {
            Se.disabled || ve.push(Se.key);
          }), Pe ? K(ve, !1, D) : fe(ve, D), me = pe.key;
          return;
        }
      }
      Pe ? K(pe.key, !1, D) : fe(pe.key, D), me = pe.key;
    }
    function xe(pe) {
      const Pe = Y(pe.key);
      if (!Pe) {
        Kt("data-table", `fail to get row data with key ${pe.key}`);
        return;
      }
      K(pe.key, !0, Pe);
    }
    function te() {
      if (!tt.value) {
        const {
          value: Pe
        } = Qe;
        return Pe || null;
      }
      if (k.value)
        return Ne();
      const {
        value: pe
      } = Fe;
      return pe ? pe.containerRef : null;
    }
    function ce(pe, Pe) {
      var P;
      if (re.value.has(pe)) return;
      const {
        value: D
      } = r, ee = D.indexOf(pe), se = Array.from(D);
      ~ee ? (se.splice(ee, 1), be(se)) : Pe && !Pe.isLeaf && !Pe.shallowLoaded ? (re.value.add(pe), (P = X.value) === null || P === void 0 || P.call(X, Pe.rawNode).then(() => {
        const {
          value: he
        } = r, ge = Array.from(he);
        ~ge.indexOf(pe) || ge.push(pe), be(ge);
      }).finally(() => {
        re.value.delete(pe);
      })) : (se.push(pe), be(se));
    }
    function ze() {
      S.value = null;
    }
    function Ne() {
      const {
        value: pe
      } = Te;
      return (pe == null ? void 0 : pe.listElRef) || null;
    }
    function st() {
      const {
        value: pe
      } = Te;
      return (pe == null ? void 0 : pe.itemsElRef) || null;
    }
    function ft(pe) {
      var Pe;
      Re(pe), (Pe = Fe.value) === null || Pe === void 0 || Pe.sync();
    }
    function at(pe) {
      var Pe;
      const {
        onResize: P
      } = e;
      P && P(pe), (Pe = Fe.value) === null || Pe === void 0 || Pe.sync();
    }
    const Xe = {
      getScrollContainer: te,
      scrollTo(pe, Pe) {
        var P, D;
        k.value ? (P = Te.value) === null || P === void 0 || P.scrollTo(pe, Pe) : (D = Fe.value) === null || D === void 0 || D.scrollTo(pe, Pe);
      }
    }, dt = B([({
      props: pe
    }) => {
      const Pe = (D) => D === null ? null : B(`[data-n-id="${pe.componentId}"] [data-col-key="${D}"]::after`, {
        boxShadow: "var(--n-box-shadow-after)"
      }), P = (D) => D === null ? null : B(`[data-n-id="${pe.componentId}"] [data-col-key="${D}"]::before`, {
        boxShadow: "var(--n-box-shadow-before)"
      });
      return B([Pe(pe.leftActiveFixedColKey), P(pe.rightActiveFixedColKey), pe.leftActiveFixedChildrenColKeys.map((D) => Pe(D)), pe.rightActiveFixedChildrenColKeys.map((D) => P(D))]);
    }]);
    let Ge = !1;
    return Bt(() => {
      const {
        value: pe
      } = f, {
        value: Pe
      } = p, {
        value: P
      } = v, {
        value: D
      } = g;
      if (!Ge && pe === null && P === null)
        return;
      const ee = {
        leftActiveFixedColKey: pe,
        leftActiveFixedChildrenColKeys: Pe,
        rightActiveFixedColKey: P,
        rightActiveFixedChildrenColKeys: D,
        componentId: M
      };
      dt.mount({
        id: `n-${M}`,
        force: !0,
        props: ee,
        anchorMetaName: Wn,
        parent: ye == null ? void 0 : ye.styleMountTarget
      }), Ge = !0;
    }), ml(() => {
      dt.unmount({
        id: `n-${M}`,
        parent: ye == null ? void 0 : ye.styleMountTarget
      });
    }), Object.assign({
      bodyWidth: n,
      summaryPlacement: q,
      dataTableSlots: t,
      componentId: M,
      scrollbarInstRef: Fe,
      virtualListRef: Te,
      emptyElRef: Qe,
      summary: w,
      mergedClsPrefix: o,
      mergedTheme: i,
      scrollX: l,
      cols: a,
      loading: W,
      bodyShowHeaderOnly: et,
      shouldDisplaySomeTablePart: tt,
      empty: qe,
      paginatedDataAndInfo: T(() => {
        const {
          value: pe
        } = N;
        let Pe = !1;
        return {
          data: s.value.map(pe ? (D, ee) => (D.isLeaf || (Pe = !0), {
            tmNode: D,
            key: D.key,
            striped: ee % 2 === 1,
            index: ee
          }) : (D, ee) => (D.isLeaf || (Pe = !0), {
            tmNode: D,
            key: D.key,
            striped: !1,
            index: ee
          })),
          hasChildren: Pe
        };
      }),
      rawPaginatedData: d,
      fixedColumnLeftMap: u,
      fixedColumnRightMap: h,
      currentPage: b,
      rowClassName: m,
      renderExpand: y,
      mergedExpandedRowKeySet: U,
      hoverKey: S,
      mergedSortState: C,
      virtualScroll: k,
      virtualScrollX: x,
      heightForRow: z,
      minRowHeight: $,
      mergedTableLayout: V,
      childTriggerColIndex: O,
      indent: E,
      rowProps: I,
      maxHeight: F,
      loadingKeySet: re,
      expandable: Q,
      stickyExpandedRows: G,
      renderExpandIcon: j,
      scrollbarProps: le,
      setHeaderScrollLeft: ue,
      handleVirtualListScroll: ft,
      handleVirtualListResize: at,
      handleMouseleaveTable: ze,
      virtualListContainer: Ne,
      virtualListContent: st,
      handleTableBodyScroll: Re,
      handleCheckboxUpdateChecked: de,
      handleRadioUpdateChecked: xe,
      handleUpdateExpanded: ce,
      renderCell: Me
    }, Xe);
  },
  render() {
    const {
      mergedTheme: e,
      scrollX: t,
      mergedClsPrefix: n,
      virtualScroll: r,
      maxHeight: o,
      mergedTableLayout: i,
      flexHeight: l,
      loadingKeySet: a,
      onResize: s,
      setHeaderScrollLeft: d
    } = this, u = t !== void 0 || o !== void 0 || l, h = !u && i === "auto", b = t !== void 0 || h, m = {
      minWidth: ot(t) || "100%"
    };
    t && (m.width = "100%");
    const f = c(Zn, Object.assign({}, this.scrollbarProps, {
      ref: "scrollbarInstRef",
      scrollable: u || h,
      class: `${n}-data-table-base-table-body`,
      style: this.empty ? void 0 : this.bodyStyle,
      theme: e.peers.Scrollbar,
      themeOverrides: e.peerOverrides.Scrollbar,
      contentStyle: m,
      container: r ? this.virtualListContainer : void 0,
      content: r ? this.virtualListContent : void 0,
      horizontalRailStyle: {
        zIndex: 3
      },
      verticalRailStyle: {
        zIndex: 3
      },
      xScrollable: b,
      onScroll: r ? void 0 : this.handleTableBodyScroll,
      internalOnUpdateScrollLeft: d,
      onResize: s
    }), {
      default: () => {
        const p = {}, v = {}, {
          cols: g,
          paginatedDataAndInfo: y,
          mergedTheme: S,
          fixedColumnLeftMap: w,
          fixedColumnRightMap: C,
          currentPage: k,
          rowClassName: x,
          mergedSortState: z,
          mergedExpandedRowKeySet: $,
          stickyExpandedRows: M,
          componentId: V,
          childTriggerColIndex: O,
          expandable: E,
          rowProps: I,
          handleMouseleaveTable: F,
          renderExpand: N,
          summary: W,
          handleCheckboxUpdateChecked: X,
          handleRadioUpdateChecked: re,
          handleUpdateExpanded: Q,
          heightForRow: G,
          minRowHeight: j,
          virtualScrollX: q
        } = this, {
          length: Z
        } = g;
        let le;
        const {
          data: ue,
          hasChildren: be
        } = y, Re = be ? sg(ue, $) : ue;
        if (W) {
          const me = W(this.rawPaginatedData);
          if (Array.isArray(me)) {
            const U = me.map((Y, de) => ({
              isSummaryRow: !0,
              key: `__n_summary__${de}`,
              tmNode: {
                rawNode: Y,
                disabled: !0
              },
              index: -1
            }));
            le = this.summaryPlacement === "top" ? [...U, ...Re] : [...Re, ...U];
          } else {
            const U = {
              isSummaryRow: !0,
              key: "__n_summary__",
              tmNode: {
                rawNode: me,
                disabled: !0
              },
              index: -1
            };
            le = this.summaryPlacement === "top" ? [U, ...Re] : [...Re, U];
          }
        } else
          le = Re;
        const K = be ? {
          width: wt(this.indent)
        } : void 0, fe = [];
        le.forEach((me) => {
          N && $.has(me.key) && (!E || E(me.tmNode.rawNode)) ? fe.push(me, {
            isExpandedRow: !0,
            key: `${me.key}-expand`,
            // solve key repeat of the expanded row
            tmNode: me.tmNode,
            index: me.index
          }) : fe.push(me);
        });
        const {
          length: Me
        } = fe, ye = {};
        ue.forEach(({
          tmNode: me
        }, U) => {
          ye[U] = me.key;
        });
        const Fe = M ? this.bodyWidth : null, Te = Fe === null ? void 0 : `${Fe}px`, Qe = this.virtualScrollX ? "div" : "td";
        let qe = 0, tt = 0;
        q && g.forEach((me) => {
          me.column.fixed === "left" ? qe++ : me.column.fixed === "right" && tt++;
        });
        const et = ({
          // Normal
          rowInfo: me,
          displayedRowIndex: U,
          isVirtual: Y,
          // Virtual X
          isVirtualX: de,
          startColIndex: xe,
          endColIndex: te,
          getLeft: ce
        }) => {
          const {
            index: ze
          } = me;
          if ("isExpandedRow" in me) {
            const {
              tmNode: {
                key: se,
                rawNode: he
              }
            } = me;
            return c("tr", {
              class: `${n}-data-table-tr ${n}-data-table-tr--expanded`,
              key: `${se}__expand`
            }, c("td", {
              class: [`${n}-data-table-td`, `${n}-data-table-td--last-col`, U + 1 === Me && `${n}-data-table-td--last-row`],
              colspan: Z
            }, M ? c("div", {
              class: `${n}-data-table-expand`,
              style: {
                width: Te
              }
            }, N(he, ze)) : N(he, ze)));
          }
          const Ne = "isSummaryRow" in me, st = !Ne && me.striped, {
            tmNode: ft,
            key: at
          } = me, {
            rawNode: Xe
          } = ft, dt = $.has(at), Ge = I ? I(Xe, ze) : void 0, pe = typeof x == "string" ? x : vb(Xe, ze, x), Pe = de ? g.filter((se, he) => !!(xe <= he && he <= te || se.column.fixed)) : g, P = de ? wt((G == null ? void 0 : G(Xe, ze)) || j) : void 0, D = Pe.map((se) => {
            var he, ge, ve, Se, Ee;
            const Ye = se.index;
            if (U in p) {
              const nt = p[U], lt = nt.indexOf(Ye);
              if (~lt)
                return nt.splice(lt, 1), null;
            }
            const {
              column: Le
            } = se, bt = Dt(se), {
              rowSpan: xt,
              colSpan: yt
            } = Le, Ct = Ne ? ((he = me.tmNode.rawNode[bt]) === null || he === void 0 ? void 0 : he.colSpan) || 1 : yt ? yt(Xe, ze) : 1, St = Ne ? ((ge = me.tmNode.rawNode[bt]) === null || ge === void 0 ? void 0 : ge.rowSpan) || 1 : xt ? xt(Xe, ze) : 1, Mt = Ye + Ct === Z, Ft = U + St === Me, H = St > 1;
            if (H && (v[U] = {
              [Ye]: []
            }), Ct > 1 || H)
              for (let nt = U; nt < U + St; ++nt) {
                H && v[U][Ye].push(ye[nt]);
                for (let lt = Ye; lt < Ye + Ct; ++lt)
                  nt === U && lt === Ye || (nt in p ? p[nt].push(lt) : p[nt] = [lt]);
              }
            const ne = H ? this.hoverKey : null, {
              cellProps: Ce
            } = Le, Be = Ce == null ? void 0 : Ce(Xe, ze), Ve = {
              "--indent-offset": ""
            }, Ae = Le.fixed ? "td" : Qe;
            return c(Ae, Object.assign({}, Be, {
              key: bt,
              style: [{
                textAlign: Le.align || void 0,
                width: wt(Le.width)
              }, de && {
                height: P
              }, de && !Le.fixed ? {
                position: "absolute",
                left: wt(ce(Ye)),
                top: 0,
                bottom: 0
              } : {
                left: wt((ve = w[bt]) === null || ve === void 0 ? void 0 : ve.start),
                right: wt((Se = C[bt]) === null || Se === void 0 ? void 0 : Se.start)
              }, Ve, (Be == null ? void 0 : Be.style) || ""],
              colspan: Ct,
              rowspan: Y ? void 0 : St,
              "data-col-key": bt,
              class: [`${n}-data-table-td`, Le.className, Be == null ? void 0 : Be.class, Ne && `${n}-data-table-td--summary`, ne !== null && v[U][Ye].includes(ne) && `${n}-data-table-td--hover`, Is(Le, z) && `${n}-data-table-td--sorting`, Le.fixed && `${n}-data-table-td--fixed-${Le.fixed}`, Le.align && `${n}-data-table-td--${Le.align}-align`, Le.type === "selection" && `${n}-data-table-td--selection`, Le.type === "expand" && `${n}-data-table-td--expand`, Mt && `${n}-data-table-td--last-col`, Ft && `${n}-data-table-td--last-row`]
            }), be && Ye === O ? [ac(Ve["--indent-offset"] = Ne ? 0 : me.tmNode.level, c("div", {
              class: `${n}-data-table-indent`,
              style: K
            })), Ne || me.tmNode.isLeaf ? c("div", {
              class: `${n}-data-table-expand-placeholder`
            }) : c(Ya, {
              class: `${n}-data-table-expand-trigger`,
              clsPrefix: n,
              expanded: dt,
              rowData: Xe,
              renderExpandIcon: this.renderExpandIcon,
              loading: a.has(me.key),
              onClick: () => {
                Q(at, me.tmNode);
              }
            })] : null, Le.type === "selection" ? Ne ? null : Le.multiple === !1 ? c(Fb, {
              key: k,
              rowKey: at,
              disabled: me.tmNode.disabled,
              onUpdateChecked: () => {
                re(me.tmNode);
              }
            }) : c(Cb, {
              key: k,
              rowKey: at,
              disabled: me.tmNode.disabled,
              onUpdateChecked: (nt, lt) => {
                X(me.tmNode, nt, lt.shiftKey);
              }
            }) : Le.type === "expand" ? Ne ? null : !Le.expandable || !((Ee = Le.expandable) === null || Ee === void 0) && Ee.call(Le, Xe) ? c(Ya, {
              clsPrefix: n,
              rowData: Xe,
              expanded: dt,
              renderExpandIcon: this.renderExpandIcon,
              onClick: () => {
                Q(at, null);
              }
            }) : null : c(Ib, {
              clsPrefix: n,
              index: ze,
              row: Xe,
              column: Le,
              isSummary: Ne,
              mergedTheme: S,
              renderCell: this.renderCell
            }));
          });
          return de && qe && tt && D.splice(qe, 0, c("td", {
            colspan: g.length - qe - tt,
            style: {
              pointerEvents: "none",
              visibility: "hidden",
              height: 0
            }
          })), c("tr", Object.assign({}, Ge, {
            onMouseenter: (se) => {
              var he;
              this.hoverKey = at, (he = Ge == null ? void 0 : Ge.onMouseenter) === null || he === void 0 || he.call(Ge, se);
            },
            key: at,
            class: [`${n}-data-table-tr`, Ne && `${n}-data-table-tr--summary`, st && `${n}-data-table-tr--striped`, dt && `${n}-data-table-tr--expanded`, pe, Ge == null ? void 0 : Ge.class],
            style: [Ge == null ? void 0 : Ge.style, de && {
              height: P
            }]
          }), D);
        };
        return r ? c(Si, {
          ref: "virtualListRef",
          items: fe,
          itemSize: this.minRowHeight,
          visibleItemsTag: dg,
          visibleItemsProps: {
            clsPrefix: n,
            id: V,
            cols: g,
            onMouseleave: F
          },
          showScrollbar: !1,
          onResize: this.handleVirtualListResize,
          onScroll: this.handleVirtualListScroll,
          itemsStyle: m,
          itemResizable: !q,
          columns: g,
          renderItemWithCols: q ? ({
            itemIndex: me,
            item: U,
            startColIndex: Y,
            endColIndex: de,
            getLeft: xe
          }) => et({
            displayedRowIndex: me,
            isVirtual: !0,
            isVirtualX: !0,
            rowInfo: U,
            startColIndex: Y,
            endColIndex: de,
            getLeft: xe
          }) : void 0
        }, {
          default: ({
            item: me,
            index: U,
            renderedItemWithCols: Y
          }) => Y || et({
            rowInfo: me,
            displayedRowIndex: U,
            isVirtual: !0,
            isVirtualX: !1,
            startColIndex: 0,
            endColIndex: 0,
            getLeft(de) {
              return 0;
            }
          })
        }) : c("table", {
          class: `${n}-data-table-table`,
          onMouseleave: F,
          style: {
            tableLayout: this.mergedTableLayout
          }
        }, c("colgroup", null, g.map((me) => c("col", {
          key: me.key,
          style: me.style
        }))), this.showHeader ? c(Us, {
          discrete: !1
        }) : null, this.empty ? null : c("tbody", {
          "data-n-id": V,
          class: `${n}-data-table-tbody`
        }, fe.map((me, U) => et({
          rowInfo: me,
          displayedRowIndex: U,
          isVirtual: !1,
          isVirtualX: !1,
          startColIndex: -1,
          endColIndex: -1,
          getLeft(Y) {
            return -1;
          }
        }))));
      }
    });
    if (this.empty) {
      const p = () => c("div", {
        class: [`${n}-data-table-empty`, this.loading && `${n}-data-table-empty--hide`],
        style: this.bodyStyle,
        ref: "emptyElRef"
      }, Et(this.dataTableSlots.empty, () => [c(us, {
        theme: this.mergedTheme.peers.Empty,
        themeOverrides: this.mergedTheme.peerOverrides.Empty
      })]));
      return this.shouldDisplaySomeTablePart ? c(Pt, null, f, p()) : c(on, {
        onResize: this.onResize
      }, {
        default: p
      });
    }
    return f;
  }
}), ug = ie({
  name: "MainTable",
  setup() {
    const {
      mergedClsPrefixRef: e,
      rightFixedColumnsRef: t,
      leftFixedColumnsRef: n,
      bodyWidthRef: r,
      maxHeightRef: o,
      minHeightRef: i,
      flexHeightRef: l,
      virtualScrollHeaderRef: a,
      syncScrollState: s
    } = ke(qt), d = L(null), u = L(null), h = L(null), b = L(!(n.value.length || t.value.length)), m = T(() => ({
      maxHeight: ot(o.value),
      minHeight: ot(i.value)
    }));
    function f(y) {
      r.value = y.contentRect.width, s(), b.value || (b.value = !0);
    }
    function p() {
      var y;
      const {
        value: S
      } = d;
      return S ? a.value ? ((y = S.virtualListRef) === null || y === void 0 ? void 0 : y.listElRef) || null : S.$el : null;
    }
    function v() {
      const {
        value: y
      } = u;
      return y ? y.getScrollContainer() : null;
    }
    const g = {
      getBodyElement: v,
      getHeaderElement: p,
      scrollTo(y, S) {
        var w;
        (w = u.value) === null || w === void 0 || w.scrollTo(y, S);
      }
    };
    return Bt(() => {
      const {
        value: y
      } = h;
      if (!y) return;
      const S = `${e.value}-data-table-base-table--transition-disabled`;
      b.value ? setTimeout(() => {
        y.classList.remove(S);
      }, 0) : y.classList.add(S);
    }), Object.assign({
      maxHeight: o,
      mergedClsPrefix: e,
      selfElRef: h,
      headerInstRef: d,
      bodyInstRef: u,
      bodyStyle: m,
      flexHeight: l,
      handleBodyResize: f
    }, g);
  },
  render() {
    const {
      mergedClsPrefix: e,
      maxHeight: t,
      flexHeight: n
    } = this, r = t === void 0 && !n;
    return c("div", {
      class: `${e}-data-table-base-table`,
      ref: "selfElRef"
    }, r ? null : c(Us, {
      ref: "headerInstRef"
    }), c(cg, {
      ref: "bodyInstRef",
      bodyStyle: this.bodyStyle,
      showHeader: r,
      flexHeight: n,
      onResize: this.handleBodyResize
    }));
  }
}), Ja = hg(), fg = B([R("data-table", `
 width: 100%;
 font-size: var(--n-font-size);
 display: flex;
 flex-direction: column;
 position: relative;
 --n-merged-th-color: var(--n-th-color);
 --n-merged-td-color: var(--n-td-color);
 --n-merged-border-color: var(--n-border-color);
 --n-merged-th-color-sorting: var(--n-th-color-sorting);
 --n-merged-td-color-hover: var(--n-td-color-hover);
 --n-merged-td-color-sorting: var(--n-td-color-sorting);
 --n-merged-td-color-striped: var(--n-td-color-striped);
 `, [R("data-table-wrapper", `
 flex-grow: 1;
 display: flex;
 flex-direction: column;
 `), _("flex-height", [B(">", [R("data-table-wrapper", [B(">", [R("data-table-base-table", `
 display: flex;
 flex-direction: column;
 flex-grow: 1;
 `, [B(">", [R("data-table-base-table-body", "flex-basis: 0;", [
  // last-child means there is no empty icon
  // body is a scrollbar, we need to override height 100%
  B("&:last-child", "flex-grow: 1;")
])])])])])])]), B(">", [R("data-table-loading-wrapper", `
 color: var(--n-loading-color);
 font-size: var(--n-loading-size);
 position: absolute;
 left: 50%;
 top: 50%;
 transform: translateX(-50%) translateY(-50%);
 transition: color .3s var(--n-bezier);
 display: flex;
 align-items: center;
 justify-content: center;
 `, [Pr({
  originalTransform: "translateX(-50%) translateY(-50%)"
})])]), R("data-table-expand-placeholder", `
 margin-right: 8px;
 display: inline-block;
 width: 16px;
 height: 1px;
 `), R("data-table-indent", `
 display: inline-block;
 height: 1px;
 `), R("data-table-expand-trigger", `
 display: inline-flex;
 margin-right: 8px;
 cursor: pointer;
 font-size: 16px;
 vertical-align: -0.2em;
 position: relative;
 width: 16px;
 height: 16px;
 color: var(--n-td-text-color);
 transition: color .3s var(--n-bezier);
 `, [_("expanded", [R("icon", "transform: rotate(90deg);", [Wt({
  originalTransform: "rotate(90deg)"
})]), R("base-icon", "transform: rotate(90deg);", [Wt({
  originalTransform: "rotate(90deg)"
})])]), R("base-loading", `
 color: var(--n-loading-color);
 transition: color .3s var(--n-bezier);
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 `, [Wt()]), R("icon", `
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 `, [Wt()]), R("base-icon", `
 position: absolute;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 `, [Wt()])]), R("data-table-thead", `
 transition: background-color .3s var(--n-bezier);
 background-color: var(--n-merged-th-color);
 `), R("data-table-tr", `
 position: relative;
 box-sizing: border-box;
 background-clip: padding-box;
 transition: background-color .3s var(--n-bezier);
 `, [R("data-table-expand", `
 position: sticky;
 left: 0;
 overflow: hidden;
 margin: calc(var(--n-th-padding) * -1);
 padding: var(--n-th-padding);
 box-sizing: border-box;
 `), _("striped", "background-color: var(--n-merged-td-color-striped);", [R("data-table-td", "background-color: var(--n-merged-td-color-striped);")]), Je("summary", [B("&:hover", "background-color: var(--n-merged-td-color-hover);", [B(">", [R("data-table-td", "background-color: var(--n-merged-td-color-hover);")])])])]), R("data-table-th", `
 padding: var(--n-th-padding);
 position: relative;
 text-align: start;
 box-sizing: border-box;
 background-color: var(--n-merged-th-color);
 border-color: var(--n-merged-border-color);
 border-bottom: 1px solid var(--n-merged-border-color);
 color: var(--n-th-text-color);
 transition:
 border-color .3s var(--n-bezier),
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier);
 font-weight: var(--n-th-font-weight);
 `, [_("filterable", `
 padding-right: 36px;
 `, [_("sortable", `
 padding-right: calc(var(--n-th-padding) + 36px);
 `)]), Ja, _("selection", `
 padding: 0;
 text-align: center;
 line-height: 0;
 z-index: 3;
 `), A("title-wrapper", `
 display: flex;
 align-items: center;
 flex-wrap: nowrap;
 max-width: 100%;
 `, [A("title", `
 flex: 1;
 min-width: 0;
 `)]), A("ellipsis", `
 display: inline-block;
 vertical-align: bottom;
 text-overflow: ellipsis;
 overflow: hidden;
 white-space: nowrap;
 max-width: 100%;
 `), _("hover", `
 background-color: var(--n-merged-th-color-hover);
 `), _("sorting", `
 background-color: var(--n-merged-th-color-sorting);
 `), _("sortable", `
 cursor: pointer;
 `, [A("ellipsis", `
 max-width: calc(100% - 18px);
 `), B("&:hover", `
 background-color: var(--n-merged-th-color-hover);
 `)]), R("data-table-sorter", `
 height: var(--n-sorter-size);
 width: var(--n-sorter-size);
 margin-left: 4px;
 position: relative;
 display: inline-flex;
 align-items: center;
 justify-content: center;
 vertical-align: -0.2em;
 color: var(--n-th-icon-color);
 transition: color .3s var(--n-bezier);
 `, [R("base-icon", "transition: transform .3s var(--n-bezier)"), _("desc", [R("base-icon", `
 transform: rotate(0deg);
 `)]), _("asc", [R("base-icon", `
 transform: rotate(-180deg);
 `)]), _("asc, desc", `
 color: var(--n-th-icon-color-active);
 `)]), R("data-table-resize-button", `
 width: var(--n-resizable-container-size);
 position: absolute;
 top: 0;
 right: calc(var(--n-resizable-container-size) / 2);
 bottom: 0;
 cursor: col-resize;
 user-select: none;
 `, [B("&::after", `
 width: var(--n-resizable-size);
 height: 50%;
 position: absolute;
 top: 50%;
 left: calc(var(--n-resizable-container-size) / 2);
 bottom: 0;
 background-color: var(--n-merged-border-color);
 transform: translateY(-50%);
 transition: background-color .3s var(--n-bezier);
 z-index: 1;
 content: '';
 `), _("active", [B("&::after", ` 
 background-color: var(--n-th-icon-color-active);
 `)]), B("&:hover::after", `
 background-color: var(--n-th-icon-color-active);
 `)]), R("data-table-filter", `
 position: absolute;
 z-index: auto;
 right: 0;
 width: 36px;
 top: 0;
 bottom: 0;
 cursor: pointer;
 display: flex;
 justify-content: center;
 align-items: center;
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 font-size: var(--n-filter-size);
 color: var(--n-th-icon-color);
 `, [B("&:hover", `
 background-color: var(--n-th-button-color-hover);
 `), _("show", `
 background-color: var(--n-th-button-color-hover);
 `), _("active", `
 background-color: var(--n-th-button-color-hover);
 color: var(--n-th-icon-color-active);
 `)])]), R("data-table-td", `
 padding: var(--n-td-padding);
 text-align: start;
 box-sizing: border-box;
 border: none;
 background-color: var(--n-merged-td-color);
 color: var(--n-td-text-color);
 border-bottom: 1px solid var(--n-merged-border-color);
 transition:
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 border-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 `, [_("expand", [R("data-table-expand-trigger", `
 margin-right: 0;
 `)]), _("last-row", `
 border-bottom: 0 solid var(--n-merged-border-color);
 `, [
  // make sure there is no overlap between bottom border and
  // fixed column box shadow
  B("&::after", `
 bottom: 0 !important;
 `),
  B("&::before", `
 bottom: 0 !important;
 `)
]), _("summary", `
 background-color: var(--n-merged-th-color);
 `), _("hover", `
 background-color: var(--n-merged-td-color-hover);
 `), _("sorting", `
 background-color: var(--n-merged-td-color-sorting);
 `), A("ellipsis", `
 display: inline-block;
 text-overflow: ellipsis;
 overflow: hidden;
 white-space: nowrap;
 max-width: 100%;
 vertical-align: bottom;
 max-width: calc(100% - var(--indent-offset, -1.5) * 16px - 24px);
 `), _("selection, expand", `
 text-align: center;
 padding: 0;
 line-height: 0;
 `), Ja]), R("data-table-empty", `
 box-sizing: border-box;
 padding: var(--n-empty-padding);
 flex-grow: 1;
 flex-shrink: 0;
 opacity: 1;
 display: flex;
 align-items: center;
 justify-content: center;
 transition: opacity .3s var(--n-bezier);
 `, [_("hide", `
 opacity: 0;
 `)]), A("pagination", `
 margin: var(--n-pagination-margin);
 display: flex;
 justify-content: flex-end;
 `), R("data-table-wrapper", `
 position: relative;
 opacity: 1;
 transition: opacity .3s var(--n-bezier), border-color .3s var(--n-bezier);
 border-top-left-radius: var(--n-border-radius);
 border-top-right-radius: var(--n-border-radius);
 line-height: var(--n-line-height);
 `), _("loading", [R("data-table-wrapper", `
 opacity: var(--n-opacity-loading);
 pointer-events: none;
 `)]), _("single-column", [R("data-table-td", `
 border-bottom: 0 solid var(--n-merged-border-color);
 `, [B("&::after, &::before", `
 bottom: 0 !important;
 `)])]), Je("single-line", [R("data-table-th", `
 border-right: 1px solid var(--n-merged-border-color);
 `, [_("last", `
 border-right: 0 solid var(--n-merged-border-color);
 `)]), R("data-table-td", `
 border-right: 1px solid var(--n-merged-border-color);
 `, [_("last-col", `
 border-right: 0 solid var(--n-merged-border-color);
 `)])]), _("bordered", [R("data-table-wrapper", `
 border: 1px solid var(--n-merged-border-color);
 border-bottom-left-radius: var(--n-border-radius);
 border-bottom-right-radius: var(--n-border-radius);
 overflow: hidden;
 `)]), R("data-table-base-table", [_("transition-disabled", [R("data-table-th", [B("&::after, &::before", "transition: none;")]), R("data-table-td", [B("&::after, &::before", "transition: none;")])])]), _("bottom-bordered", [R("data-table-td", [_("last-row", `
 border-bottom: 1px solid var(--n-merged-border-color);
 `)])]), R("data-table-table", `
 font-variant-numeric: tabular-nums;
 width: 100%;
 word-break: break-word;
 transition: background-color .3s var(--n-bezier);
 border-collapse: separate;
 border-spacing: 0;
 background-color: var(--n-merged-td-color);
 `), R("data-table-base-table-header", `
 border-top-left-radius: calc(var(--n-border-radius) - 1px);
 border-top-right-radius: calc(var(--n-border-radius) - 1px);
 z-index: 3;
 overflow: scroll;
 flex-shrink: 0;
 transition: border-color .3s var(--n-bezier);
 scrollbar-width: none;
 `, [B("&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb", `
 display: none;
 width: 0;
 height: 0;
 `)]), R("data-table-check-extra", `
 transition: color .3s var(--n-bezier);
 color: var(--n-th-icon-color);
 position: absolute;
 font-size: 14px;
 right: -4px;
 top: 50%;
 transform: translateY(-50%);
 z-index: 1;
 `)]), R("data-table-filter-menu", [R("scrollbar", `
 max-height: 240px;
 `), A("group", `
 display: flex;
 flex-direction: column;
 padding: 12px 12px 0 12px;
 `, [R("checkbox", `
 margin-bottom: 12px;
 margin-right: 0;
 `), R("radio", `
 margin-bottom: 12px;
 margin-right: 0;
 `)]), A("action", `
 padding: var(--n-action-padding);
 display: flex;
 flex-wrap: nowrap;
 justify-content: space-evenly;
 border-top: 1px solid var(--n-action-divider-color);
 `, [R("button", [B("&:not(:last-child)", `
 margin: var(--n-action-button-margin);
 `), B("&:last-child", `
 margin-right: 0;
 `)])]), R("divider", `
 margin: 0 !important;
 `)]), no(R("data-table", `
 --n-merged-th-color: var(--n-th-color-modal);
 --n-merged-td-color: var(--n-td-color-modal);
 --n-merged-border-color: var(--n-border-color-modal);
 --n-merged-th-color-hover: var(--n-th-color-hover-modal);
 --n-merged-td-color-hover: var(--n-td-color-hover-modal);
 --n-merged-th-color-sorting: var(--n-th-color-hover-modal);
 --n-merged-td-color-sorting: var(--n-td-color-hover-modal);
 --n-merged-td-color-striped: var(--n-td-color-striped-modal);
 `)), hi(R("data-table", `
 --n-merged-th-color: var(--n-th-color-popover);
 --n-merged-td-color: var(--n-td-color-popover);
 --n-merged-border-color: var(--n-border-color-popover);
 --n-merged-th-color-hover: var(--n-th-color-hover-popover);
 --n-merged-td-color-hover: var(--n-td-color-hover-popover);
 --n-merged-th-color-sorting: var(--n-th-color-hover-popover);
 --n-merged-td-color-sorting: var(--n-td-color-hover-popover);
 --n-merged-td-color-striped: var(--n-td-color-striped-popover);
 `))]);
function hg() {
  return [_("fixed-left", `
 left: 0;
 position: sticky;
 z-index: 2;
 `, [B("&::after", `
 pointer-events: none;
 content: "";
 width: 36px;
 display: inline-block;
 position: absolute;
 top: 0;
 bottom: -1px;
 transition: box-shadow .2s var(--n-bezier);
 right: -36px;
 `)]), _("fixed-right", `
 right: 0;
 position: sticky;
 z-index: 1;
 `, [B("&::before", `
 pointer-events: none;
 content: "";
 width: 36px;
 display: inline-block;
 position: absolute;
 top: 0;
 bottom: -1px;
 transition: box-shadow .2s var(--n-bezier);
 left: -36px;
 `)])];
}
function pg(e, t) {
  const {
    paginatedDataRef: n,
    treeMateRef: r,
    selectionColumnRef: o
  } = t, i = L(e.defaultCheckedRowKeys), l = T(() => {
    var C;
    const {
      checkedRowKeys: k
    } = e, x = k === void 0 ? i.value : k;
    return ((C = o.value) === null || C === void 0 ? void 0 : C.multiple) === !1 ? {
      checkedKeys: x.slice(0, 1),
      indeterminateKeys: []
    } : r.value.getCheckedKeys(x, {
      cascade: e.cascade,
      allowNotLoaded: e.allowCheckingNotLoaded
    });
  }), a = T(() => l.value.checkedKeys), s = T(() => l.value.indeterminateKeys), d = T(() => new Set(a.value)), u = T(() => new Set(s.value)), h = T(() => {
    const {
      value: C
    } = d;
    return n.value.reduce((k, x) => {
      const {
        key: z,
        disabled: $
      } = x;
      return k + (!$ && C.has(z) ? 1 : 0);
    }, 0);
  }), b = T(() => n.value.filter((C) => C.disabled).length), m = T(() => {
    const {
      length: C
    } = n.value, {
      value: k
    } = u;
    return h.value > 0 && h.value < C - b.value || n.value.some((x) => k.has(x.key));
  }), f = T(() => {
    const {
      length: C
    } = n.value;
    return h.value !== 0 && h.value === C - b.value;
  }), p = T(() => n.value.length === 0);
  function v(C, k, x) {
    const {
      "onUpdate:checkedRowKeys": z,
      onUpdateCheckedRowKeys: $,
      onCheckedRowKeysChange: M
    } = e, V = [], {
      value: {
        getNode: O
      }
    } = r;
    C.forEach((E) => {
      var I;
      const F = (I = O(E)) === null || I === void 0 ? void 0 : I.rawNode;
      V.push(F);
    }), z && oe(z, C, V, {
      row: k,
      action: x
    }), $ && oe($, C, V, {
      row: k,
      action: x
    }), M && oe(M, C, V, {
      row: k,
      action: x
    }), i.value = C;
  }
  function g(C, k = !1, x) {
    if (!e.loading) {
      if (k) {
        v(Array.isArray(C) ? C.slice(0, 1) : [C], x, "check");
        return;
      }
      v(r.value.check(C, a.value, {
        cascade: e.cascade,
        allowNotLoaded: e.allowCheckingNotLoaded
      }).checkedKeys, x, "check");
    }
  }
  function y(C, k) {
    e.loading || v(r.value.uncheck(C, a.value, {
      cascade: e.cascade,
      allowNotLoaded: e.allowCheckingNotLoaded
    }).checkedKeys, k, "uncheck");
  }
  function S(C = !1) {
    const {
      value: k
    } = o;
    if (!k || e.loading) return;
    const x = [];
    (C ? r.value.treeNodes : n.value).forEach((z) => {
      z.disabled || x.push(z.key);
    }), v(r.value.check(x, a.value, {
      cascade: !0,
      allowNotLoaded: e.allowCheckingNotLoaded
    }).checkedKeys, void 0, "checkAll");
  }
  function w(C = !1) {
    const {
      value: k
    } = o;
    if (!k || e.loading) return;
    const x = [];
    (C ? r.value.treeNodes : n.value).forEach((z) => {
      z.disabled || x.push(z.key);
    }), v(r.value.uncheck(x, a.value, {
      cascade: !0,
      allowNotLoaded: e.allowCheckingNotLoaded
    }).checkedKeys, void 0, "uncheckAll");
  }
  return {
    mergedCheckedRowKeySetRef: d,
    mergedCheckedRowKeysRef: a,
    mergedInderminateRowKeySetRef: u,
    someRowsCheckedRef: m,
    allRowsCheckedRef: f,
    headerCheckboxDisabledRef: p,
    doUpdateCheckedRowKeys: v,
    doCheckAll: S,
    doUncheckAll: w,
    doCheck: g,
    doUncheck: y
  };
}
function bg(e, t) {
  const n = Ue(() => {
    for (const d of e.columns)
      if (d.type === "expand")
        return d.renderExpand;
  }), r = Ue(() => {
    let d;
    for (const u of e.columns)
      if (u.type === "expand") {
        d = u.expandable;
        break;
      }
    return d;
  }), o = L(e.defaultExpandAll ? n != null && n.value ? (() => {
    const d = [];
    return t.value.treeNodes.forEach((u) => {
      var h;
      !((h = r.value) === null || h === void 0) && h.call(r, u.rawNode) && d.push(u.key);
    }), d;
  })() : t.value.getNonLeafKeys() : e.defaultExpandedRowKeys), i = ae(e, "expandedRowKeys"), l = ae(e, "stickyExpandedRows"), a = zt(i, o);
  function s(d) {
    const {
      onUpdateExpandedRowKeys: u,
      "onUpdate:expandedRowKeys": h
    } = e;
    u && oe(u, d), h && oe(h, d), o.value = d;
  }
  return {
    stickyExpandedRowsRef: l,
    mergedExpandedRowKeysRef: a,
    renderExpandRef: n,
    expandableRef: r,
    doUpdateExpandedRowKeys: s
  };
}
function gg(e, t) {
  const n = [], r = [], o = [], i = /* @__PURE__ */ new WeakMap();
  let l = -1, a = 0, s = !1, d = 0;
  function u(b, m) {
    m > l && (n[m] = [], l = m), b.forEach((f) => {
      if ("children" in f)
        u(f.children, m + 1);
      else {
        const p = "key" in f ? f.key : void 0;
        r.push({
          key: Dt(f),
          style: mb(f, p !== void 0 ? ot(t(p)) : void 0),
          column: f,
          index: d++,
          // The width property is only applied to horizontally virtual scroll table
          width: f.width === void 0 ? 128 : Number(f.width)
        }), a += 1, s || (s = !!f.ellipsis), o.push(f);
      }
    });
  }
  u(e, 0), d = 0;
  function h(b, m) {
    let f = 0;
    b.forEach((p) => {
      var v;
      if ("children" in p) {
        const g = d, y = {
          column: p,
          colIndex: d,
          colSpan: 0,
          rowSpan: 1,
          isLast: !1
        };
        h(p.children, m + 1), p.children.forEach((S) => {
          var w, C;
          y.colSpan += (C = (w = i.get(S)) === null || w === void 0 ? void 0 : w.colSpan) !== null && C !== void 0 ? C : 0;
        }), g + y.colSpan === a && (y.isLast = !0), i.set(p, y), n[m].push(y);
      } else {
        if (d < f) {
          d += 1;
          return;
        }
        let g = 1;
        "titleColSpan" in p && (g = (v = p.titleColSpan) !== null && v !== void 0 ? v : 1), g > 1 && (f = d + g);
        const y = d + g === a, S = {
          column: p,
          colSpan: g,
          colIndex: d,
          rowSpan: l - m + 1,
          isLast: y
        };
        i.set(p, S), n[m].push(S), d += 1;
      }
    });
  }
  return h(e, 0), {
    hasEllipsis: s,
    rows: n,
    cols: r,
    dataRelatedCols: o
  };
}
function mg(e, t) {
  const n = T(() => gg(e.columns, t));
  return {
    rowsRef: T(() => n.value.rows),
    colsRef: T(() => n.value.cols),
    hasEllipsisRef: T(() => n.value.hasEllipsis),
    dataRelatedColsRef: T(() => n.value.dataRelatedCols)
  };
}
function vg() {
  const e = L({});
  function t(o) {
    return e.value[o];
  }
  function n(o, i) {
    Es(o) && "key" in o && (e.value[o.key] = i);
  }
  function r() {
    e.value = {};
  }
  return {
    getResizableWidth: t,
    doUpdateResizableWidth: n,
    clearResizableWidth: r
  };
}
function xg(e, {
  mainTableInstRef: t,
  mergedCurrentPageRef: n,
  bodyWidthRef: r
}) {
  let o = 0;
  const i = L(), l = L(null), a = L([]), s = L(null), d = L([]), u = T(() => ot(e.scrollX)), h = T(() => e.columns.filter(($) => $.fixed === "left")), b = T(() => e.columns.filter(($) => $.fixed === "right")), m = T(() => {
    const $ = {};
    let M = 0;
    function V(O) {
      O.forEach((E) => {
        const I = {
          start: M,
          end: 0
        };
        $[Dt(E)] = I, "children" in E ? (V(E.children), I.end = M) : (M += Ua(E) || 0, I.end = M);
      });
    }
    return V(h.value), $;
  }), f = T(() => {
    const $ = {};
    let M = 0;
    function V(O) {
      for (let E = O.length - 1; E >= 0; --E) {
        const I = O[E], F = {
          start: M,
          end: 0
        };
        $[Dt(I)] = F, "children" in I ? (V(I.children), F.end = M) : (M += Ua(I) || 0, F.end = M);
      }
    }
    return V(b.value), $;
  });
  function p() {
    var $, M;
    const {
      value: V
    } = h;
    let O = 0;
    const {
      value: E
    } = m;
    let I = null;
    for (let F = 0; F < V.length; ++F) {
      const N = Dt(V[F]);
      if (o > ((($ = E[N]) === null || $ === void 0 ? void 0 : $.start) || 0) - O)
        I = N, O = ((M = E[N]) === null || M === void 0 ? void 0 : M.end) || 0;
      else
        break;
    }
    l.value = I;
  }
  function v() {
    a.value = [];
    let $ = e.columns.find((M) => Dt(M) === l.value);
    for (; $ && "children" in $; ) {
      const M = $.children.length;
      if (M === 0) break;
      const V = $.children[M - 1];
      a.value.push(Dt(V)), $ = V;
    }
  }
  function g() {
    var $, M;
    const {
      value: V
    } = b, O = Number(e.scrollX), {
      value: E
    } = r;
    if (E === null) return;
    let I = 0, F = null;
    const {
      value: N
    } = f;
    for (let W = V.length - 1; W >= 0; --W) {
      const X = Dt(V[W]);
      if (Math.round(o + ((($ = N[X]) === null || $ === void 0 ? void 0 : $.start) || 0) + E - I) < O)
        F = X, I = ((M = N[X]) === null || M === void 0 ? void 0 : M.end) || 0;
      else
        break;
    }
    s.value = F;
  }
  function y() {
    d.value = [];
    let $ = e.columns.find((M) => Dt(M) === s.value);
    for (; $ && "children" in $ && $.children.length; ) {
      const M = $.children[0];
      d.value.push(Dt(M)), $ = M;
    }
  }
  function S() {
    const $ = t.value ? t.value.getHeaderElement() : null, M = t.value ? t.value.getBodyElement() : null;
    return {
      header: $,
      body: M
    };
  }
  function w() {
    const {
      body: $
    } = S();
    $ && ($.scrollTop = 0);
  }
  function C() {
    i.value !== "body" ? Gr(x) : i.value = void 0;
  }
  function k($) {
    var M;
    (M = e.onScroll) === null || M === void 0 || M.call(e, $), i.value !== "head" ? Gr(x) : i.value = void 0;
  }
  function x() {
    const {
      header: $,
      body: M
    } = S();
    if (!M) return;
    const {
      value: V
    } = r;
    if (V !== null) {
      if (e.maxHeight || e.flexHeight) {
        if (!$) return;
        const O = o - $.scrollLeft;
        i.value = O !== 0 ? "head" : "body", i.value === "head" ? (o = $.scrollLeft, M.scrollLeft = o) : (o = M.scrollLeft, $.scrollLeft = o);
      } else
        o = M.scrollLeft;
      p(), v(), g(), y();
    }
  }
  function z($) {
    const {
      header: M
    } = S();
    M && (M.scrollLeft = $, x());
  }
  return je(n, () => {
    w();
  }), {
    styleScrollXRef: u,
    fixedColumnLeftMapRef: m,
    fixedColumnRightMapRef: f,
    leftFixedColumnsRef: h,
    rightFixedColumnsRef: b,
    leftActiveFixedColKeyRef: l,
    leftActiveFixedChildrenColKeysRef: a,
    rightActiveFixedColKeyRef: s,
    rightActiveFixedChildrenColKeysRef: d,
    syncScrollState: x,
    handleTableBodyScroll: k,
    handleTableHeaderScroll: C,
    setHeaderScrollLeft: z
  };
}
function Dr(e) {
  return typeof e == "object" && typeof e.multiple == "number" ? e.multiple : !1;
}
function yg(e, t) {
  return t && (e === void 0 || e === "default" || typeof e == "object" && e.compare === "default") ? wg(t) : typeof e == "function" ? e : e && typeof e == "object" && e.compare && e.compare !== "default" ? e.compare : !1;
}
function wg(e) {
  return (t, n) => {
    const r = t[e], o = n[e];
    return r == null ? o == null ? 0 : -1 : o == null ? 1 : typeof r == "number" && typeof o == "number" ? r - o : typeof r == "string" && typeof o == "string" ? r.localeCompare(o) : 0;
  };
}
function Cg(e, {
  dataRelatedColsRef: t,
  filteredDataRef: n
}) {
  const r = [];
  t.value.forEach((m) => {
    var f;
    m.sorter !== void 0 && b(r, {
      columnKey: m.key,
      sorter: m.sorter,
      order: (f = m.defaultSortOrder) !== null && f !== void 0 ? f : !1
    });
  });
  const o = L(r), i = T(() => {
    const m = t.value.filter((v) => v.type !== "selection" && v.sorter !== void 0 && (v.sortOrder === "ascend" || v.sortOrder === "descend" || v.sortOrder === !1)), f = m.filter((v) => v.sortOrder !== !1);
    if (f.length)
      return f.map((v) => ({
        columnKey: v.key,
        // column to sort has controlled sorter
        // sorter && sort order won't be undefined
        order: v.sortOrder,
        sorter: v.sorter
      }));
    if (m.length) return [];
    const {
      value: p
    } = o;
    return Array.isArray(p) ? p : p ? [p] : [];
  }), l = T(() => {
    const m = i.value.slice().sort((f, p) => {
      const v = Dr(f.sorter) || 0;
      return (Dr(p.sorter) || 0) - v;
    });
    return m.length ? n.value.slice().sort((p, v) => {
      let g = 0;
      return m.some((y) => {
        const {
          columnKey: S,
          sorter: w,
          order: C
        } = y, k = yg(w, S);
        return k && C && (g = k(p.rawNode, v.rawNode), g !== 0) ? (g = g * bb(C), !0) : !1;
      }), g;
    }) : n.value;
  });
  function a(m) {
    let f = i.value.slice();
    return m && Dr(m.sorter) !== !1 ? (f = f.filter((p) => Dr(p.sorter) !== !1), b(f, m), f) : m || null;
  }
  function s(m) {
    const f = a(m);
    d(f);
  }
  function d(m) {
    const {
      "onUpdate:sorter": f,
      onUpdateSorter: p,
      onSorterChange: v
    } = e;
    f && oe(f, m), p && oe(p, m), v && oe(v, m), o.value = m;
  }
  function u(m, f = "ascend") {
    if (!m)
      h();
    else {
      const p = t.value.find((g) => g.type !== "selection" && g.type !== "expand" && g.key === m);
      if (!(p != null && p.sorter)) return;
      const v = p.sorter;
      s({
        columnKey: m,
        sorter: v,
        order: f
      });
    }
  }
  function h() {
    d(null);
  }
  function b(m, f) {
    const p = m.findIndex((v) => (f == null ? void 0 : f.columnKey) && v.columnKey === f.columnKey);
    p !== void 0 && p >= 0 ? m[p] = f : m.push(f);
  }
  return {
    clearSorter: h,
    sort: u,
    sortedDataRef: l,
    mergedSortStateRef: i,
    deriveNextSorter: s
  };
}
function Sg(e, {
  dataRelatedColsRef: t
}) {
  const n = T(() => {
    const G = (j) => {
      for (let q = 0; q < j.length; ++q) {
        const Z = j[q];
        if ("children" in Z)
          return G(Z.children);
        if (Z.type === "selection")
          return Z;
      }
      return null;
    };
    return G(e.columns);
  }), r = T(() => {
    const {
      childrenKey: G
    } = e;
    return lo(e.data, {
      ignoreEmptyChildren: !0,
      getKey: e.rowKey,
      getChildren: (j) => j[G],
      getDisabled: (j) => {
        var q, Z;
        return !!(!((Z = (q = n.value) === null || q === void 0 ? void 0 : q.disabled) === null || Z === void 0) && Z.call(q, j));
      }
    });
  }), o = Ue(() => {
    const {
      columns: G
    } = e, {
      length: j
    } = G;
    let q = null;
    for (let Z = 0; Z < j; ++Z) {
      const le = G[Z];
      if (!le.type && q === null && (q = Z), "tree" in le && le.tree)
        return Z;
    }
    return q || 0;
  }), i = L({}), {
    pagination: l
  } = e, a = L(l && l.defaultPage || 1), s = L($s(l)), d = T(() => {
    const G = t.value.filter((Z) => Z.filterOptionValues !== void 0 || Z.filterOptionValue !== void 0), j = {};
    return G.forEach((Z) => {
      var le;
      Z.type === "selection" || Z.type === "expand" || (Z.filterOptionValues === void 0 ? j[Z.key] = (le = Z.filterOptionValue) !== null && le !== void 0 ? le : null : j[Z.key] = Z.filterOptionValues);
    }), Object.assign(qa(i.value), j);
  }), u = T(() => {
    const G = d.value, {
      columns: j
    } = e;
    function q(ue) {
      return (be, Re) => !!~String(Re[ue]).indexOf(String(be));
    }
    const {
      value: {
        treeNodes: Z
      }
    } = r, le = [];
    return j.forEach((ue) => {
      ue.type === "selection" || ue.type === "expand" || "children" in ue || le.push([ue.key, ue]);
    }), Z ? Z.filter((ue) => {
      const {
        rawNode: be
      } = ue;
      for (const [Re, K] of le) {
        let fe = G[Re];
        if (fe == null || (Array.isArray(fe) || (fe = [fe]), !fe.length)) continue;
        const Me = K.filter === "default" ? q(Re) : K.filter;
        if (K && typeof Me == "function")
          if (K.filterMode === "and") {
            if (fe.some((ye) => !Me(ye, be)))
              return !1;
          } else {
            if (fe.some((ye) => Me(ye, be)))
              continue;
            return !1;
          }
      }
      return !0;
    }) : [];
  }), {
    sortedDataRef: h,
    deriveNextSorter: b,
    mergedSortStateRef: m,
    sort: f,
    clearSorter: p
  } = Cg(e, {
    dataRelatedColsRef: t,
    filteredDataRef: u
  });
  t.value.forEach((G) => {
    var j;
    if (G.filter) {
      const q = G.defaultFilterOptionValues;
      G.filterMultiple ? i.value[G.key] = q || [] : q !== void 0 ? i.value[G.key] = q === null ? [] : q : i.value[G.key] = (j = G.defaultFilterOptionValue) !== null && j !== void 0 ? j : null;
    }
  });
  const v = T(() => {
    const {
      pagination: G
    } = e;
    if (G !== !1)
      return G.page;
  }), g = T(() => {
    const {
      pagination: G
    } = e;
    if (G !== !1)
      return G.pageSize;
  }), y = zt(v, a), S = zt(g, s), w = Ue(() => {
    const G = y.value;
    return e.remote ? G : Math.max(1, Math.min(Math.ceil(u.value.length / S.value), G));
  }), C = T(() => {
    const {
      pagination: G
    } = e;
    if (G) {
      const {
        pageCount: j
      } = G;
      if (j !== void 0) return j;
    }
  }), k = T(() => {
    if (e.remote) return r.value.treeNodes;
    if (!e.pagination) return h.value;
    const G = S.value, j = (w.value - 1) * G;
    return h.value.slice(j, j + G);
  }), x = T(() => k.value.map((G) => G.rawNode));
  function z(G) {
    const {
      pagination: j
    } = e;
    if (j) {
      const {
        onChange: q,
        "onUpdate:page": Z,
        onUpdatePage: le
      } = j;
      q && oe(q, G), le && oe(le, G), Z && oe(Z, G), O(G);
    }
  }
  function $(G) {
    const {
      pagination: j
    } = e;
    if (j) {
      const {
        onPageSizeChange: q,
        "onUpdate:pageSize": Z,
        onUpdatePageSize: le
      } = j;
      q && oe(q, G), le && oe(le, G), Z && oe(Z, G), E(G);
    }
  }
  const M = T(() => {
    if (e.remote) {
      const {
        pagination: G
      } = e;
      if (G) {
        const {
          itemCount: j
        } = G;
        if (j !== void 0) return j;
      }
      return;
    }
    return u.value.length;
  }), V = T(() => Object.assign(Object.assign({}, e.pagination), {
    // reset deprecated methods
    onChange: void 0,
    onUpdatePage: void 0,
    onUpdatePageSize: void 0,
    onPageSizeChange: void 0,
    "onUpdate:page": z,
    "onUpdate:pageSize": $,
    // writing merged props after pagination to avoid
    // pagination[key] === undefined
    // key still exists but value is undefined
    page: w.value,
    pageSize: S.value,
    pageCount: M.value === void 0 ? C.value : void 0,
    itemCount: M.value
  }));
  function O(G) {
    const {
      "onUpdate:page": j,
      onPageChange: q,
      onUpdatePage: Z
    } = e;
    Z && oe(Z, G), j && oe(j, G), q && oe(q, G), a.value = G;
  }
  function E(G) {
    const {
      "onUpdate:pageSize": j,
      onPageSizeChange: q,
      onUpdatePageSize: Z
    } = e;
    q && oe(q, G), Z && oe(Z, G), j && oe(j, G), s.value = G;
  }
  function I(G, j) {
    const {
      onUpdateFilters: q,
      "onUpdate:filters": Z,
      onFiltersChange: le
    } = e;
    q && oe(q, G, j), Z && oe(Z, G, j), le && oe(le, G, j), i.value = G;
  }
  function F(G, j, q, Z) {
    var le;
    (le = e.onUnstableColumnResize) === null || le === void 0 || le.call(e, G, j, q, Z);
  }
  function N(G) {
    O(G);
  }
  function W() {
    X();
  }
  function X() {
    re({});
  }
  function re(G) {
    Q(G);
  }
  function Q(G) {
    G ? G && (i.value = qa(G)) : i.value = {};
  }
  return {
    treeMateRef: r,
    mergedCurrentPageRef: w,
    mergedPaginationRef: V,
    paginatedDataRef: k,
    rawPaginatedDataRef: x,
    mergedFilterStateRef: d,
    mergedSortStateRef: m,
    hoverKeyRef: L(null),
    selectionColumnRef: n,
    childTriggerColIndexRef: o,
    doUpdateFilters: I,
    deriveNextSorter: b,
    doUpdatePageSize: E,
    doUpdatePage: O,
    onUnstableColumnResize: F,
    // exported methods
    filter: Q,
    filters: re,
    clearFilter: W,
    clearFilters: X,
    clearSorter: p,
    page: N,
    sort: f
  };
}
const cv = ie({
  name: "DataTable",
  alias: ["AdvancedTable"],
  props: hb,
  slots: Object,
  setup(e, {
    slots: t
  }) {
    const {
      mergedBorderedRef: n,
      mergedClsPrefixRef: r,
      inlineThemeDisabled: o,
      mergedRtlRef: i
    } = _e(e), l = $t("DataTable", i, r), a = T(() => {
      const {
        bottomBordered: P
      } = e;
      return n.value ? !1 : P !== void 0 ? P : !0;
    }), s = we("DataTable", "-data-table", fg, fb, e, r), d = L(null), u = L(null), {
      getResizableWidth: h,
      clearResizableWidth: b,
      doUpdateResizableWidth: m
    } = vg(), {
      rowsRef: f,
      colsRef: p,
      dataRelatedColsRef: v,
      hasEllipsisRef: g
    } = mg(e, h), {
      treeMateRef: y,
      mergedCurrentPageRef: S,
      paginatedDataRef: w,
      rawPaginatedDataRef: C,
      selectionColumnRef: k,
      hoverKeyRef: x,
      mergedPaginationRef: z,
      mergedFilterStateRef: $,
      mergedSortStateRef: M,
      childTriggerColIndexRef: V,
      doUpdatePage: O,
      doUpdateFilters: E,
      onUnstableColumnResize: I,
      deriveNextSorter: F,
      filter: N,
      filters: W,
      clearFilter: X,
      clearFilters: re,
      clearSorter: Q,
      page: G,
      sort: j
    } = Sg(e, {
      dataRelatedColsRef: v
    }), q = (P) => {
      const {
        fileName: D = "data.csv",
        keepOriginalData: ee = !1
      } = P || {}, se = ee ? e.data : C.value, he = wb(e.columns, se, e.getCsvCell, e.getCsvHeader), ge = new Blob([he], {
        type: "text/csv;charset=utf-8"
      }), ve = URL.createObjectURL(ge);
      vu(ve, D.endsWith(".csv") ? D : `${D}.csv`), URL.revokeObjectURL(ve);
    }, {
      doCheckAll: Z,
      doUncheckAll: le,
      doCheck: ue,
      doUncheck: be,
      headerCheckboxDisabledRef: Re,
      someRowsCheckedRef: K,
      allRowsCheckedRef: fe,
      mergedCheckedRowKeySetRef: Me,
      mergedInderminateRowKeySetRef: ye
    } = pg(e, {
      selectionColumnRef: k,
      treeMateRef: y,
      paginatedDataRef: w
    }), {
      stickyExpandedRowsRef: Fe,
      mergedExpandedRowKeysRef: Te,
      renderExpandRef: Qe,
      expandableRef: qe,
      doUpdateExpandedRowKeys: tt
    } = bg(e, y), {
      handleTableBodyScroll: et,
      handleTableHeaderScroll: me,
      syncScrollState: U,
      setHeaderScrollLeft: Y,
      leftActiveFixedColKeyRef: de,
      leftActiveFixedChildrenColKeysRef: xe,
      rightActiveFixedColKeyRef: te,
      rightActiveFixedChildrenColKeysRef: ce,
      leftFixedColumnsRef: ze,
      rightFixedColumnsRef: Ne,
      fixedColumnLeftMapRef: st,
      fixedColumnRightMapRef: ft
    } = xg(e, {
      bodyWidthRef: d,
      mainTableInstRef: u,
      mergedCurrentPageRef: S
    }), {
      localeRef: at
    } = Pn("DataTable"), Xe = T(() => e.virtualScroll || e.flexHeight || e.maxHeight !== void 0 || g.value ? "fixed" : e.tableLayout);
    We(qt, {
      props: e,
      treeMateRef: y,
      renderExpandIconRef: ae(e, "renderExpandIcon"),
      loadingKeySetRef: L(/* @__PURE__ */ new Set()),
      slots: t,
      indentRef: ae(e, "indent"),
      childTriggerColIndexRef: V,
      bodyWidthRef: d,
      componentId: jn(),
      hoverKeyRef: x,
      mergedClsPrefixRef: r,
      mergedThemeRef: s,
      scrollXRef: T(() => e.scrollX),
      rowsRef: f,
      colsRef: p,
      paginatedDataRef: w,
      leftActiveFixedColKeyRef: de,
      leftActiveFixedChildrenColKeysRef: xe,
      rightActiveFixedColKeyRef: te,
      rightActiveFixedChildrenColKeysRef: ce,
      leftFixedColumnsRef: ze,
      rightFixedColumnsRef: Ne,
      fixedColumnLeftMapRef: st,
      fixedColumnRightMapRef: ft,
      mergedCurrentPageRef: S,
      someRowsCheckedRef: K,
      allRowsCheckedRef: fe,
      mergedSortStateRef: M,
      mergedFilterStateRef: $,
      loadingRef: ae(e, "loading"),
      rowClassNameRef: ae(e, "rowClassName"),
      mergedCheckedRowKeySetRef: Me,
      mergedExpandedRowKeysRef: Te,
      mergedInderminateRowKeySetRef: ye,
      localeRef: at,
      expandableRef: qe,
      stickyExpandedRowsRef: Fe,
      rowKeyRef: ae(e, "rowKey"),
      renderExpandRef: Qe,
      summaryRef: ae(e, "summary"),
      virtualScrollRef: ae(e, "virtualScroll"),
      virtualScrollXRef: ae(e, "virtualScrollX"),
      heightForRowRef: ae(e, "heightForRow"),
      minRowHeightRef: ae(e, "minRowHeight"),
      virtualScrollHeaderRef: ae(e, "virtualScrollHeader"),
      headerHeightRef: ae(e, "headerHeight"),
      rowPropsRef: ae(e, "rowProps"),
      stripedRef: ae(e, "striped"),
      checkOptionsRef: T(() => {
        const {
          value: P
        } = k;
        return P == null ? void 0 : P.options;
      }),
      rawPaginatedDataRef: C,
      filterMenuCssVarsRef: T(() => {
        const {
          self: {
            actionDividerColor: P,
            actionPadding: D,
            actionButtonMargin: ee
          }
        } = s.value;
        return {
          "--n-action-padding": D,
          "--n-action-button-margin": ee,
          "--n-action-divider-color": P
        };
      }),
      onLoadRef: ae(e, "onLoad"),
      mergedTableLayoutRef: Xe,
      maxHeightRef: ae(e, "maxHeight"),
      minHeightRef: ae(e, "minHeight"),
      flexHeightRef: ae(e, "flexHeight"),
      headerCheckboxDisabledRef: Re,
      paginationBehaviorOnFilterRef: ae(e, "paginationBehaviorOnFilter"),
      summaryPlacementRef: ae(e, "summaryPlacement"),
      filterIconPopoverPropsRef: ae(e, "filterIconPopoverProps"),
      scrollbarPropsRef: ae(e, "scrollbarProps"),
      syncScrollState: U,
      doUpdatePage: O,
      doUpdateFilters: E,
      getResizableWidth: h,
      onUnstableColumnResize: I,
      clearResizableWidth: b,
      doUpdateResizableWidth: m,
      deriveNextSorter: F,
      doCheck: ue,
      doUncheck: be,
      doCheckAll: Z,
      doUncheckAll: le,
      doUpdateExpandedRowKeys: tt,
      handleTableHeaderScroll: me,
      handleTableBodyScroll: et,
      setHeaderScrollLeft: Y,
      renderCell: ae(e, "renderCell")
    });
    const dt = {
      filter: N,
      filters: W,
      clearFilters: re,
      clearSorter: Q,
      page: G,
      sort: j,
      clearFilter: X,
      downloadCsv: q,
      scrollTo: (P, D) => {
        var ee;
        (ee = u.value) === null || ee === void 0 || ee.scrollTo(P, D);
      }
    }, Ge = T(() => {
      const {
        size: P
      } = e, {
        common: {
          cubicBezierEaseInOut: D
        },
        self: {
          borderColor: ee,
          tdColorHover: se,
          tdColorSorting: he,
          tdColorSortingModal: ge,
          tdColorSortingPopover: ve,
          thColorSorting: Se,
          thColorSortingModal: Ee,
          thColorSortingPopover: Ye,
          thColor: Le,
          thColorHover: bt,
          tdColor: xt,
          tdTextColor: yt,
          thTextColor: Ct,
          thFontWeight: St,
          thButtonColorHover: Mt,
          thIconColor: Ft,
          thIconColorActive: H,
          filterSize: ne,
          borderRadius: Ce,
          lineHeight: Be,
          tdColorModal: Ve,
          thColorModal: Ae,
          borderColorModal: nt,
          thColorHoverModal: lt,
          tdColorHoverModal: It,
          borderColorPopover: en,
          thColorPopover: tn,
          tdColorPopover: bn,
          tdColorHoverPopover: Qn,
          thColorHoverPopover: er,
          paginationMargin: tr,
          emptyPadding: nr,
          boxShadowAfter: rr,
          boxShadowBefore: sn,
          sorterSize: dn,
          resizableContainerSize: uo,
          resizableSize: fo,
          loadingColor: ho,
          loadingSize: po,
          opacityLoading: bo,
          tdColorStriped: go,
          tdColorStripedModal: mo,
          tdColorStripedPopover: vo,
          [J("fontSize", P)]: xo,
          [J("thPadding", P)]: yo,
          [J("tdPadding", P)]: wo
        }
      } = s.value;
      return {
        "--n-font-size": xo,
        "--n-th-padding": yo,
        "--n-td-padding": wo,
        "--n-bezier": D,
        "--n-border-radius": Ce,
        "--n-line-height": Be,
        "--n-border-color": ee,
        "--n-border-color-modal": nt,
        "--n-border-color-popover": en,
        "--n-th-color": Le,
        "--n-th-color-hover": bt,
        "--n-th-color-modal": Ae,
        "--n-th-color-hover-modal": lt,
        "--n-th-color-popover": tn,
        "--n-th-color-hover-popover": er,
        "--n-td-color": xt,
        "--n-td-color-hover": se,
        "--n-td-color-modal": Ve,
        "--n-td-color-hover-modal": It,
        "--n-td-color-popover": bn,
        "--n-td-color-hover-popover": Qn,
        "--n-th-text-color": Ct,
        "--n-td-text-color": yt,
        "--n-th-font-weight": St,
        "--n-th-button-color-hover": Mt,
        "--n-th-icon-color": Ft,
        "--n-th-icon-color-active": H,
        "--n-filter-size": ne,
        "--n-pagination-margin": tr,
        "--n-empty-padding": nr,
        "--n-box-shadow-before": sn,
        "--n-box-shadow-after": rr,
        "--n-sorter-size": dn,
        "--n-resizable-container-size": uo,
        "--n-resizable-size": fo,
        "--n-loading-size": po,
        "--n-loading-color": ho,
        "--n-opacity-loading": bo,
        "--n-td-color-striped": go,
        "--n-td-color-striped-modal": mo,
        "--n-td-color-striped-popover": vo,
        "n-td-color-sorting": he,
        "n-td-color-sorting-modal": ge,
        "n-td-color-sorting-popover": ve,
        "n-th-color-sorting": Se,
        "n-th-color-sorting-modal": Ee,
        "n-th-color-sorting-popover": Ye
      };
    }), pe = o ? it("data-table", T(() => e.size[0]), Ge, e) : void 0, Pe = T(() => {
      if (!e.pagination) return !1;
      if (e.paginateSinglePage) return !0;
      const P = z.value, {
        pageCount: D
      } = P;
      return D !== void 0 ? D > 1 : P.itemCount && P.pageSize && P.itemCount > P.pageSize;
    });
    return Object.assign({
      mainTableInstRef: u,
      mergedClsPrefix: r,
      rtlEnabled: l,
      mergedTheme: s,
      paginatedData: w,
      mergedBordered: n,
      mergedBottomBordered: a,
      mergedPagination: z,
      mergedShowPagination: Pe,
      cssVars: o ? void 0 : Ge,
      themeClass: pe == null ? void 0 : pe.themeClass,
      onRender: pe == null ? void 0 : pe.onRender
    }, dt);
  },
  render() {
    const {
      mergedClsPrefix: e,
      themeClass: t,
      onRender: n,
      $slots: r,
      spinProps: o
    } = this;
    return n == null || n(), c("div", {
      class: [`${e}-data-table`, this.rtlEnabled && `${e}-data-table--rtl`, t, {
        [`${e}-data-table--bordered`]: this.mergedBordered,
        [`${e}-data-table--bottom-bordered`]: this.mergedBottomBordered,
        [`${e}-data-table--single-line`]: this.singleLine,
        [`${e}-data-table--single-column`]: this.singleColumn,
        [`${e}-data-table--loading`]: this.loading,
        [`${e}-data-table--flex-height`]: this.flexHeight
      }],
      style: this.cssVars
    }, c("div", {
      class: `${e}-data-table-wrapper`
    }, c(ug, {
      ref: "mainTableInstRef"
    })), this.mergedShowPagination ? c("div", {
      class: `${e}-data-table__pagination`
    }, c(rb, Object.assign({
      theme: this.mergedTheme.peers.Pagination,
      themeOverrides: this.mergedTheme.peerOverrides.Pagination,
      disabled: this.loading
    }, this.mergedPagination))) : null, c(Ht, {
      name: "fade-in-scale-up-transition"
    }, {
      default: () => this.loading ? c("div", {
        class: `${e}-data-table-loading-wrapper`
      }, Et(r.loading, () => [c(Yn, Object.assign({
        clsPrefix: e,
        strokeWidth: 20
      }, o))])) : null
    }));
  }
}), kg = "n-dialog-provider", Rg = {
  titleFontSize: "18px",
  padding: "16px 28px 20px 28px",
  iconSize: "28px",
  actionSpace: "12px",
  contentMargin: "8px 0 16px 0",
  iconMargin: "0 4px 0 0",
  iconMarginIconTop: "4px 0 8px 0",
  closeSize: "22px",
  closeIconSize: "18px",
  closeMargin: "20px 26px 0 0",
  closeMarginIconTop: "10px 16px 0 0"
};
function Pg(e) {
  const {
    textColor1: t,
    textColor2: n,
    modalColor: r,
    closeIconColor: o,
    closeIconColorHover: i,
    closeIconColorPressed: l,
    closeColorHover: a,
    closeColorPressed: s,
    infoColor: d,
    successColor: u,
    warningColor: h,
    errorColor: b,
    primaryColor: m,
    dividerColor: f,
    borderRadius: p,
    fontWeightStrong: v,
    lineHeight: g,
    fontSize: y
  } = e;
  return Object.assign(Object.assign({}, Rg), {
    fontSize: y,
    lineHeight: g,
    border: `1px solid ${f}`,
    titleTextColor: t,
    textColor: n,
    color: r,
    closeColorHover: a,
    closeColorPressed: s,
    closeIconColor: o,
    closeIconColorHover: i,
    closeIconColorPressed: l,
    closeBorderRadius: p,
    iconColor: m,
    iconColorInfo: d,
    iconColorSuccess: u,
    iconColorWarning: h,
    iconColorError: b,
    borderRadius: p,
    titleFontWeight: v
  });
}
const qs = {
  name: "Dialog",
  common: rt,
  peers: {
    Button: so
  },
  self: Pg
}, _i = {
  icon: Function,
  type: {
    type: String,
    default: "default"
  },
  title: [String, Function],
  closable: {
    type: Boolean,
    default: !0
  },
  negativeText: String,
  positiveText: String,
  positiveButtonProps: Object,
  negativeButtonProps: Object,
  content: [String, Function],
  action: Function,
  showIcon: {
    type: Boolean,
    default: !0
  },
  loading: Boolean,
  bordered: Boolean,
  iconPlacement: String,
  titleClass: [String, Array],
  titleStyle: [String, Object],
  contentClass: [String, Array],
  contentStyle: [String, Object],
  actionClass: [String, Array],
  actionStyle: [String, Object],
  onPositiveClick: Function,
  onNegativeClick: Function,
  onClose: Function
}, zg = Rn(_i), $g = B([R("dialog", `
 --n-icon-margin: var(--n-icon-margin-top) var(--n-icon-margin-right) var(--n-icon-margin-bottom) var(--n-icon-margin-left);
 word-break: break-word;
 line-height: var(--n-line-height);
 position: relative;
 background: var(--n-color);
 color: var(--n-text-color);
 box-sizing: border-box;
 margin: auto;
 border-radius: var(--n-border-radius);
 padding: var(--n-padding);
 transition: 
 border-color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 `, [A("icon", {
  color: "var(--n-icon-color)"
}), _("bordered", {
  border: "var(--n-border)"
}), _("icon-top", [A("close", {
  margin: "var(--n-close-margin)"
}), A("icon", {
  margin: "var(--n-icon-margin)"
}), A("content", {
  textAlign: "center"
}), A("title", {
  justifyContent: "center"
}), A("action", {
  justifyContent: "center"
})]), _("icon-left", [A("icon", {
  margin: "var(--n-icon-margin)"
}), _("closable", [A("title", `
 padding-right: calc(var(--n-close-size) + 6px);
 `)])]), A("close", `
 position: absolute;
 right: 0;
 top: 0;
 margin: var(--n-close-margin);
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 z-index: 1;
 `), A("content", `
 font-size: var(--n-font-size);
 margin: var(--n-content-margin);
 position: relative;
 word-break: break-word;
 `, [_("last", "margin-bottom: 0;")]), A("action", `
 display: flex;
 justify-content: flex-end;
 `, [B("> *:not(:last-child)", `
 margin-right: var(--n-action-space);
 `)]), A("icon", `
 font-size: var(--n-icon-size);
 transition: color .3s var(--n-bezier);
 `), A("title", `
 transition: color .3s var(--n-bezier);
 display: flex;
 align-items: center;
 font-size: var(--n-title-font-size);
 font-weight: var(--n-title-font-weight);
 color: var(--n-title-text-color);
 `), R("dialog-icon-container", `
 display: flex;
 justify-content: center;
 `)]), no(R("dialog", `
 width: 446px;
 max-width: calc(100vw - 32px);
 `)), R("dialog", [kl(`
 width: 446px;
 max-width: calc(100vw - 32px);
 `)])]), Tg = {
  default: () => c(Jo, null),
  info: () => c(Jo, null),
  success: () => c(os, null),
  warning: () => c(Ri, null),
  error: () => c(rs, null)
}, Mg = ie({
  name: "Dialog",
  alias: [
    "NimbusConfirmCard",
    // deprecated
    "Confirm"
    // deprecated
  ],
  props: Object.assign(Object.assign({}, we.props), _i),
  slots: Object,
  setup(e) {
    const {
      mergedComponentPropsRef: t,
      mergedClsPrefixRef: n,
      inlineThemeDisabled: r,
      mergedRtlRef: o
    } = _e(e), i = $t("Dialog", o, n), l = T(() => {
      var m, f;
      const {
        iconPlacement: p
      } = e;
      return p || ((f = (m = t == null ? void 0 : t.value) === null || m === void 0 ? void 0 : m.Dialog) === null || f === void 0 ? void 0 : f.iconPlacement) || "left";
    });
    function a(m) {
      const {
        onPositiveClick: f
      } = e;
      f && f(m);
    }
    function s(m) {
      const {
        onNegativeClick: f
      } = e;
      f && f(m);
    }
    function d() {
      const {
        onClose: m
      } = e;
      m && m();
    }
    const u = we("Dialog", "-dialog", $g, qs, e, n), h = T(() => {
      const {
        type: m
      } = e, f = l.value, {
        common: {
          cubicBezierEaseInOut: p
        },
        self: {
          fontSize: v,
          lineHeight: g,
          border: y,
          titleTextColor: S,
          textColor: w,
          color: C,
          closeBorderRadius: k,
          closeColorHover: x,
          closeColorPressed: z,
          closeIconColor: $,
          closeIconColorHover: M,
          closeIconColorPressed: V,
          closeIconSize: O,
          borderRadius: E,
          titleFontWeight: I,
          titleFontSize: F,
          padding: N,
          iconSize: W,
          actionSpace: X,
          contentMargin: re,
          closeSize: Q,
          [f === "top" ? "iconMarginIconTop" : "iconMargin"]: G,
          [f === "top" ? "closeMarginIconTop" : "closeMargin"]: j,
          [J("iconColor", m)]: q
        }
      } = u.value, Z = mt(G);
      return {
        "--n-font-size": v,
        "--n-icon-color": q,
        "--n-bezier": p,
        "--n-close-margin": j,
        "--n-icon-margin-top": Z.top,
        "--n-icon-margin-right": Z.right,
        "--n-icon-margin-bottom": Z.bottom,
        "--n-icon-margin-left": Z.left,
        "--n-icon-size": W,
        "--n-close-size": Q,
        "--n-close-icon-size": O,
        "--n-close-border-radius": k,
        "--n-close-color-hover": x,
        "--n-close-color-pressed": z,
        "--n-close-icon-color": $,
        "--n-close-icon-color-hover": M,
        "--n-close-icon-color-pressed": V,
        "--n-color": C,
        "--n-text-color": w,
        "--n-border-radius": E,
        "--n-padding": N,
        "--n-line-height": g,
        "--n-border": y,
        "--n-content-margin": re,
        "--n-title-font-size": F,
        "--n-title-font-weight": I,
        "--n-title-text-color": S,
        "--n-action-space": X
      };
    }), b = r ? it("dialog", T(() => `${e.type[0]}${l.value[0]}`), h, e) : void 0;
    return {
      mergedClsPrefix: n,
      rtlEnabled: i,
      mergedIconPlacement: l,
      mergedTheme: u,
      handlePositiveClick: a,
      handleNegativeClick: s,
      handleCloseClick: d,
      cssVars: r ? void 0 : h,
      themeClass: b == null ? void 0 : b.themeClass,
      onRender: b == null ? void 0 : b.onRender
    };
  },
  render() {
    var e;
    const {
      bordered: t,
      mergedIconPlacement: n,
      cssVars: r,
      closable: o,
      showIcon: i,
      title: l,
      content: a,
      action: s,
      negativeText: d,
      positiveText: u,
      positiveButtonProps: h,
      negativeButtonProps: b,
      handlePositiveClick: m,
      handleNegativeClick: f,
      mergedTheme: p,
      loading: v,
      type: g,
      mergedClsPrefix: y
    } = this;
    (e = this.onRender) === null || e === void 0 || e.call(this);
    const S = i ? c(ct, {
      clsPrefix: y,
      class: `${y}-dialog__icon`
    }, {
      default: () => Ze(this.$slots.icon, (C) => C || (this.icon ? gt(this.icon) : Tg[this.type]()))
    }) : null, w = Ze(this.$slots.action, (C) => C || u || d || s ? c("div", {
      class: [`${y}-dialog__action`, this.actionClass],
      style: this.actionStyle
    }, C || (s ? [gt(s)] : [this.negativeText && c(Nn, Object.assign({
      theme: p.peers.Button,
      themeOverrides: p.peerOverrides.Button,
      ghost: !0,
      size: "small",
      onClick: f
    }, b), {
      default: () => gt(this.negativeText)
    }), this.positiveText && c(Nn, Object.assign({
      theme: p.peers.Button,
      themeOverrides: p.peerOverrides.Button,
      size: "small",
      type: g === "default" ? "primary" : g,
      disabled: v,
      loading: v,
      onClick: m
    }, h), {
      default: () => gt(this.positiveText)
    })])) : null);
    return c("div", {
      class: [`${y}-dialog`, this.themeClass, this.closable && `${y}-dialog--closable`, `${y}-dialog--icon-${n}`, t && `${y}-dialog--bordered`, this.rtlEnabled && `${y}-dialog--rtl`],
      style: r,
      role: "dialog"
    }, o ? Ze(this.$slots.close, (C) => {
      const k = [`${y}-dialog__close`, this.rtlEnabled && `${y}-dialog--rtl`];
      return C ? c("div", {
        class: k
      }, C) : c(Rr, {
        clsPrefix: y,
        class: k,
        onClick: this.handleCloseClick
      });
    }) : null, i && n === "top" ? c("div", {
      class: `${y}-dialog-icon-container`
    }, S) : null, c("div", {
      class: [`${y}-dialog__title`, this.titleClass],
      style: this.titleStyle
    }, i && n === "left" ? S : null, Et(this.$slots.header, () => [gt(l)])), c("div", {
      class: [`${y}-dialog__content`, w ? "" : `${y}-dialog__content--last`, this.contentClass],
      style: this.contentStyle
    }, Et(this.$slots.default, () => [gt(a)])), w);
  }
});
function Fg(e) {
  const {
    modalColor: t,
    textColor2: n,
    boxShadow3: r
  } = e;
  return {
    color: t,
    textColor: n,
    boxShadow: r
  };
}
const Og = {
  name: "Modal",
  common: rt,
  peers: {
    Scrollbar: ao,
    Dialog: qs,
    Card: Cs
  },
  self: Fg
}, oi = "n-draggable";
function Bg(e, t) {
  let n;
  const r = T(() => e.value !== !1), o = T(() => r.value ? oi : ""), i = T(() => {
    const s = e.value;
    return s === !0 || s === !1 ? !0 : s ? s.bounds !== "none" : !0;
  });
  function l(s) {
    const d = s.querySelector(`.${oi}`);
    if (!d || !o.value)
      return;
    let u = 0, h = 0, b = 0, m = 0, f = 0, p = 0, v;
    function g(w) {
      w.preventDefault(), v = w;
      const {
        x: C,
        y: k,
        right: x,
        bottom: z
      } = s.getBoundingClientRect();
      h = C, m = k, u = window.innerWidth - x, b = window.innerHeight - z;
      const {
        left: $,
        top: M
      } = s.style;
      f = +M.slice(0, -2), p = +$.slice(0, -2);
    }
    function y(w) {
      if (!v) return;
      const {
        clientX: C,
        clientY: k
      } = v;
      let x = w.clientX - C, z = w.clientY - k;
      i.value && (x > u ? x = u : -x > h && (x = -h), z > b ? z = b : -z > m && (z = -m));
      const $ = x + p, M = z + f;
      s.style.top = `${M}px`, s.style.left = `${$}px`;
    }
    function S() {
      v = void 0, t.onEnd(s);
    }
    De("mousedown", d, g), De("mousemove", window, y), De("mouseup", window, S), n = () => {
      He("mousedown", d, g), De("mousemove", window, y), De("mouseup", window, S);
    };
  }
  function a() {
    n && (n(), n = void 0);
  }
  return ml(a), {
    stopDrag: a,
    startDrag: l,
    draggableRef: r,
    draggableClassRef: o
  };
}
const Ai = Object.assign(Object.assign({}, Ti), _i), Eg = Rn(Ai), Ig = ie({
  name: "ModalBody",
  inheritAttrs: !1,
  slots: Object,
  props: Object.assign(Object.assign({
    show: {
      type: Boolean,
      required: !0
    },
    preset: String,
    displayDirective: {
      type: String,
      required: !0
    },
    trapFocus: {
      type: Boolean,
      default: !0
    },
    autoFocus: {
      type: Boolean,
      default: !0
    },
    blockScroll: Boolean,
    draggable: {
      type: [Boolean, Object],
      default: !1
    }
  }, Ai), {
    renderMask: Function,
    // events
    onClickoutside: Function,
    onBeforeLeave: {
      type: Function,
      required: !0
    },
    onAfterLeave: {
      type: Function,
      required: !0
    },
    onPositiveClick: {
      type: Function,
      required: !0
    },
    onNegativeClick: {
      type: Function,
      required: !0
    },
    onClose: {
      type: Function,
      required: !0
    },
    onAfterEnter: Function,
    onEsc: Function
  }),
  setup(e) {
    const t = L(null), n = L(null), r = L(e.show), o = L(null), i = L(null), l = ke(Tl);
    let a = null;
    je(ae(e, "show"), (z) => {
      z && (a = l.getMousePosition());
    }, {
      immediate: !0
    });
    const {
      stopDrag: s,
      startDrag: d,
      draggableRef: u,
      draggableClassRef: h
    } = Bg(ae(e, "draggable"), {
      onEnd: (z) => {
        p(z);
      }
    }), b = T(() => Di([e.titleClass, h.value])), m = T(() => Di([e.headerClass, h.value]));
    je(ae(e, "show"), (z) => {
      z && (r.value = !0);
    }), kc(T(() => e.blockScroll && r.value));
    function f() {
      if (l.transformOriginRef.value === "center")
        return "";
      const {
        value: z
      } = o, {
        value: $
      } = i;
      if (z === null || $ === null)
        return "";
      if (n.value) {
        const M = n.value.containerScrollTop;
        return `${z}px ${$ + M}px`;
      }
      return "";
    }
    function p(z) {
      if (l.transformOriginRef.value === "center" || !a || !n.value) return;
      const $ = n.value.containerScrollTop, {
        offsetLeft: M,
        offsetTop: V
      } = z, O = a.y, E = a.x;
      o.value = -(M - E), i.value = -(V - O - $), z.style.transformOrigin = f();
    }
    function v(z) {
      Tt(() => {
        p(z);
      });
    }
    function g(z) {
      z.style.transformOrigin = f(), e.onBeforeLeave();
    }
    function y(z) {
      const $ = z;
      u.value && d($), e.onAfterEnter && e.onAfterEnter($);
    }
    function S() {
      r.value = !1, o.value = null, i.value = null, s(), e.onAfterLeave();
    }
    function w() {
      const {
        onClose: z
      } = e;
      z && z();
    }
    function C() {
      e.onNegativeClick();
    }
    function k() {
      e.onPositiveClick();
    }
    const x = L(null);
    return je(x, (z) => {
      z && Tt(() => {
        const $ = z.el;
        $ && t.value !== $ && (t.value = $);
      });
    }), We(oo, t), We(ro, null), We(Sr, null), {
      mergedTheme: l.mergedThemeRef,
      appear: l.appearRef,
      isMounted: l.isMountedRef,
      mergedClsPrefix: l.mergedClsPrefixRef,
      bodyRef: t,
      scrollbarRef: n,
      draggableClass: h,
      displayed: r,
      childNodeRef: x,
      cardHeaderClass: m,
      dialogTitleClass: b,
      handlePositiveClick: k,
      handleNegativeClick: C,
      handleCloseClick: w,
      handleAfterEnter: y,
      handleAfterLeave: S,
      handleBeforeLeave: g,
      handleEnter: v
    };
  },
  render() {
    const {
      $slots: e,
      $attrs: t,
      handleEnter: n,
      handleAfterEnter: r,
      handleAfterLeave: o,
      handleBeforeLeave: i,
      preset: l,
      mergedClsPrefix: a
    } = this;
    let s = null;
    if (!l) {
      if (s = Su("default", e.default, {
        draggableClass: this.draggableClass
      }), !s) {
        Kt("modal", "default slot is empty");
        return;
      }
      s = fi(s), s.props = Vt({
        class: `${a}-modal`
      }, t, s.props || {});
    }
    return this.displayDirective === "show" || this.displayed || this.show ? ln(c("div", {
      role: "none",
      class: `${a}-modal-body-wrapper`
    }, c(Zn, {
      ref: "scrollbarRef",
      theme: this.mergedTheme.peers.Scrollbar,
      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,
      contentClass: `${a}-modal-scroll-content`
    }, {
      default: () => {
        var d;
        return [(d = this.renderMask) === null || d === void 0 ? void 0 : d.call(this), c(Ul, {
          disabled: !this.trapFocus,
          active: this.show,
          onEsc: this.onEsc,
          autoFocus: this.autoFocus
        }, {
          default: () => {
            var u;
            return c(Ht, {
              name: "fade-in-scale-up-transition",
              appear: (u = this.appear) !== null && u !== void 0 ? u : this.isMounted,
              onEnter: n,
              onAfterEnter: r,
              onAfterLeave: o,
              onBeforeLeave: i
            }, {
              default: () => {
                const h = [[br, this.show]], {
                  onClickoutside: b
                } = this;
                return b && h.push([vr, this.onClickoutside, void 0, {
                  capture: !0
                }]), ln(this.preset === "confirm" || this.preset === "dialog" ? c(Mg, Object.assign({}, this.$attrs, {
                  class: [`${a}-modal`, this.$attrs.class],
                  ref: "bodyRef",
                  theme: this.mergedTheme.peers.Dialog,
                  themeOverrides: this.mergedTheme.peerOverrides.Dialog
                }, kn(this.$props, zg), {
                  titleClass: this.dialogTitleClass,
                  "aria-modal": "true"
                }), e) : this.preset === "card" ? c(Bp, Object.assign({}, this.$attrs, {
                  ref: "bodyRef",
                  class: [`${a}-modal`, this.$attrs.class],
                  theme: this.mergedTheme.peers.Card,
                  themeOverrides: this.mergedTheme.peerOverrides.Card
                }, kn(this.$props, Fp), {
                  headerClass: this.cardHeaderClass,
                  "aria-modal": "true",
                  role: "dialog"
                }), e) : this.childNodeRef = s, h);
              }
            });
          }
        })];
      }
    })), [[br, this.displayDirective === "if" || this.displayed || this.show]]) : null;
  }
}), _g = B([R("modal-container", `
 position: fixed;
 left: 0;
 top: 0;
 height: 0;
 width: 0;
 display: flex;
 `), R("modal-mask", `
 position: fixed;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 background-color: rgba(0, 0, 0, .4);
 `, [as({
  enterDuration: ".25s",
  leaveDuration: ".25s",
  enterCubicBezier: "var(--n-bezier-ease-out)",
  leaveCubicBezier: "var(--n-bezier-ease-out)"
})]), R("modal-body-wrapper", `
 position: fixed;
 left: 0;
 right: 0;
 top: 0;
 bottom: 0;
 overflow: visible;
 `, [R("modal-scroll-content", `
 min-height: 100%;
 display: flex;
 position: relative;
 `)]), R("modal", `
 position: relative;
 align-self: center;
 color: var(--n-text-color);
 margin: auto;
 box-shadow: var(--n-box-shadow);
 `, [Pr({
  duration: ".25s",
  enterScale: ".5"
}), B(`.${oi}`, `
 cursor: move;
 user-select: none;
 `)])]), Ag = Object.assign(Object.assign(Object.assign(Object.assign({}, we.props), {
  show: Boolean,
  unstableShowMask: {
    type: Boolean,
    default: !0
  },
  maskClosable: {
    type: Boolean,
    default: !0
  },
  preset: String,
  to: [String, Object],
  displayDirective: {
    type: String,
    default: "if"
  },
  transformOrigin: {
    type: String,
    default: "mouse"
  },
  zIndex: Number,
  autoFocus: {
    type: Boolean,
    default: !0
  },
  trapFocus: {
    type: Boolean,
    default: !0
  },
  closeOnEsc: {
    type: Boolean,
    default: !0
  },
  blockScroll: {
    type: Boolean,
    default: !0
  }
}), Ai), {
  draggable: [Boolean, Object],
  // events
  onEsc: Function,
  "onUpdate:show": [Function, Array],
  onUpdateShow: [Function, Array],
  onAfterEnter: Function,
  onBeforeLeave: Function,
  onAfterLeave: Function,
  onClose: Function,
  onPositiveClick: Function,
  onNegativeClick: Function,
  onMaskClick: Function,
  // private
  internalDialog: Boolean,
  internalModal: Boolean,
  internalAppear: {
    type: Boolean,
    default: void 0
  },
  // deprecated
  overlayStyle: [String, Object],
  onBeforeHide: Function,
  onAfterHide: Function,
  onHide: Function
}), uv = ie({
  name: "Modal",
  inheritAttrs: !1,
  props: Ag,
  slots: Object,
  setup(e) {
    const t = L(null), {
      mergedClsPrefixRef: n,
      namespaceRef: r,
      inlineThemeDisabled: o
    } = _e(e), i = we("Modal", "-modal", _g, Og, e, n), l = gc(64), a = pc(), s = Cr(), d = e.internalDialog ? ke(kg, null) : null, u = e.internalModal ? ke(yc, null) : null, h = Sc();
    function b(k) {
      const {
        onUpdateShow: x,
        "onUpdate:show": z,
        onHide: $
      } = e;
      x && oe(x, k), z && oe(z, k), $ && !k && $(k);
    }
    function m() {
      const {
        onClose: k
      } = e;
      k ? Promise.resolve(k()).then((x) => {
        x !== !1 && b(!1);
      }) : b(!1);
    }
    function f() {
      const {
        onPositiveClick: k
      } = e;
      k ? Promise.resolve(k()).then((x) => {
        x !== !1 && b(!1);
      }) : b(!1);
    }
    function p() {
      const {
        onNegativeClick: k
      } = e;
      k ? Promise.resolve(k()).then((x) => {
        x !== !1 && b(!1);
      }) : b(!1);
    }
    function v() {
      const {
        onBeforeLeave: k,
        onBeforeHide: x
      } = e;
      k && oe(k), x && x();
    }
    function g() {
      const {
        onAfterLeave: k,
        onAfterHide: x
      } = e;
      k && oe(k), x && x();
    }
    function y(k) {
      var x;
      const {
        onMaskClick: z
      } = e;
      z && z(k), e.maskClosable && !((x = t.value) === null || x === void 0) && x.contains(Dn(k)) && b(!1);
    }
    function S(k) {
      var x;
      (x = e.onEsc) === null || x === void 0 || x.call(e), e.show && e.closeOnEsc && wu(k) && (h.value || b(!1));
    }
    We(Tl, {
      getMousePosition: () => {
        const k = d || u;
        if (k) {
          const {
            clickedRef: x,
            clickedPositionRef: z
          } = k;
          if (x.value && z.value)
            return z.value;
        }
        return l.value ? a.value : null;
      },
      mergedClsPrefixRef: n,
      mergedThemeRef: i,
      isMountedRef: s,
      appearRef: ae(e, "internalAppear"),
      transformOriginRef: ae(e, "transformOrigin")
    });
    const w = T(() => {
      const {
        common: {
          cubicBezierEaseOut: k
        },
        self: {
          boxShadow: x,
          color: z,
          textColor: $
        }
      } = i.value;
      return {
        "--n-bezier-ease-out": k,
        "--n-box-shadow": x,
        "--n-color": z,
        "--n-text-color": $
      };
    }), C = o ? it("theme-class", void 0, w, e) : void 0;
    return {
      mergedClsPrefix: n,
      namespace: r,
      isMounted: s,
      containerRef: t,
      presetProps: T(() => kn(e, Eg)),
      handleEsc: S,
      handleAfterLeave: g,
      handleClickoutside: y,
      handleBeforeLeave: v,
      doUpdateShow: b,
      handleNegativeClick: p,
      handlePositiveClick: f,
      handleCloseClick: m,
      cssVars: o ? void 0 : w,
      themeClass: C == null ? void 0 : C.themeClass,
      onRender: C == null ? void 0 : C.onRender
    };
  },
  render() {
    const {
      mergedClsPrefix: e
    } = this;
    return c(El, {
      to: this.to,
      show: this.show
    }, {
      default: () => {
        var t;
        (t = this.onRender) === null || t === void 0 || t.call(this);
        const {
          unstableShowMask: n
        } = this;
        return ln(c("div", {
          role: "none",
          ref: "containerRef",
          class: [`${e}-modal-container`, this.themeClass, this.namespace],
          style: this.cssVars
        }, c(Ig, Object.assign({
          style: this.overlayStyle
        }, this.$attrs, {
          ref: "bodyWrapper",
          displayDirective: this.displayDirective,
          show: this.show,
          preset: this.preset,
          autoFocus: this.autoFocus,
          trapFocus: this.trapFocus,
          draggable: this.draggable,
          blockScroll: this.blockScroll
        }, this.presetProps, {
          onEsc: this.handleEsc,
          onClose: this.handleCloseClick,
          onNegativeClick: this.handleNegativeClick,
          onPositiveClick: this.handlePositiveClick,
          onBeforeLeave: this.handleBeforeLeave,
          onAfterEnter: this.onAfterEnter,
          onAfterLeave: this.handleAfterLeave,
          onClickoutside: n ? void 0 : this.handleClickoutside,
          renderMask: n ? () => {
            var r;
            return c(Ht, {
              name: "fade-in-transition",
              key: "mask",
              appear: (r = this.internalAppear) !== null && r !== void 0 ? r : this.isMounted
            }, {
              default: () => this.show ? c("div", {
                "aria-hidden": !0,
                ref: "containerRef",
                class: `${e}-modal-mask`,
                onClick: this.handleClickoutside
              }) : null
            });
          } : void 0
        }), this.$slots)), [[yi, {
          zIndex: this.zIndex,
          enabled: this.show
        }]]);
      }
    });
  }
}), Gs = "n-message-api", Xs = "n-message-provider", Lg = {
  margin: "0 0 8px 0",
  padding: "10px 20px",
  maxWidth: "720px",
  minWidth: "420px",
  iconMargin: "0 10px 0 0",
  closeMargin: "0 0 0 10px",
  closeSize: "20px",
  closeIconSize: "16px",
  iconSize: "20px",
  fontSize: "14px"
};
function Hg(e) {
  const {
    textColor2: t,
    closeIconColor: n,
    closeIconColorHover: r,
    closeIconColorPressed: o,
    infoColor: i,
    successColor: l,
    errorColor: a,
    warningColor: s,
    popoverColor: d,
    boxShadow2: u,
    primaryColor: h,
    lineHeight: b,
    borderRadius: m,
    closeColorHover: f,
    closeColorPressed: p
  } = e;
  return Object.assign(Object.assign({}, Lg), {
    closeBorderRadius: m,
    textColor: t,
    textColorInfo: t,
    textColorSuccess: t,
    textColorError: t,
    textColorWarning: t,
    textColorLoading: t,
    color: d,
    colorInfo: d,
    colorSuccess: d,
    colorError: d,
    colorWarning: d,
    colorLoading: d,
    boxShadow: u,
    boxShadowInfo: u,
    boxShadowSuccess: u,
    boxShadowError: u,
    boxShadowWarning: u,
    boxShadowLoading: u,
    iconColor: t,
    iconColorInfo: i,
    iconColorSuccess: l,
    iconColorWarning: s,
    iconColorError: a,
    iconColorLoading: h,
    closeColorHover: f,
    closeColorPressed: p,
    closeIconColor: n,
    closeIconColorHover: r,
    closeIconColorPressed: o,
    closeColorHoverInfo: f,
    closeColorPressedInfo: p,
    closeIconColorInfo: n,
    closeIconColorHoverInfo: r,
    closeIconColorPressedInfo: o,
    closeColorHoverSuccess: f,
    closeColorPressedSuccess: p,
    closeIconColorSuccess: n,
    closeIconColorHoverSuccess: r,
    closeIconColorPressedSuccess: o,
    closeColorHoverError: f,
    closeColorPressedError: p,
    closeIconColorError: n,
    closeIconColorHoverError: r,
    closeIconColorPressedError: o,
    closeColorHoverWarning: f,
    closeColorPressedWarning: p,
    closeIconColorWarning: n,
    closeIconColorHoverWarning: r,
    closeIconColorPressedWarning: o,
    closeColorHoverLoading: f,
    closeColorPressedLoading: p,
    closeIconColorLoading: n,
    closeIconColorHoverLoading: r,
    closeIconColorPressedLoading: o,
    loadingColor: h,
    lineHeight: b,
    borderRadius: m
  });
}
const Dg = {
  name: "Message",
  common: rt,
  self: Hg
}, Ys = {
  icon: Function,
  type: {
    type: String,
    default: "info"
  },
  content: [String, Number, Function],
  showIcon: {
    type: Boolean,
    default: !0
  },
  closable: Boolean,
  keepAliveOnHover: Boolean,
  onClose: Function,
  onMouseenter: Function,
  onMouseleave: Function
}, jg = B([R("message-wrapper", `
 margin: var(--n-margin);
 z-index: 0;
 transform-origin: top center;
 display: flex;
 `, [fp({
  overflow: "visible",
  originalTransition: "transform .3s var(--n-bezier)",
  enterToProps: {
    transform: "scale(1)"
  },
  leaveToProps: {
    transform: "scale(0.85)"
  }
})]), R("message", `
 box-sizing: border-box;
 display: flex;
 align-items: center;
 transition:
 color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 opacity .3s var(--n-bezier),
 transform .3s var(--n-bezier),
 margin-bottom .3s var(--n-bezier);
 padding: var(--n-padding);
 border-radius: var(--n-border-radius);
 flex-wrap: nowrap;
 overflow: hidden;
 max-width: var(--n-max-width);
 color: var(--n-text-color);
 background-color: var(--n-color);
 box-shadow: var(--n-box-shadow);
 `, [A("content", `
 display: inline-block;
 line-height: var(--n-line-height);
 font-size: var(--n-font-size);
 `), A("icon", `
 position: relative;
 margin: var(--n-icon-margin);
 height: var(--n-icon-size);
 width: var(--n-icon-size);
 font-size: var(--n-icon-size);
 flex-shrink: 0;
 `, [["default", "info", "success", "warning", "error", "loading"].map((e) => _(`${e}-type`, [B("> *", `
 color: var(--n-icon-color-${e});
 transition: color .3s var(--n-bezier);
 `)])), B("> *", `
 position: absolute;
 left: 0;
 top: 0;
 right: 0;
 bottom: 0;
 `, [Wt()])]), A("close", `
 margin: var(--n-close-margin);
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 flex-shrink: 0;
 `, [B("&:hover", `
 color: var(--n-close-icon-color-hover);
 `), B("&:active", `
 color: var(--n-close-icon-color-pressed);
 `)])]), R("message-container", `
 z-index: 6000;
 position: fixed;
 height: 0;
 overflow: visible;
 display: flex;
 flex-direction: column;
 align-items: center;
 `, [_("top", `
 top: 12px;
 left: 0;
 right: 0;
 `), _("top-left", `
 top: 12px;
 left: 12px;
 right: 0;
 align-items: flex-start;
 `), _("top-right", `
 top: 12px;
 left: 0;
 right: 12px;
 align-items: flex-end;
 `), _("bottom", `
 bottom: 4px;
 left: 0;
 right: 0;
 justify-content: flex-end;
 `), _("bottom-left", `
 bottom: 4px;
 left: 12px;
 right: 0;
 justify-content: flex-end;
 align-items: flex-start;
 `), _("bottom-right", `
 bottom: 4px;
 left: 0;
 right: 12px;
 justify-content: flex-end;
 align-items: flex-end;
 `)])]), Wg = {
  info: () => c(Jo, null),
  success: () => c(os, null),
  warning: () => c(Ri, null),
  error: () => c(rs, null),
  default: () => null
}, Ng = ie({
  name: "Message",
  props: Object.assign(Object.assign({}, Ys), {
    render: Function
  }),
  setup(e) {
    const {
      inlineThemeDisabled: t,
      mergedRtlRef: n
    } = _e(e), {
      props: r,
      mergedClsPrefixRef: o
    } = ke(Xs), i = $t("Message", n, o), l = we("Message", "-message", jg, Dg, r, o), a = T(() => {
      const {
        type: d
      } = e, {
        common: {
          cubicBezierEaseInOut: u
        },
        self: {
          padding: h,
          margin: b,
          maxWidth: m,
          iconMargin: f,
          closeMargin: p,
          closeSize: v,
          iconSize: g,
          fontSize: y,
          lineHeight: S,
          borderRadius: w,
          iconColorInfo: C,
          iconColorSuccess: k,
          iconColorWarning: x,
          iconColorError: z,
          iconColorLoading: $,
          closeIconSize: M,
          closeBorderRadius: V,
          [J("textColor", d)]: O,
          [J("boxShadow", d)]: E,
          [J("color", d)]: I,
          [J("closeColorHover", d)]: F,
          [J("closeColorPressed", d)]: N,
          [J("closeIconColor", d)]: W,
          [J("closeIconColorPressed", d)]: X,
          [J("closeIconColorHover", d)]: re
        }
      } = l.value;
      return {
        "--n-bezier": u,
        "--n-margin": b,
        "--n-padding": h,
        "--n-max-width": m,
        "--n-font-size": y,
        "--n-icon-margin": f,
        "--n-icon-size": g,
        "--n-close-icon-size": M,
        "--n-close-border-radius": V,
        "--n-close-size": v,
        "--n-close-margin": p,
        "--n-text-color": O,
        "--n-color": I,
        "--n-box-shadow": E,
        "--n-icon-color-info": C,
        "--n-icon-color-success": k,
        "--n-icon-color-warning": x,
        "--n-icon-color-error": z,
        "--n-icon-color-loading": $,
        "--n-close-color-hover": F,
        "--n-close-color-pressed": N,
        "--n-close-icon-color": W,
        "--n-close-icon-color-pressed": X,
        "--n-close-icon-color-hover": re,
        "--n-line-height": S,
        "--n-border-radius": w
      };
    }), s = t ? it("message", T(() => e.type[0]), a, {}) : void 0;
    return {
      mergedClsPrefix: o,
      rtlEnabled: i,
      messageProviderProps: r,
      handleClose() {
        var d;
        (d = e.onClose) === null || d === void 0 || d.call(e);
      },
      cssVars: t ? void 0 : a,
      themeClass: s == null ? void 0 : s.themeClass,
      onRender: s == null ? void 0 : s.onRender,
      placement: r.placement
    };
  },
  render() {
    const {
      render: e,
      type: t,
      closable: n,
      content: r,
      mergedClsPrefix: o,
      cssVars: i,
      themeClass: l,
      onRender: a,
      icon: s,
      handleClose: d,
      showIcon: u
    } = this;
    a == null || a();
    let h;
    return c("div", {
      class: [`${o}-message-wrapper`, l],
      onMouseenter: this.onMouseenter,
      onMouseleave: this.onMouseleave,
      style: [{
        alignItems: this.placement.startsWith("top") ? "flex-start" : "flex-end"
      }, i]
    }, e ? e(this.$props) : c("div", {
      class: [`${o}-message ${o}-message--${t}-type`, this.rtlEnabled && `${o}-message--rtl`]
    }, (h = Vg(s, t, o)) && u ? c("div", {
      class: `${o}-message__icon ${o}-message__icon--${t}-type`
    }, c(Gn, null, {
      default: () => h
    })) : null, c("div", {
      class: `${o}-message__content`
    }, gt(r)), n ? c(Rr, {
      clsPrefix: o,
      class: `${o}-message__close`,
      onClick: d,
      absolute: !0
    }) : null));
  }
});
function Vg(e, t, n) {
  if (typeof e == "function")
    return e();
  {
    const r = t === "loading" ? c(Yn, {
      clsPrefix: n,
      strokeWidth: 24,
      scale: 0.85
    }) : Wg[t]();
    return r ? c(ct, {
      clsPrefix: n,
      key: t
    }, {
      default: () => r
    }) : null;
  }
}
const Kg = ie({
  name: "MessageEnvironment",
  props: Object.assign(Object.assign({}, Ys), {
    duration: {
      type: Number,
      default: 3e3
    },
    onAfterLeave: Function,
    onLeave: Function,
    internalKey: {
      type: String,
      required: !0
    },
    // private
    onInternalAfterLeave: Function,
    // deprecated
    onHide: Function,
    onAfterHide: Function
  }),
  setup(e) {
    let t = null;
    const n = L(!0);
    vt(() => {
      r();
    });
    function r() {
      const {
        duration: u
      } = e;
      u && (t = window.setTimeout(l, u));
    }
    function o(u) {
      u.currentTarget === u.target && t !== null && (window.clearTimeout(t), t = null);
    }
    function i(u) {
      u.currentTarget === u.target && r();
    }
    function l() {
      const {
        onHide: u
      } = e;
      n.value = !1, t && (window.clearTimeout(t), t = null), u && u();
    }
    function a() {
      const {
        onClose: u
      } = e;
      u && u(), l();
    }
    function s() {
      const {
        onAfterLeave: u,
        onInternalAfterLeave: h,
        onAfterHide: b,
        internalKey: m
      } = e;
      u && u(), h && h(m), b && b();
    }
    function d() {
      l();
    }
    return {
      show: n,
      hide: l,
      handleClose: a,
      handleAfterLeave: s,
      handleMouseleave: i,
      handleMouseenter: o,
      deactivate: d
    };
  },
  render() {
    return c(is, {
      appear: !0,
      onAfterLeave: this.handleAfterLeave,
      onLeave: this.onLeave
    }, {
      default: () => [this.show ? c(Ng, {
        content: this.content,
        type: this.type,
        icon: this.icon,
        showIcon: this.showIcon,
        closable: this.closable,
        onClose: this.handleClose,
        onMouseenter: this.keepAliveOnHover ? this.handleMouseenter : void 0,
        onMouseleave: this.keepAliveOnHover ? this.handleMouseleave : void 0
      }) : null]
    });
  }
}), Ug = Object.assign(Object.assign({}, we.props), {
  to: [String, Object],
  duration: {
    type: Number,
    default: 3e3
  },
  keepAliveOnHover: Boolean,
  max: Number,
  placement: {
    type: String,
    default: "top"
  },
  closable: Boolean,
  containerClass: String,
  containerStyle: [String, Object]
}), fv = ie({
  name: "MessageProvider",
  props: Ug,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(e), n = L([]), r = L({}), o = {
      create(s, d) {
        return i(s, Object.assign({
          type: "default"
        }, d));
      },
      info(s, d) {
        return i(s, Object.assign(Object.assign({}, d), {
          type: "info"
        }));
      },
      success(s, d) {
        return i(s, Object.assign(Object.assign({}, d), {
          type: "success"
        }));
      },
      warning(s, d) {
        return i(s, Object.assign(Object.assign({}, d), {
          type: "warning"
        }));
      },
      error(s, d) {
        return i(s, Object.assign(Object.assign({}, d), {
          type: "error"
        }));
      },
      loading(s, d) {
        return i(s, Object.assign(Object.assign({}, d), {
          type: "loading"
        }));
      },
      destroyAll: a
    };
    We(Xs, {
      props: e,
      mergedClsPrefixRef: t
    }), We(Gs, o);
    function i(s, d) {
      const u = jn(), h = ul(Object.assign(Object.assign({}, d), {
        content: s,
        key: u,
        destroy: () => {
          var m;
          (m = r.value[u]) === null || m === void 0 || m.hide();
        }
      })), {
        max: b
      } = e;
      return b && n.value.length >= b && n.value.shift(), n.value.push(h), h;
    }
    function l(s) {
      n.value.splice(n.value.findIndex((d) => d.key === s), 1), delete r.value[s];
    }
    function a() {
      Object.values(r.value).forEach((s) => {
        s.hide();
      });
    }
    return Object.assign({
      mergedClsPrefix: t,
      messageRefs: r,
      messageList: n,
      handleAfterLeave: l
    }, o);
  },
  render() {
    var e, t, n;
    return c(Pt, null, (t = (e = this.$slots).default) === null || t === void 0 ? void 0 : t.call(e), this.messageList.length ? c(hl, {
      to: (n = this.to) !== null && n !== void 0 ? n : "body"
    }, c("div", {
      class: [`${this.mergedClsPrefix}-message-container`, `${this.mergedClsPrefix}-message-container--${this.placement}`, this.containerClass],
      key: "message-container",
      style: this.containerStyle
    }, this.messageList.map((r) => c(Kg, Object.assign({
      ref: (o) => {
        o && (this.messageRefs[r.key] = o);
      },
      internalKey: r.key,
      onInternalAfterLeave: this.handleAfterLeave
    }, kr(r, ["destroy"], void 0), {
      duration: r.duration === void 0 ? this.duration : r.duration,
      keepAliveOnHover: r.keepAliveOnHover === void 0 ? this.keepAliveOnHover : r.keepAliveOnHover,
      closable: r.closable === void 0 ? this.closable : r.closable
    }))))) : null);
  }
});
function hv() {
  const e = ke(Gs, null);
  return e === null && ki("use-message", "No outer <n-message-provider /> founded. See prerequisite in https://www.naiveui.com/en-US/os-theme/components/message for more details. If you want to use `useMessage` outside setup, please check https://www.naiveui.com/zh-CN/os-theme/components/message#Q-&-A."), e;
}
const qg = {
  gapSmall: "4px 8px",
  gapMedium: "8px 12px",
  gapLarge: "12px 16px"
};
function Gg() {
  return qg;
}
const Xg = {
  name: "Space",
  self: Gg
};
let jo;
function Yg() {
  if (!qn) return !0;
  if (jo === void 0) {
    const e = document.createElement("div");
    e.style.display = "flex", e.style.flexDirection = "column", e.style.rowGap = "1px", e.appendChild(document.createElement("div")), e.appendChild(document.createElement("div")), document.body.appendChild(e);
    const t = e.scrollHeight === 1;
    return document.body.removeChild(e), jo = t;
  }
  return jo;
}
const Zg = Object.assign(Object.assign({}, we.props), {
  align: String,
  justify: {
    type: String,
    default: "start"
  },
  inline: Boolean,
  vertical: Boolean,
  reverse: Boolean,
  size: {
    type: [String, Number, Array],
    default: "medium"
  },
  wrapItem: {
    type: Boolean,
    default: !0
  },
  itemClass: String,
  itemStyle: [String, Object],
  wrap: {
    type: Boolean,
    default: !0
  },
  // internal
  internalUseGap: {
    type: Boolean,
    default: void 0
  }
}), pv = ie({
  name: "Space",
  props: Zg,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      mergedRtlRef: n
    } = _e(e), r = we("Space", "-space", void 0, Xg, e, t), o = $t("Space", n, t);
    return {
      useGap: Yg(),
      rtlEnabled: o,
      mergedClsPrefix: t,
      margin: T(() => {
        const {
          size: i
        } = e;
        if (Array.isArray(i))
          return {
            horizontal: i[0],
            vertical: i[1]
          };
        if (typeof i == "number")
          return {
            horizontal: i,
            vertical: i
          };
        const {
          self: {
            [J("gap", i)]: l
          }
        } = r.value, {
          row: a,
          col: s
        } = Zd(l);
        return {
          horizontal: Nt(s),
          vertical: Nt(a)
        };
      })
    };
  },
  render() {
    const {
      vertical: e,
      reverse: t,
      align: n,
      inline: r,
      justify: o,
      itemClass: i,
      itemStyle: l,
      margin: a,
      wrap: s,
      mergedClsPrefix: d,
      rtlEnabled: u,
      useGap: h,
      wrapItem: b,
      internalUseGap: m
    } = this, f = an(Yl(this), !1);
    if (!f.length) return null;
    const p = `${a.horizontal}px`, v = `${a.horizontal / 2}px`, g = `${a.vertical}px`, y = `${a.vertical / 2}px`, S = f.length - 1, w = o.startsWith("space-");
    return c("div", {
      role: "none",
      class: [`${d}-space`, u && `${d}-space--rtl`],
      style: {
        display: r ? "inline-flex" : "flex",
        flexDirection: e && !t ? "column" : e && t ? "column-reverse" : !e && t ? "row-reverse" : "row",
        justifyContent: ["start", "end"].includes(o) ? `flex-${o}` : o,
        flexWrap: !s || e ? "nowrap" : "wrap",
        marginTop: h || e ? "" : `-${y}`,
        marginBottom: h || e ? "" : `-${y}`,
        alignItems: n,
        gap: h ? `${a.vertical}px ${a.horizontal}px` : ""
      }
    }, !b && (h || m) ? f : f.map((C, k) => C.type === eo ? C : c("div", {
      role: "none",
      class: i,
      style: [l, {
        maxWidth: "100%"
      }, h ? "" : e ? {
        marginBottom: k !== S ? g : ""
      } : u ? {
        marginLeft: w ? o === "space-between" && k === S ? "" : v : k !== S ? p : "",
        marginRight: w ? o === "space-between" && k === 0 ? "" : v : "",
        paddingTop: y,
        paddingBottom: y
      } : {
        marginRight: w ? o === "space-between" && k === S ? "" : v : k !== S ? p : "",
        marginLeft: w ? o === "space-between" && k === 0 ? "" : v : "",
        paddingTop: y,
        paddingBottom: y
      }]
    }, C)));
  }
}), Jg = {
  feedbackPadding: "4px 0 0 2px",
  feedbackHeightSmall: "24px",
  feedbackHeightMedium: "24px",
  feedbackHeightLarge: "26px",
  feedbackFontSizeSmall: "13px",
  feedbackFontSizeMedium: "14px",
  feedbackFontSizeLarge: "14px",
  labelFontSizeLeftSmall: "14px",
  labelFontSizeLeftMedium: "14px",
  labelFontSizeLeftLarge: "15px",
  labelFontSizeTopSmall: "13px",
  labelFontSizeTopMedium: "14px",
  labelFontSizeTopLarge: "14px",
  labelHeightSmall: "24px",
  labelHeightMedium: "26px",
  labelHeightLarge: "28px",
  labelPaddingVertical: "0 0 6px 2px",
  labelPaddingHorizontal: "0 12px 0 0",
  labelTextAlignVertical: "left",
  labelTextAlignHorizontal: "right",
  labelFontWeight: "400"
};
function Qg(e) {
  const {
    heightSmall: t,
    heightMedium: n,
    heightLarge: r,
    textColor1: o,
    errorColor: i,
    warningColor: l,
    lineHeight: a,
    textColor3: s
  } = e;
  return Object.assign(Object.assign({}, Jg), {
    blankHeightSmall: t,
    blankHeightMedium: n,
    blankHeightLarge: r,
    lineHeight: a,
    labelTextColor: o,
    asteriskColor: i,
    feedbackTextColorError: i,
    feedbackTextColorWarning: l,
    feedbackTextColor: s
  });
}
const Zs = {
  name: "Form",
  common: rt,
  self: Qg
}, em = {
  iconSize: "22px"
};
function tm(e) {
  const {
    fontSize: t,
    warningColor: n
  } = e;
  return Object.assign(Object.assign({}, em), {
    fontSize: t,
    iconColor: n
  });
}
const nm = {
  name: "Popconfirm",
  common: rt,
  peers: {
    Button: so,
    Popover: Fn
  },
  self: tm
}, rm = {
  tabFontSizeSmall: "14px",
  tabFontSizeMedium: "14px",
  tabFontSizeLarge: "16px",
  tabGapSmallLine: "36px",
  tabGapMediumLine: "36px",
  tabGapLargeLine: "36px",
  tabGapSmallLineVertical: "8px",
  tabGapMediumLineVertical: "8px",
  tabGapLargeLineVertical: "8px",
  tabPaddingSmallLine: "6px 0",
  tabPaddingMediumLine: "10px 0",
  tabPaddingLargeLine: "14px 0",
  tabPaddingVerticalSmallLine: "6px 12px",
  tabPaddingVerticalMediumLine: "8px 16px",
  tabPaddingVerticalLargeLine: "10px 20px",
  tabGapSmallBar: "36px",
  tabGapMediumBar: "36px",
  tabGapLargeBar: "36px",
  tabGapSmallBarVertical: "8px",
  tabGapMediumBarVertical: "8px",
  tabGapLargeBarVertical: "8px",
  tabPaddingSmallBar: "4px 0",
  tabPaddingMediumBar: "6px 0",
  tabPaddingLargeBar: "10px 0",
  tabPaddingVerticalSmallBar: "6px 12px",
  tabPaddingVerticalMediumBar: "8px 16px",
  tabPaddingVerticalLargeBar: "10px 20px",
  tabGapSmallCard: "4px",
  tabGapMediumCard: "4px",
  tabGapLargeCard: "4px",
  tabGapSmallCardVertical: "4px",
  tabGapMediumCardVertical: "4px",
  tabGapLargeCardVertical: "4px",
  tabPaddingSmallCard: "8px 16px",
  tabPaddingMediumCard: "10px 20px",
  tabPaddingLargeCard: "12px 24px",
  tabPaddingSmallSegment: "4px 0",
  tabPaddingMediumSegment: "6px 0",
  tabPaddingLargeSegment: "8px 0",
  tabPaddingVerticalLargeSegment: "0 8px",
  tabPaddingVerticalSmallCard: "8px 12px",
  tabPaddingVerticalMediumCard: "10px 16px",
  tabPaddingVerticalLargeCard: "12px 20px",
  tabPaddingVerticalSmallSegment: "0 4px",
  tabPaddingVerticalMediumSegment: "0 6px",
  tabGapSmallSegment: "0",
  tabGapMediumSegment: "0",
  tabGapLargeSegment: "0",
  tabGapSmallSegmentVertical: "0",
  tabGapMediumSegmentVertical: "0",
  tabGapLargeSegmentVertical: "0",
  panePaddingSmall: "8px 0 0 0",
  panePaddingMedium: "12px 0 0 0",
  panePaddingLarge: "16px 0 0 0",
  closeSize: "18px",
  closeIconSize: "14px"
};
function om(e) {
  const {
    textColor2: t,
    primaryColor: n,
    textColorDisabled: r,
    closeIconColor: o,
    closeIconColorHover: i,
    closeIconColorPressed: l,
    closeColorHover: a,
    closeColorPressed: s,
    tabColor: d,
    baseColor: u,
    dividerColor: h,
    fontWeight: b,
    textColor1: m,
    borderRadius: f,
    fontSize: p,
    fontWeightStrong: v
  } = e;
  return Object.assign(Object.assign({}, rm), {
    colorSegment: d,
    tabFontSizeCard: p,
    tabTextColorLine: m,
    tabTextColorActiveLine: n,
    tabTextColorHoverLine: n,
    tabTextColorDisabledLine: r,
    tabTextColorSegment: m,
    tabTextColorActiveSegment: t,
    tabTextColorHoverSegment: t,
    tabTextColorDisabledSegment: r,
    tabTextColorBar: m,
    tabTextColorActiveBar: n,
    tabTextColorHoverBar: n,
    tabTextColorDisabledBar: r,
    tabTextColorCard: m,
    tabTextColorHoverCard: m,
    tabTextColorActiveCard: n,
    tabTextColorDisabledCard: r,
    barColor: n,
    closeIconColor: o,
    closeIconColorHover: i,
    closeIconColorPressed: l,
    closeColorHover: a,
    closeColorPressed: s,
    closeBorderRadius: f,
    tabColor: d,
    tabColorSegment: u,
    tabBorderColor: h,
    tabFontWeightActive: b,
    tabFontWeight: b,
    tabBorderRadius: f,
    paneTextColor: t,
    fontWeightStrong: v
  });
}
const im = {
  name: "Tabs",
  common: rt,
  self: om
};
Object.assign(Object.assign({}, we.props), {
  left: [Number, String],
  right: [Number, String],
  top: [Number, String],
  bottom: [Number, String],
  shape: {
    type: String,
    default: "circle"
  },
  position: {
    type: String,
    default: "fixed"
  }
});
const am = "n-float-button-group";
function lm(e) {
  const {
    popoverColor: t,
    textColor2: n,
    buttonColor2Hover: r,
    buttonColor2Pressed: o,
    primaryColor: i,
    primaryColorHover: l,
    primaryColorPressed: a,
    borderRadius: s
  } = e;
  return {
    color: t,
    colorHover: r,
    colorPressed: o,
    colorPrimary: i,
    colorPrimaryHover: l,
    colorPrimaryPressed: a,
    textColor: n,
    boxShadow: "0 2px 8px 0px rgba(0, 0, 0, .16)",
    boxShadowHover: "0 2px 12px 0px rgba(0, 0, 0, .24)",
    boxShadowPressed: "0 2px 12px 0px rgba(0, 0, 0, .24)",
    textColorPrimary: "#fff",
    borderRadiusSquare: s
  };
}
const sm = {
  name: "FloatButton",
  common: rt,
  self: lm
}, dm = R("float-button", `
 user-select: none;
 cursor: pointer;
 color: var(--n-text-color);
 background-color: var(--n-color);
 font-size: 18px;
 transition:
 color .3s var(--n-bezier),
 border-color .3s var(--n-bezier),
 box-shadow .3s var(--n-bezier),
 background-color .3s var(--n-bezier);
 box-shadow: var(--n-box-shadow);
 display: flex;
 align-items: stretch;
 box-sizing: border-box;
`, [_("circle-shape", `
 border-radius: 4096px;
 `), _("square-shape", `
 border-radius: var(--n-border-radius-square);
 `), A("fill", `
 position: absolute;
 top: 0;
 right: 0;
 bottom: 0
 left: 0;
 transition: background-color .3s var(--n-bezier);
 border-radius: inherit;
 `), A("body", `
 position: relative;
 flex-grow: 1;
 display: flex;
 align-items: center;
 justify-content: center;
 transition: transform .3s var(--n-bezier), opacity .3s var(--n-bezier);
 border-radius: inherit;
 flex-direction: column;
 box-sizing: border-box;
 padding: 2px 4px;
 gap: 2px;
 transform: scale(1);
 `, [A("description", `
 font-size: 12px;
 text-align: center;
 line-height: 14px;
 `)]), B("&:hover", "box-shadow: var(--n-box-shadow-hover);", [B(">", [A("fill", `
 background-color: var(--n-color-hover);
 `)])]), B("&:active", "box-shadow: var(--n-box-shadow-pressed);", [B(">", [A("fill", `
 background-color: var(--n-color-pressed);
 `)])]), _("show-menu", [B(">", [A("menu", `
 pointer-events: all;
 bottom: 100%;
 opacity: 1;
 `), A("close", `
 transform: scale(1);
 opacity: 1;
 `), A("body", `
 transform: scale(0.75);
 opacity: 0;
 `)])]), A("close", `
 opacity: 0;
 transform: scale(0.75);
 position: absolute;
 top: 0;
 right: 0;
 bottom: 0;
 left: 0;
 display: flex;
 align-items: center;
 justify-content: center;
 transition: transform .3s var(--n-bezier), opacity .3s var(--n-bezier);
 `), A("menu", `
 position: absolute;
 bottom: calc(100% - 8px);
 display: flex;
 flex-direction: column;
 opacity: 0;
 pointer-events: none;
 transition:
 opacity .3s var(--n-bezier),
 bottom .3s var(--n-bezier); 
 `, [B("> *", `
 margin-bottom: 16px;
 `), R("float-button", `
 position: relative !important;
 `)])]), cm = Object.assign(Object.assign({}, we.props), {
  width: {
    type: [Number, String],
    default: 40
  },
  height: {
    type: [Number, String],
    default: 40
  },
  left: [Number, String],
  right: [Number, String],
  top: [Number, String],
  bottom: [Number, String],
  shape: {
    type: String,
    default: "circle"
  },
  position: {
    type: String,
    default: "fixed"
  },
  type: {
    type: String,
    default: "default"
  },
  menuTrigger: String,
  showMenu: {
    type: Boolean,
    default: void 0
  },
  onUpdateShowMenu: {
    type: [Function, Array],
    default: void 0
  },
  "onUpdate:showMenu": {
    type: [Function, Array],
    default: void 0
  }
}), bv = ie({
  name: "FloatButton",
  props: cm,
  slots: Object,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      inlineThemeDisabled: n
    } = _e(e), r = L(null), o = we("FloatButton", "-float-button", dm, sm, e, t), i = ke(am, null), l = L(!1), a = ae(e, "showMenu"), s = zt(a, l);
    function d(g) {
      const {
        onUpdateShowMenu: y,
        "onUpdate:showMenu": S
      } = e;
      l.value = g, y && oe(y, g), S && oe(S, g);
    }
    const u = T(() => {
      const {
        self: {
          color: g,
          textColor: y,
          boxShadow: S,
          boxShadowHover: w,
          boxShadowPressed: C,
          colorHover: k,
          colorPrimary: x,
          colorPrimaryHover: z,
          textColorPrimary: $,
          borderRadiusSquare: M,
          colorPressed: V,
          colorPrimaryPressed: O
        },
        common: {
          cubicBezierEaseInOut: E
        }
      } = o.value, {
        type: I
      } = e;
      return {
        "--n-bezier": E,
        "--n-box-shadow": S,
        "--n-box-shadow-hover": w,
        "--n-box-shadow-pressed": C,
        "--n-color": I === "primary" ? x : g,
        "--n-text-color": I === "primary" ? $ : y,
        "--n-color-hover": I === "primary" ? z : k,
        "--n-color-pressed": I === "primary" ? O : V,
        "--n-border-radius-square": M
      };
    }), h = T(() => {
      const {
        width: g,
        height: y
      } = e;
      return Object.assign({
        position: i ? void 0 : e.position,
        width: ot(g),
        minHeight: ot(y)
      }, i ? null : {
        left: ot(e.left),
        right: ot(e.right),
        top: ot(e.top),
        bottom: ot(e.bottom)
      });
    }), b = T(() => i ? i.shapeRef.value : e.shape), m = () => {
      e.menuTrigger === "hover" && d(!0);
    }, f = () => {
      e.menuTrigger === "hover" && s.value && d(!1);
    }, p = () => {
      e.menuTrigger === "click" && d(!s.value);
    }, v = n ? it("float-button", T(() => e.type[0]), u, e) : void 0;
    return vt(() => {
      const g = r.value;
      g && De("mousemoveoutside", g, f);
    }), ut(() => {
      const g = r.value;
      g && He("mousemoveoutside", g, f);
    }), {
      inlineStyle: h,
      selfElRef: r,
      cssVars: n ? void 0 : u,
      mergedClsPrefix: t,
      mergedShape: b,
      mergedShowMenu: s,
      themeClass: v == null ? void 0 : v.themeClass,
      onRender: v == null ? void 0 : v.onRender,
      Mouseenter: m,
      handleMouseleave: f,
      handleClick: p
    };
  },
  render() {
    var e;
    const {
      mergedClsPrefix: t,
      cssVars: n,
      mergedShape: r,
      type: o,
      menuTrigger: i,
      mergedShowMenu: l,
      themeClass: a,
      $slots: s,
      inlineStyle: d,
      onRender: u
    } = this;
    return u == null || u(), c("div", {
      ref: "selfElRef",
      class: [`${t}-float-button`, `${t}-float-button--${r}-shape`, `${t}-float-button--${o}-type`, l && `${t}-float-button--show-menu`, a],
      style: [n, d],
      onMouseenter: this.Mouseenter,
      onMouseleave: this.handleMouseleave,
      onClick: this.handleClick,
      role: "button"
    }, c("div", {
      class: `${t}-float-button__fill`,
      "aria-hidden": !0
    }), c("div", {
      class: `${t}-float-button__body`
    }, (e = s.default) === null || e === void 0 ? void 0 : e.call(s), Ze(s.description, (h) => h ? c("div", {
      class: `${t}-float-button__description`
    }, h) : null)), i ? c("div", {
      class: `${t}-float-button__close`
    }, c(ct, {
      clsPrefix: t
    }, {
      default: () => c(ns, null)
    })) : null, i ? c("div", {
      onClick: (h) => {
        h.stopPropagation();
      },
      "data-float-button-menu": !0,
      class: `${t}-float-button__menu`
    }, Et(s.menu, () => [])) : null);
  }
}), zr = "n-form", Js = "n-form-item-insts", um = R("form", [_("inline", `
 width: 100%;
 display: inline-flex;
 align-items: flex-start;
 align-content: space-around;
 `, [R("form-item", {
  width: "auto",
  marginRight: "18px"
}, [B("&:last-child", {
  marginRight: 0
})])])]);
var fm = function(e, t, n, r) {
  function o(i) {
    return i instanceof n ? i : new n(function(l) {
      l(i);
    });
  }
  return new (n || (n = Promise))(function(i, l) {
    function a(u) {
      try {
        d(r.next(u));
      } catch (h) {
        l(h);
      }
    }
    function s(u) {
      try {
        d(r.throw(u));
      } catch (h) {
        l(h);
      }
    }
    function d(u) {
      u.done ? i(u.value) : o(u.value).then(a, s);
    }
    d((r = r.apply(e, t || [])).next());
  });
};
const hm = Object.assign(Object.assign({}, we.props), {
  inline: Boolean,
  labelWidth: [Number, String],
  labelAlign: String,
  labelPlacement: {
    type: String,
    default: "top"
  },
  model: {
    type: Object,
    default: () => {
    }
  },
  rules: Object,
  disabled: Boolean,
  size: String,
  showRequireMark: {
    type: Boolean,
    default: void 0
  },
  requireMarkPlacement: String,
  showFeedback: {
    type: Boolean,
    default: !0
  },
  onSubmit: {
    type: Function,
    default: (e) => {
      e.preventDefault();
    }
  },
  showLabel: {
    type: Boolean,
    default: void 0
  },
  validateMessages: Object
}), gv = ie({
  name: "Form",
  props: hm,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(e);
    we("Form", "-form", um, Zs, e, t);
    const n = {}, r = L(void 0), o = (s) => {
      const d = r.value;
      (d === void 0 || s >= d) && (r.value = s);
    };
    function i(s) {
      return fm(this, arguments, void 0, function* (d, u = () => !0) {
        return yield new Promise((h, b) => {
          const m = [];
          for (const f of Rn(n)) {
            const p = n[f];
            for (const v of p)
              v.path && m.push(v.internalValidate(null, u));
          }
          Promise.all(m).then((f) => {
            const p = f.some((y) => !y.valid), v = [], g = [];
            f.forEach((y) => {
              var S, w;
              !((S = y.errors) === null || S === void 0) && S.length && v.push(y.errors), !((w = y.warnings) === null || w === void 0) && w.length && g.push(y.warnings);
            }), d && d(v.length ? v : void 0, {
              warnings: g.length ? g : void 0
            }), p ? b(v.length ? v : void 0) : h({
              warnings: g.length ? g : void 0
            });
          });
        });
      });
    }
    function l() {
      for (const s of Rn(n)) {
        const d = n[s];
        for (const u of d)
          u.restoreValidation();
      }
    }
    return We(zr, {
      props: e,
      maxChildLabelWidthRef: r,
      deriveMaxChildLabelWidth: o
    }), We(Js, {
      formItems: n
    }), Object.assign({
      validate: i,
      restoreValidation: l
    }, {
      mergedClsPrefix: t
    });
  },
  render() {
    const {
      mergedClsPrefix: e
    } = this;
    return c("form", {
      class: [`${e}-form`, this.inline && `${e}-form--inline`],
      onSubmit: this.onSubmit
    }, this.$slots);
  }
});
function yn() {
  return yn = Object.assign ? Object.assign.bind() : function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  }, yn.apply(this, arguments);
}
function pm(e, t) {
  e.prototype = Object.create(t.prototype), e.prototype.constructor = e, yr(e, t);
}
function ii(e) {
  return ii = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(n) {
    return n.__proto__ || Object.getPrototypeOf(n);
  }, ii(e);
}
function yr(e, t) {
  return yr = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(r, o) {
    return r.__proto__ = o, r;
  }, yr(e, t);
}
function bm() {
  if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham) return !1;
  if (typeof Proxy == "function") return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch (e) {
    return !1;
  }
}
function Vr(e, t, n) {
  return bm() ? Vr = Reflect.construct.bind() : Vr = function(o, i, l) {
    var a = [null];
    a.push.apply(a, i);
    var s = Function.bind.apply(o, a), d = new s();
    return l && yr(d, l.prototype), d;
  }, Vr.apply(null, arguments);
}
function gm(e) {
  return Function.toString.call(e).indexOf("[native code]") !== -1;
}
function ai(e) {
  var t = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return ai = function(r) {
    if (r === null || !gm(r)) return r;
    if (typeof r != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof t != "undefined") {
      if (t.has(r)) return t.get(r);
      t.set(r, o);
    }
    function o() {
      return Vr(r, arguments, ii(this).constructor);
    }
    return o.prototype = Object.create(r.prototype, {
      constructor: {
        value: o,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), yr(o, r);
  }, ai(e);
}
var mm = /%[sdj%]/g, vm = function() {
};
typeof process != "undefined" && process.env;
function li(e) {
  if (!e || !e.length) return null;
  var t = {};
  return e.forEach(function(n) {
    var r = n.field;
    t[r] = t[r] || [], t[r].push(n);
  }), t;
}
function _t(e) {
  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
    n[r - 1] = arguments[r];
  var o = 0, i = n.length;
  if (typeof e == "function")
    return e.apply(null, n);
  if (typeof e == "string") {
    var l = e.replace(mm, function(a) {
      if (a === "%%")
        return "%";
      if (o >= i)
        return a;
      switch (a) {
        case "%s":
          return String(n[o++]);
        case "%d":
          return Number(n[o++]);
        case "%j":
          try {
            return JSON.stringify(n[o++]);
          } catch (s) {
            return "[Circular]";
          }
          break;
        default:
          return a;
      }
    });
    return l;
  }
  return e;
}
function xm(e) {
  return e === "string" || e === "url" || e === "hex" || e === "email" || e === "date" || e === "pattern";
}
function pt(e, t) {
  return !!(e == null || t === "array" && Array.isArray(e) && !e.length || xm(t) && typeof e == "string" && !e);
}
function ym(e, t, n) {
  var r = [], o = 0, i = e.length;
  function l(a) {
    r.push.apply(r, a || []), o++, o === i && n(r);
  }
  e.forEach(function(a) {
    t(a, l);
  });
}
function Qa(e, t, n) {
  var r = 0, o = e.length;
  function i(l) {
    if (l && l.length) {
      n(l);
      return;
    }
    var a = r;
    r = r + 1, a < o ? t(e[a], i) : n([]);
  }
  i([]);
}
function wm(e) {
  var t = [];
  return Object.keys(e).forEach(function(n) {
    t.push.apply(t, e[n] || []);
  }), t;
}
var el = /* @__PURE__ */ function(e) {
  pm(t, e);
  function t(n, r) {
    var o;
    return o = e.call(this, "Async Validation Error") || this, o.errors = n, o.fields = r, o;
  }
  return t;
}(/* @__PURE__ */ ai(Error));
function Cm(e, t, n, r, o) {
  if (t.first) {
    var i = new Promise(function(b, m) {
      var f = function(g) {
        return r(g), g.length ? m(new el(g, li(g))) : b(o);
      }, p = wm(e);
      Qa(p, n, f);
    });
    return i.catch(function(b) {
      return b;
    }), i;
  }
  var l = t.firstFields === !0 ? Object.keys(e) : t.firstFields || [], a = Object.keys(e), s = a.length, d = 0, u = [], h = new Promise(function(b, m) {
    var f = function(v) {
      if (u.push.apply(u, v), d++, d === s)
        return r(u), u.length ? m(new el(u, li(u))) : b(o);
    };
    a.length || (r(u), b(o)), a.forEach(function(p) {
      var v = e[p];
      l.indexOf(p) !== -1 ? Qa(v, n, f) : ym(v, n, f);
    });
  });
  return h.catch(function(b) {
    return b;
  }), h;
}
function Sm(e) {
  return !!(e && e.message !== void 0);
}
function km(e, t) {
  for (var n = e, r = 0; r < t.length; r++) {
    if (n == null)
      return n;
    n = n[t[r]];
  }
  return n;
}
function tl(e, t) {
  return function(n) {
    var r;
    return e.fullFields ? r = km(t, e.fullFields) : r = t[n.field || e.fullField], Sm(n) ? (n.field = n.field || e.fullField, n.fieldValue = r, n) : {
      message: typeof n == "function" ? n() : n,
      fieldValue: r,
      field: n.field || e.fullField
    };
  };
}
function nl(e, t) {
  if (t) {
    for (var n in t)
      if (t.hasOwnProperty(n)) {
        var r = t[n];
        typeof r == "object" && typeof e[n] == "object" ? e[n] = yn({}, e[n], r) : e[n] = r;
      }
  }
  return e;
}
var Qs = function(t, n, r, o, i, l) {
  t.required && (!r.hasOwnProperty(t.field) || pt(n, l || t.type)) && o.push(_t(i.messages.required, t.fullField));
}, Rm = function(t, n, r, o, i) {
  (/^\s+$/.test(n) || n === "") && o.push(_t(i.messages.whitespace, t.fullField));
}, jr, Pm = function() {
  if (jr)
    return jr;
  var e = "[a-fA-F\\d:]", t = function(w) {
    return w && w.includeBoundaries ? "(?:(?<=\\s|^)(?=" + e + ")|(?<=" + e + ")(?=\\s|$))" : "";
  }, n = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}", r = "[a-fA-F\\d]{1,4}", o = (`
(?:
(?:` + r + ":){7}(?:" + r + `|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:` + r + ":){6}(?:" + n + "|:" + r + `|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:` + r + ":){5}(?::" + n + "|(?::" + r + `){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:` + r + ":){4}(?:(?::" + r + "){0,1}:" + n + "|(?::" + r + `){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:` + r + ":){3}(?:(?::" + r + "){0,2}:" + n + "|(?::" + r + `){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:` + r + ":){2}(?:(?::" + r + "){0,3}:" + n + "|(?::" + r + `){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:` + r + ":){1}(?:(?::" + r + "){0,4}:" + n + "|(?::" + r + `){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::` + r + "){0,5}:" + n + "|(?::" + r + `){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`).replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim(), i = new RegExp("(?:^" + n + "$)|(?:^" + o + "$)"), l = new RegExp("^" + n + "$"), a = new RegExp("^" + o + "$"), s = function(w) {
    return w && w.exact ? i : new RegExp("(?:" + t(w) + n + t(w) + ")|(?:" + t(w) + o + t(w) + ")", "g");
  };
  s.v4 = function(S) {
    return S && S.exact ? l : new RegExp("" + t(S) + n + t(S), "g");
  }, s.v6 = function(S) {
    return S && S.exact ? a : new RegExp("" + t(S) + o + t(S), "g");
  };
  var d = "(?:(?:[a-z]+:)?//)", u = "(?:\\S+(?::\\S*)?@)?", h = s.v4().source, b = s.v6().source, m = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)", f = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*", p = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))", v = "(?::\\d{2,5})?", g = '(?:[/?#][^\\s"]*)?', y = "(?:" + d + "|www\\.)" + u + "(?:localhost|" + h + "|" + b + "|" + m + f + p + ")" + v + g;
  return jr = new RegExp("(?:^" + y + "$)", "i"), jr;
}, rl = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
  // url: new RegExp(
  //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
  //   'i',
  // ),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
}, sr = {
  integer: function(t) {
    return sr.number(t) && parseInt(t, 10) === t;
  },
  float: function(t) {
    return sr.number(t) && !sr.integer(t);
  },
  array: function(t) {
    return Array.isArray(t);
  },
  regexp: function(t) {
    if (t instanceof RegExp)
      return !0;
    try {
      return !!new RegExp(t);
    } catch (n) {
      return !1;
    }
  },
  date: function(t) {
    return typeof t.getTime == "function" && typeof t.getMonth == "function" && typeof t.getYear == "function" && !isNaN(t.getTime());
  },
  number: function(t) {
    return isNaN(t) ? !1 : typeof t == "number";
  },
  object: function(t) {
    return typeof t == "object" && !sr.array(t);
  },
  method: function(t) {
    return typeof t == "function";
  },
  email: function(t) {
    return typeof t == "string" && t.length <= 320 && !!t.match(rl.email);
  },
  url: function(t) {
    return typeof t == "string" && t.length <= 2048 && !!t.match(Pm());
  },
  hex: function(t) {
    return typeof t == "string" && !!t.match(rl.hex);
  }
}, zm = function(t, n, r, o, i) {
  if (t.required && n === void 0) {
    Qs(t, n, r, o, i);
    return;
  }
  var l = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"], a = t.type;
  l.indexOf(a) > -1 ? sr[a](n) || o.push(_t(i.messages.types[a], t.fullField, t.type)) : a && typeof n !== t.type && o.push(_t(i.messages.types[a], t.fullField, t.type));
}, $m = function(t, n, r, o, i) {
  var l = typeof t.len == "number", a = typeof t.min == "number", s = typeof t.max == "number", d = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, u = n, h = null, b = typeof n == "number", m = typeof n == "string", f = Array.isArray(n);
  if (b ? h = "number" : m ? h = "string" : f && (h = "array"), !h)
    return !1;
  f && (u = n.length), m && (u = n.replace(d, "_").length), l ? u !== t.len && o.push(_t(i.messages[h].len, t.fullField, t.len)) : a && !s && u < t.min ? o.push(_t(i.messages[h].min, t.fullField, t.min)) : s && !a && u > t.max ? o.push(_t(i.messages[h].max, t.fullField, t.max)) : a && s && (u < t.min || u > t.max) && o.push(_t(i.messages[h].range, t.fullField, t.min, t.max));
}, _n = "enum", Tm = function(t, n, r, o, i) {
  t[_n] = Array.isArray(t[_n]) ? t[_n] : [], t[_n].indexOf(n) === -1 && o.push(_t(i.messages[_n], t.fullField, t[_n].join(", ")));
}, Mm = function(t, n, r, o, i) {
  if (t.pattern) {
    if (t.pattern instanceof RegExp)
      t.pattern.lastIndex = 0, t.pattern.test(n) || o.push(_t(i.messages.pattern.mismatch, t.fullField, n, t.pattern));
    else if (typeof t.pattern == "string") {
      var l = new RegExp(t.pattern);
      l.test(n) || o.push(_t(i.messages.pattern.mismatch, t.fullField, n, t.pattern));
    }
  }
}, Ie = {
  required: Qs,
  whitespace: Rm,
  type: zm,
  range: $m,
  enum: Tm,
  pattern: Mm
}, Fm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n, "string") && !t.required)
      return r();
    Ie.required(t, n, o, l, i, "string"), pt(n, "string") || (Ie.type(t, n, o, l, i), Ie.range(t, n, o, l, i), Ie.pattern(t, n, o, l, i), t.whitespace === !0 && Ie.whitespace(t, n, o, l, i));
  }
  r(l);
}, Om = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && Ie.type(t, n, o, l, i);
  }
  r(l);
}, Bm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (n === "" && (n = void 0), pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && (Ie.type(t, n, o, l, i), Ie.range(t, n, o, l, i));
  }
  r(l);
}, Em = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && Ie.type(t, n, o, l, i);
  }
  r(l);
}, Im = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), pt(n) || Ie.type(t, n, o, l, i);
  }
  r(l);
}, _m = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && (Ie.type(t, n, o, l, i), Ie.range(t, n, o, l, i));
  }
  r(l);
}, Am = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && (Ie.type(t, n, o, l, i), Ie.range(t, n, o, l, i));
  }
  r(l);
}, Lm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (n == null && !t.required)
      return r();
    Ie.required(t, n, o, l, i, "array"), n != null && (Ie.type(t, n, o, l, i), Ie.range(t, n, o, l, i));
  }
  r(l);
}, Hm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && Ie.type(t, n, o, l, i);
  }
  r(l);
}, Dm = "enum", jm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i), n !== void 0 && Ie[Dm](t, n, o, l, i);
  }
  r(l);
}, Wm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n, "string") && !t.required)
      return r();
    Ie.required(t, n, o, l, i), pt(n, "string") || Ie.pattern(t, n, o, l, i);
  }
  r(l);
}, Nm = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n, "date") && !t.required)
      return r();
    if (Ie.required(t, n, o, l, i), !pt(n, "date")) {
      var s;
      n instanceof Date ? s = n : s = new Date(n), Ie.type(t, s, o, l, i), s && Ie.range(t, s.getTime(), o, l, i);
    }
  }
  r(l);
}, Vm = function(t, n, r, o, i) {
  var l = [], a = Array.isArray(n) ? "array" : typeof n;
  Ie.required(t, n, o, l, i, a), r(l);
}, Wo = function(t, n, r, o, i) {
  var l = t.type, a = [], s = t.required || !t.required && o.hasOwnProperty(t.field);
  if (s) {
    if (pt(n, l) && !t.required)
      return r();
    Ie.required(t, n, o, a, i, l), pt(n, l) || Ie.type(t, n, o, a, i);
  }
  r(a);
}, Km = function(t, n, r, o, i) {
  var l = [], a = t.required || !t.required && o.hasOwnProperty(t.field);
  if (a) {
    if (pt(n) && !t.required)
      return r();
    Ie.required(t, n, o, l, i);
  }
  r(l);
}, pr = {
  string: Fm,
  method: Om,
  number: Bm,
  boolean: Em,
  regexp: Im,
  integer: _m,
  float: Am,
  array: Lm,
  object: Hm,
  enum: jm,
  pattern: Wm,
  date: Nm,
  url: Wo,
  hex: Wo,
  email: Wo,
  required: Vm,
  any: Km
};
function si() {
  return {
    default: "Validation error on field %s",
    required: "%s is required",
    enum: "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      boolean: "%s is not a %s",
      integer: "%s is not an %s",
      float: "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function() {
      var t = JSON.parse(JSON.stringify(this));
      return t.clone = this.clone, t;
    }
  };
}
var di = si(), Vn = /* @__PURE__ */ function() {
  function e(n) {
    this.rules = null, this._messages = di, this.define(n);
  }
  var t = e.prototype;
  return t.define = function(r) {
    var o = this;
    if (!r)
      throw new Error("Cannot configure a schema with no rules");
    if (typeof r != "object" || Array.isArray(r))
      throw new Error("Rules must be an object");
    this.rules = {}, Object.keys(r).forEach(function(i) {
      var l = r[i];
      o.rules[i] = Array.isArray(l) ? l : [l];
    });
  }, t.messages = function(r) {
    return r && (this._messages = nl(si(), r)), this._messages;
  }, t.validate = function(r, o, i) {
    var l = this;
    o === void 0 && (o = {}), i === void 0 && (i = function() {
    });
    var a = r, s = o, d = i;
    if (typeof s == "function" && (d = s, s = {}), !this.rules || Object.keys(this.rules).length === 0)
      return d && d(null, a), Promise.resolve(a);
    function u(p) {
      var v = [], g = {};
      function y(w) {
        if (Array.isArray(w)) {
          var C;
          v = (C = v).concat.apply(C, w);
        } else
          v.push(w);
      }
      for (var S = 0; S < p.length; S++)
        y(p[S]);
      v.length ? (g = li(v), d(v, g)) : d(null, a);
    }
    if (s.messages) {
      var h = this.messages();
      h === di && (h = si()), nl(h, s.messages), s.messages = h;
    } else
      s.messages = this.messages();
    var b = {}, m = s.keys || Object.keys(this.rules);
    m.forEach(function(p) {
      var v = l.rules[p], g = a[p];
      v.forEach(function(y) {
        var S = y;
        typeof S.transform == "function" && (a === r && (a = yn({}, a)), g = a[p] = S.transform(g)), typeof S == "function" ? S = {
          validator: S
        } : S = yn({}, S), S.validator = l.getValidationMethod(S), S.validator && (S.field = p, S.fullField = S.fullField || p, S.type = l.getType(S), b[p] = b[p] || [], b[p].push({
          rule: S,
          value: g,
          source: a,
          field: p
        }));
      });
    });
    var f = {};
    return Cm(b, s, function(p, v) {
      var g = p.rule, y = (g.type === "object" || g.type === "array") && (typeof g.fields == "object" || typeof g.defaultField == "object");
      y = y && (g.required || !g.required && p.value), g.field = p.field;
      function S(k, x) {
        return yn({}, x, {
          fullField: g.fullField + "." + k,
          fullFields: g.fullFields ? [].concat(g.fullFields, [k]) : [k]
        });
      }
      function w(k) {
        k === void 0 && (k = []);
        var x = Array.isArray(k) ? k : [k];
        !s.suppressWarning && x.length && e.warning("async-validator:", x), x.length && g.message !== void 0 && (x = [].concat(g.message));
        var z = x.map(tl(g, a));
        if (s.first && z.length)
          return f[g.field] = 1, v(z);
        if (!y)
          v(z);
        else {
          if (g.required && !p.value)
            return g.message !== void 0 ? z = [].concat(g.message).map(tl(g, a)) : s.error && (z = [s.error(g, _t(s.messages.required, g.field))]), v(z);
          var $ = {};
          g.defaultField && Object.keys(p.value).map(function(O) {
            $[O] = g.defaultField;
          }), $ = yn({}, $, p.rule.fields);
          var M = {};
          Object.keys($).forEach(function(O) {
            var E = $[O], I = Array.isArray(E) ? E : [E];
            M[O] = I.map(S.bind(null, O));
          });
          var V = new e(M);
          V.messages(s.messages), p.rule.options && (p.rule.options.messages = s.messages, p.rule.options.error = s.error), V.validate(p.value, p.rule.options || s, function(O) {
            var E = [];
            z && z.length && E.push.apply(E, z), O && O.length && E.push.apply(E, O), v(E.length ? E : null);
          });
        }
      }
      var C;
      if (g.asyncValidator)
        C = g.asyncValidator(g, p.value, w, p.source, s);
      else if (g.validator) {
        try {
          C = g.validator(g, p.value, w, p.source, s);
        } catch (k) {
          console.error == null || console.error(k), s.suppressValidatorError || setTimeout(function() {
            throw k;
          }, 0), w(k.message);
        }
        C === !0 ? w() : C === !1 ? w(typeof g.message == "function" ? g.message(g.fullField || g.field) : g.message || (g.fullField || g.field) + " fails") : C instanceof Array ? w(C) : C instanceof Error && w(C.message);
      }
      C && C.then && C.then(function() {
        return w();
      }, function(k) {
        return w(k);
      });
    }, function(p) {
      u(p);
    }, a);
  }, t.getType = function(r) {
    if (r.type === void 0 && r.pattern instanceof RegExp && (r.type = "pattern"), typeof r.validator != "function" && r.type && !pr.hasOwnProperty(r.type))
      throw new Error(_t("Unknown rule type %s", r.type));
    return r.type || "string";
  }, t.getValidationMethod = function(r) {
    if (typeof r.validator == "function")
      return r.validator;
    var o = Object.keys(r), i = o.indexOf("message");
    return i !== -1 && o.splice(i, 1), o.length === 1 && o[0] === "required" ? pr.required : pr[this.getType(r)] || void 0;
  }, e;
}();
Vn.register = function(t, n) {
  if (typeof n != "function")
    throw new Error("Cannot register a validator by type, validator is not a function");
  pr[t] = n;
};
Vn.warning = vm;
Vn.messages = di;
Vn.validators = pr;
const {
  cubicBezierEaseInOut: ol
} = pn;
function Um({
  name: e = "fade-down",
  fromOffset: t = "-4px",
  enterDuration: n = ".3s",
  leaveDuration: r = ".3s",
  enterCubicBezier: o = ol,
  leaveCubicBezier: i = ol
} = {}) {
  return [B(`&.${e}-transition-enter-from, &.${e}-transition-leave-to`, {
    opacity: 0,
    transform: `translateY(${t})`
  }), B(`&.${e}-transition-enter-to, &.${e}-transition-leave-from`, {
    opacity: 1,
    transform: "translateY(0)"
  }), B(`&.${e}-transition-leave-active`, {
    transition: `opacity ${r} ${i}, transform ${r} ${i}`
  }), B(`&.${e}-transition-enter-active`, {
    transition: `opacity ${n} ${o}, transform ${n} ${o}`
  })];
}
const qm = R("form-item", `
 display: grid;
 line-height: var(--n-line-height);
`, [R("form-item-label", `
 grid-area: label;
 align-items: center;
 line-height: 1.25;
 text-align: var(--n-label-text-align);
 font-size: var(--n-label-font-size);
 min-height: var(--n-label-height);
 padding: var(--n-label-padding);
 color: var(--n-label-text-color);
 transition: color .3s var(--n-bezier);
 box-sizing: border-box;
 font-weight: var(--n-label-font-weight);
 `, [A("asterisk", `
 white-space: nowrap;
 user-select: none;
 -webkit-user-select: none;
 color: var(--n-asterisk-color);
 transition: color .3s var(--n-bezier);
 `), A("asterisk-placeholder", `
 grid-area: mark;
 user-select: none;
 -webkit-user-select: none;
 visibility: hidden; 
 `)]), R("form-item-blank", `
 grid-area: blank;
 min-height: var(--n-blank-height);
 `), _("auto-label-width", [R("form-item-label", "white-space: nowrap;")]), _("left-labelled", `
 grid-template-areas:
 "label blank"
 "label feedback";
 grid-template-columns: auto minmax(0, 1fr);
 grid-template-rows: auto 1fr;
 align-items: flex-start;
 `, [R("form-item-label", `
 display: grid;
 grid-template-columns: 1fr auto;
 min-height: var(--n-blank-height);
 height: auto;
 box-sizing: border-box;
 flex-shrink: 0;
 flex-grow: 0;
 `, [_("reverse-columns-space", `
 grid-template-columns: auto 1fr;
 `), _("left-mark", `
 grid-template-areas:
 "mark text"
 ". text";
 `), _("right-mark", `
 grid-template-areas: 
 "text mark"
 "text .";
 `), _("right-hanging-mark", `
 grid-template-areas: 
 "text mark"
 "text .";
 `), A("text", `
 grid-area: text; 
 `), A("asterisk", `
 grid-area: mark; 
 align-self: end;
 `)])]), _("top-labelled", `
 grid-template-areas:
 "label"
 "blank"
 "feedback";
 grid-template-rows: minmax(var(--n-label-height), auto) 1fr;
 grid-template-columns: minmax(0, 100%);
 `, [_("no-label", `
 grid-template-areas:
 "blank"
 "feedback";
 grid-template-rows: 1fr;
 `), R("form-item-label", `
 display: flex;
 align-items: flex-start;
 justify-content: var(--n-label-text-align);
 `)]), R("form-item-blank", `
 box-sizing: border-box;
 display: flex;
 align-items: center;
 position: relative;
 `), R("form-item-feedback-wrapper", `
 grid-area: feedback;
 box-sizing: border-box;
 min-height: var(--n-feedback-height);
 font-size: var(--n-feedback-font-size);
 line-height: 1.25;
 transform-origin: top left;
 `, [B("&:not(:empty)", `
 padding: var(--n-feedback-padding);
 `), R("form-item-feedback", {
  transition: "color .3s var(--n-bezier)",
  color: "var(--n-feedback-text-color)"
}, [_("warning", {
  color: "var(--n-feedback-text-color-warning)"
}), _("error", {
  color: "var(--n-feedback-text-color-error)"
}), Um({
  fromOffset: "-3px",
  enterDuration: ".3s",
  leaveDuration: ".2s"
})])])]);
function Gm(e) {
  const t = ke(zr, null);
  return {
    mergedSize: T(() => e.size !== void 0 ? e.size : (t == null ? void 0 : t.props.size) !== void 0 ? t.props.size : "medium")
  };
}
function Xm(e) {
  const t = ke(zr, null), n = T(() => {
    const {
      labelPlacement: f
    } = e;
    return f !== void 0 ? f : t != null && t.props.labelPlacement ? t.props.labelPlacement : "top";
  }), r = T(() => n.value === "left" && (e.labelWidth === "auto" || (t == null ? void 0 : t.props.labelWidth) === "auto")), o = T(() => {
    if (n.value === "top") return;
    const {
      labelWidth: f
    } = e;
    if (f !== void 0 && f !== "auto")
      return ot(f);
    if (r.value) {
      const p = t == null ? void 0 : t.maxChildLabelWidthRef.value;
      return p !== void 0 ? ot(p) : void 0;
    }
    if ((t == null ? void 0 : t.props.labelWidth) !== void 0)
      return ot(t.props.labelWidth);
  }), i = T(() => {
    const {
      labelAlign: f
    } = e;
    if (f) return f;
    if (t != null && t.props.labelAlign) return t.props.labelAlign;
  }), l = T(() => {
    var f;
    return [(f = e.labelProps) === null || f === void 0 ? void 0 : f.style, e.labelStyle, {
      width: o.value
    }];
  }), a = T(() => {
    const {
      showRequireMark: f
    } = e;
    return f !== void 0 ? f : t == null ? void 0 : t.props.showRequireMark;
  }), s = T(() => {
    const {
      requireMarkPlacement: f
    } = e;
    return f !== void 0 ? f : (t == null ? void 0 : t.props.requireMarkPlacement) || "right";
  }), d = L(!1), u = L(!1), h = T(() => {
    const {
      validationStatus: f
    } = e;
    if (f !== void 0) return f;
    if (d.value) return "error";
    if (u.value) return "warning";
  }), b = T(() => {
    const {
      showFeedback: f
    } = e;
    return f !== void 0 ? f : (t == null ? void 0 : t.props.showFeedback) !== void 0 ? t.props.showFeedback : !0;
  }), m = T(() => {
    const {
      showLabel: f
    } = e;
    return f !== void 0 ? f : (t == null ? void 0 : t.props.showLabel) !== void 0 ? t.props.showLabel : !0;
  });
  return {
    validationErrored: d,
    validationWarned: u,
    mergedLabelStyle: l,
    mergedLabelPlacement: n,
    mergedLabelAlign: i,
    mergedShowRequireMark: a,
    mergedRequireMarkPlacement: s,
    mergedValidationStatus: h,
    mergedShowFeedback: b,
    mergedShowLabel: m,
    isAutoLabelWidth: r
  };
}
function Ym(e) {
  const t = ke(zr, null), n = T(() => {
    const {
      rulePath: l
    } = e;
    if (l !== void 0) return l;
    const {
      path: a
    } = e;
    if (a !== void 0) return a;
  }), r = T(() => {
    const l = [], {
      rule: a
    } = e;
    if (a !== void 0 && (Array.isArray(a) ? l.push(...a) : l.push(a)), t) {
      const {
        rules: s
      } = t.props, {
        value: d
      } = n;
      if (s !== void 0 && d !== void 0) {
        const u = Kr(s, d);
        u !== void 0 && (Array.isArray(u) ? l.push(...u) : l.push(u));
      }
    }
    return l;
  }), o = T(() => r.value.some((l) => l.required)), i = T(() => o.value || e.required);
  return {
    mergedRules: r,
    mergedRequired: i
  };
}
var il = function(e, t, n, r) {
  function o(i) {
    return i instanceof n ? i : new n(function(l) {
      l(i);
    });
  }
  return new (n || (n = Promise))(function(i, l) {
    function a(u) {
      try {
        d(r.next(u));
      } catch (h) {
        l(h);
      }
    }
    function s(u) {
      try {
        d(r.throw(u));
      } catch (h) {
        l(h);
      }
    }
    function d(u) {
      u.done ? i(u.value) : o(u.value).then(a, s);
    }
    d((r = r.apply(e, t || [])).next());
  });
};
const Zm = Object.assign(Object.assign({}, we.props), {
  label: String,
  labelWidth: [Number, String],
  labelStyle: [String, Object],
  labelAlign: String,
  labelPlacement: String,
  path: String,
  first: Boolean,
  rulePath: String,
  required: Boolean,
  showRequireMark: {
    type: Boolean,
    default: void 0
  },
  requireMarkPlacement: String,
  showFeedback: {
    type: Boolean,
    default: void 0
  },
  rule: [Object, Array],
  size: String,
  ignorePathChange: Boolean,
  validationStatus: String,
  feedback: String,
  feedbackClass: String,
  feedbackStyle: [String, Object],
  showLabel: {
    type: Boolean,
    default: void 0
  },
  labelProps: Object
});
function al(e, t) {
  return (...n) => {
    try {
      const r = e(...n);
      return !t && (typeof r == "boolean" || r instanceof Error || Array.isArray(r)) || r != null && r.then ? r : (r === void 0 || Kt("form-item/validate", `You return a ${typeof r} typed value in the validator method, which is not recommended. Please use ${t ? "`Promise`" : "`boolean`, `Error` or `Promise`"} typed value instead.`), !0);
    } catch (r) {
      Kt("form-item/validate", "An error is catched in the validation, so the validation won't be done. Your callback in `validate` method of `n-form` or `n-form-item` won't be called in this validation."), console.error(r);
      return;
    }
  };
}
const mv = ie({
  name: "FormItem",
  props: Zm,
  setup(e) {
    wc(Js, "formItems", ae(e, "path"));
    const {
      mergedClsPrefixRef: t,
      inlineThemeDisabled: n
    } = _e(e), r = ke(zr, null), o = Gm(e), i = Xm(e), {
      validationErrored: l,
      validationWarned: a
    } = i, {
      mergedRequired: s,
      mergedRules: d
    } = Ym(e), {
      mergedSize: u
    } = o, {
      mergedLabelPlacement: h,
      mergedLabelAlign: b,
      mergedRequireMarkPlacement: m
    } = i, f = L([]), p = L(jn()), v = r ? ae(r.props, "disabled") : L(!1), g = we("Form", "-form-item", qm, Zs, e, t);
    je(ae(e, "path"), () => {
      e.ignorePathChange || y();
    });
    function y() {
      f.value = [], l.value = !1, a.value = !1, e.feedback && (p.value = jn());
    }
    const S = (...I) => il(this, [...I], void 0, function* (F = null, N = () => !0, W = {
      suppressWarning: !0
    }) {
      const {
        path: X
      } = e;
      W ? W.first || (W.first = e.first) : W = {};
      const {
        value: re
      } = d, Q = r ? Kr(r.props.model, X || "") : void 0, G = {}, j = {}, q = (F ? re.filter((ye) => Array.isArray(ye.trigger) ? ye.trigger.includes(F) : ye.trigger === F) : re).filter(N).map((ye, Fe) => {
        const Te = Object.assign({}, ye);
        if (Te.validator && (Te.validator = al(Te.validator, !1)), Te.asyncValidator && (Te.asyncValidator = al(Te.asyncValidator, !0)), Te.renderMessage) {
          const Qe = `__renderMessage__${Fe}`;
          j[Qe] = Te.message, Te.message = Qe, G[Qe] = Te.renderMessage;
        }
        return Te;
      }), Z = q.filter((ye) => ye.level !== "warning"), le = q.filter((ye) => ye.level === "warning"), ue = {
        valid: !0,
        errors: void 0,
        warnings: void 0
      };
      if (!q.length) return ue;
      const be = X != null ? X : "__n_no_path__", Re = new Vn({
        [be]: Z
      }), K = new Vn({
        [be]: le
      }), {
        validateMessages: fe
      } = (r == null ? void 0 : r.props) || {};
      fe && (Re.messages(fe), K.messages(fe));
      const Me = (ye) => {
        f.value = ye.map((Fe) => {
          const Te = (Fe == null ? void 0 : Fe.message) || "";
          return {
            key: Te,
            render: () => Te.startsWith("__renderMessage__") ? G[Te]() : Te
          };
        }), ye.forEach((Fe) => {
          var Te;
          !((Te = Fe.message) === null || Te === void 0) && Te.startsWith("__renderMessage__") && (Fe.message = j[Fe.message]);
        });
      };
      if (Z.length) {
        const ye = yield new Promise((Fe) => {
          Re.validate({
            [be]: Q
          }, W, Fe);
        });
        ye != null && ye.length && (ue.valid = !1, ue.errors = ye, Me(ye));
      }
      if (le.length && !ue.errors) {
        const ye = yield new Promise((Fe) => {
          K.validate({
            [be]: Q
          }, W, Fe);
        });
        ye != null && ye.length && (Me(ye), ue.warnings = ye);
      }
      return !ue.errors && !ue.warnings ? y() : (l.value = !!ue.errors, a.value = !!ue.warnings), ue;
    });
    function w() {
      S("blur");
    }
    function C() {
      S("change");
    }
    function k() {
      S("focus");
    }
    function x() {
      S("input");
    }
    function z(I, F) {
      return il(this, void 0, void 0, function* () {
        let N, W, X, re;
        return typeof I == "string" ? (N = I, W = F) : I !== null && typeof I == "object" && (N = I.trigger, W = I.callback, X = I.shouldRuleBeApplied, re = I.options), yield new Promise((Q, G) => {
          S(N, X, re).then(({
            valid: j,
            errors: q,
            warnings: Z
          }) => {
            j ? (W && W(void 0, {
              warnings: Z
            }), Q({
              warnings: Z
            })) : (W && W(q, {
              warnings: Z
            }), G(q));
          });
        });
      });
    }
    We(Zo, {
      path: ae(e, "path"),
      disabled: v,
      mergedSize: o.mergedSize,
      mergedValidationStatus: i.mergedValidationStatus,
      restoreValidation: y,
      handleContentBlur: w,
      handleContentChange: C,
      handleContentFocus: k,
      handleContentInput: x
    });
    const $ = {
      validate: z,
      restoreValidation: y,
      internalValidate: S
    }, M = L(null);
    vt(() => {
      if (!i.isAutoLabelWidth.value) return;
      const I = M.value;
      if (I !== null) {
        const F = I.style.whiteSpace;
        I.style.whiteSpace = "nowrap", I.style.width = "", r == null || r.deriveMaxChildLabelWidth(Number(getComputedStyle(I).width.slice(0, -2))), I.style.whiteSpace = F;
      }
    });
    const V = T(() => {
      var I;
      const {
        value: F
      } = u, {
        value: N
      } = h, W = N === "top" ? "vertical" : "horizontal", {
        common: {
          cubicBezierEaseInOut: X
        },
        self: {
          labelTextColor: re,
          asteriskColor: Q,
          lineHeight: G,
          feedbackTextColor: j,
          feedbackTextColorWarning: q,
          feedbackTextColorError: Z,
          feedbackPadding: le,
          labelFontWeight: ue,
          [J("labelHeight", F)]: be,
          [J("blankHeight", F)]: Re,
          [J("feedbackFontSize", F)]: K,
          [J("feedbackHeight", F)]: fe,
          [J("labelPadding", W)]: Me,
          [J("labelTextAlign", W)]: ye,
          [J(J("labelFontSize", N), F)]: Fe
        }
      } = g.value;
      let Te = (I = b.value) !== null && I !== void 0 ? I : ye;
      return N === "top" && (Te = Te === "right" ? "flex-end" : "flex-start"), {
        "--n-bezier": X,
        "--n-line-height": G,
        "--n-blank-height": Re,
        "--n-label-font-size": Fe,
        "--n-label-text-align": Te,
        "--n-label-height": be,
        "--n-label-padding": Me,
        "--n-label-font-weight": ue,
        "--n-asterisk-color": Q,
        "--n-label-text-color": re,
        "--n-feedback-padding": le,
        "--n-feedback-font-size": K,
        "--n-feedback-height": fe,
        "--n-feedback-text-color": j,
        "--n-feedback-text-color-warning": q,
        "--n-feedback-text-color-error": Z
      };
    }), O = n ? it("form-item", T(() => {
      var I;
      return `${u.value[0]}${h.value[0]}${((I = b.value) === null || I === void 0 ? void 0 : I[0]) || ""}`;
    }), V, e) : void 0, E = T(() => h.value === "left" && m.value === "left" && b.value === "left");
    return Object.assign(Object.assign(Object.assign(Object.assign({
      labelElementRef: M,
      mergedClsPrefix: t,
      mergedRequired: s,
      feedbackId: p,
      renderExplains: f,
      reverseColSpace: E
    }, i), o), $), {
      cssVars: n ? void 0 : V,
      themeClass: O == null ? void 0 : O.themeClass,
      onRender: O == null ? void 0 : O.onRender
    });
  },
  render() {
    const {
      $slots: e,
      mergedClsPrefix: t,
      mergedShowLabel: n,
      mergedShowRequireMark: r,
      mergedRequireMarkPlacement: o,
      onRender: i
    } = this, l = r !== void 0 ? r : this.mergedRequired;
    i == null || i();
    const a = () => {
      const s = this.$slots.label ? this.$slots.label() : this.label;
      if (!s) return null;
      const d = c("span", {
        class: `${t}-form-item-label__text`
      }, s), u = l ? c("span", {
        class: `${t}-form-item-label__asterisk`
      }, o !== "left" ? " *" : "* ") : o === "right-hanging" && c("span", {
        class: `${t}-form-item-label__asterisk-placeholder`
      }, " *"), {
        labelProps: h
      } = this;
      return c("label", Object.assign({}, h, {
        class: [h == null ? void 0 : h.class, `${t}-form-item-label`, `${t}-form-item-label--${o}-mark`, this.reverseColSpace && `${t}-form-item-label--reverse-columns-space`],
        style: this.mergedLabelStyle,
        ref: "labelElementRef"
      }), o === "left" ? [u, d] : [d, u]);
    };
    return c("div", {
      class: [`${t}-form-item`, this.themeClass, `${t}-form-item--${this.mergedSize}-size`, `${t}-form-item--${this.mergedLabelPlacement}-labelled`, this.isAutoLabelWidth && `${t}-form-item--auto-label-width`, !n && `${t}-form-item--no-label`],
      style: this.cssVars
    }, n && a(), c("div", {
      class: [`${t}-form-item-blank`, this.mergedValidationStatus && `${t}-form-item-blank--${this.mergedValidationStatus}`]
    }, e), this.mergedShowFeedback ? c("div", {
      key: this.feedbackId,
      style: this.feedbackStyle,
      class: [`${t}-form-item-feedback-wrapper`, this.feedbackClass]
    }, c(Ht, {
      name: "fade-down-transition",
      mode: "out-in"
    }, {
      default: () => {
        const {
          mergedValidationStatus: s
        } = this;
        return Ze(e.feedback, (d) => {
          var u;
          const {
            feedback: h
          } = this, b = d || h ? c("div", {
            key: "__feedback__",
            class: `${t}-form-item-feedback__line`
          }, d || h) : this.renderExplains.length ? (u = this.renderExplains) === null || u === void 0 ? void 0 : u.map(({
            key: m,
            render: f
          }) => c("div", {
            key: m,
            class: `${t}-form-item-feedback__line`
          }, f())) : null;
          return b ? s === "warning" ? c("div", {
            key: "controlled-warning",
            class: `${t}-form-item-feedback ${t}-form-item-feedback--warning`
          }, b) : s === "error" ? c("div", {
            key: "controlled-error",
            class: `${t}-form-item-feedback ${t}-form-item-feedback--error`
          }, b) : s === "success" ? c("div", {
            key: "controlled-success",
            class: `${t}-form-item-feedback ${t}-form-item-feedback--success`
          }, b) : c("div", {
            key: "controlled-default",
            class: `${t}-form-item-feedback`
          }, b) : null;
        });
      }
    })) : null);
  }
}), ed = "n-popconfirm", td = {
  positiveText: String,
  negativeText: String,
  showIcon: {
    type: Boolean,
    default: !0
  },
  onPositiveClick: {
    type: Function,
    required: !0
  },
  onNegativeClick: {
    type: Function,
    required: !0
  }
}, ll = Rn(td), Jm = ie({
  name: "NPopconfirmPanel",
  props: td,
  setup(e) {
    const {
      localeRef: t
    } = Pn("Popconfirm"), {
      inlineThemeDisabled: n
    } = _e(), {
      mergedClsPrefixRef: r,
      mergedThemeRef: o,
      props: i
    } = ke(ed), l = T(() => {
      const {
        common: {
          cubicBezierEaseInOut: s
        },
        self: {
          fontSize: d,
          iconSize: u,
          iconColor: h
        }
      } = o.value;
      return {
        "--n-bezier": s,
        "--n-font-size": d,
        "--n-icon-size": u,
        "--n-icon-color": h
      };
    }), a = n ? it("popconfirm-panel", void 0, l, i) : void 0;
    return Object.assign(Object.assign({}, Pn("Popconfirm")), {
      mergedClsPrefix: r,
      cssVars: n ? void 0 : l,
      localizedPositiveText: T(() => e.positiveText || t.value.positiveText),
      localizedNegativeText: T(() => e.negativeText || t.value.negativeText),
      positiveButtonProps: ae(i, "positiveButtonProps"),
      negativeButtonProps: ae(i, "negativeButtonProps"),
      handlePositiveClick(s) {
        e.onPositiveClick(s);
      },
      handleNegativeClick(s) {
        e.onNegativeClick(s);
      },
      themeClass: a == null ? void 0 : a.themeClass,
      onRender: a == null ? void 0 : a.onRender
    });
  },
  render() {
    var e;
    const {
      mergedClsPrefix: t,
      showIcon: n,
      $slots: r
    } = this, o = Et(r.action, () => this.negativeText === null && this.positiveText === null ? [] : [this.negativeText !== null && c(Nn, Object.assign({
      size: "small",
      onClick: this.handleNegativeClick
    }, this.negativeButtonProps), {
      default: () => this.localizedNegativeText
    }), this.positiveText !== null && c(Nn, Object.assign({
      size: "small",
      type: "primary",
      onClick: this.handlePositiveClick
    }, this.positiveButtonProps), {
      default: () => this.localizedPositiveText
    })]);
    return (e = this.onRender) === null || e === void 0 || e.call(this), c("div", {
      class: [`${t}-popconfirm__panel`, this.themeClass],
      style: this.cssVars
    }, Ze(r.default, (i) => n || i ? c("div", {
      class: `${t}-popconfirm__body`
    }, n ? c("div", {
      class: `${t}-popconfirm__icon`
    }, Et(r.icon, () => [c(ct, {
      clsPrefix: t
    }, {
      default: () => c(Ri, null)
    })])) : null, i) : null), o ? c("div", {
      class: [`${t}-popconfirm__action`]
    }, o) : null);
  }
}), Qm = R("popconfirm", [A("body", `
 font-size: var(--n-font-size);
 display: flex;
 align-items: center;
 flex-wrap: nowrap;
 position: relative;
 `, [A("icon", `
 display: flex;
 font-size: var(--n-icon-size);
 color: var(--n-icon-color);
 transition: color .3s var(--n-bezier);
 margin: 0 8px 0 0;
 `)]), A("action", `
 display: flex;
 justify-content: flex-end;
 `, [B("&:not(:first-child)", "margin-top: 8px"), R("button", [B("&:not(:last-child)", "margin-right: 8px;")])])]), ev = Object.assign(Object.assign(Object.assign({}, we.props), zn), {
  positiveText: String,
  negativeText: String,
  showIcon: {
    type: Boolean,
    default: !0
  },
  trigger: {
    type: String,
    default: "click"
  },
  positiveButtonProps: Object,
  negativeButtonProps: Object,
  onPositiveClick: Function,
  onNegativeClick: Function
}), vv = ie({
  name: "Popconfirm",
  props: ev,
  slots: Object,
  __popover__: !0,
  setup(e) {
    const {
      mergedClsPrefixRef: t
    } = _e(), n = we("Popconfirm", "-popconfirm", Qm, nm, e, t), r = L(null);
    function o(a) {
      var s;
      if (!(!((s = r.value) === null || s === void 0) && s.getMergedShow())) return;
      const {
        onPositiveClick: d,
        "onUpdate:show": u
      } = e;
      Promise.resolve(d ? d(a) : !0).then((h) => {
        var b;
        h !== !1 && ((b = r.value) === null || b === void 0 || b.setShow(!1), u && oe(u, !1));
      });
    }
    function i(a) {
      var s;
      if (!(!((s = r.value) === null || s === void 0) && s.getMergedShow())) return;
      const {
        onNegativeClick: d,
        "onUpdate:show": u
      } = e;
      Promise.resolve(d ? d(a) : !0).then((h) => {
        var b;
        h !== !1 && ((b = r.value) === null || b === void 0 || b.setShow(!1), u && oe(u, !1));
      });
    }
    return We(ed, {
      mergedThemeRef: n,
      mergedClsPrefixRef: t,
      props: e
    }), {
      setShow(a) {
        var s;
        (s = r.value) === null || s === void 0 || s.setShow(a);
      },
      syncPosition() {
        var a;
        (a = r.value) === null || a === void 0 || a.syncPosition();
      },
      mergedTheme: n,
      popoverInstRef: r,
      handlePositiveClick: o,
      handleNegativeClick: i
    };
  },
  render() {
    const {
      $slots: e,
      $props: t,
      mergedTheme: n
    } = this;
    return c(Jn, kr(t, ll, {
      theme: n.peers.Popover,
      themeOverrides: n.peerOverrides.Popover,
      internalExtraClass: ["popconfirm"],
      ref: "popoverInstRef"
    }), {
      trigger: e.trigger,
      default: () => {
        const r = kn(t, ll);
        return c(Jm, Object.assign(Object.assign({}, r), {
          onPositiveClick: this.handlePositiveClick,
          onNegativeClick: this.handleNegativeClick
        }), e);
      }
    });
  }
}), Li = "n-tabs", nd = {
  tab: [String, Number, Object, Function],
  name: {
    type: [String, Number],
    required: !0
  },
  disabled: Boolean,
  displayDirective: {
    type: String,
    default: "if"
  },
  closable: {
    type: Boolean,
    default: void 0
  },
  tabProps: Object,
  /** @deprecated */
  label: [String, Number, Object, Function]
}, xv = ie({
  __TAB_PANE__: !0,
  name: "TabPane",
  alias: ["TabPanel"],
  props: nd,
  slots: Object,
  setup(e) {
    const t = ke(Li, null);
    return t || ki("tab-pane", "`n-tab-pane` must be placed inside `n-tabs`."), {
      style: t.paneStyleRef,
      class: t.paneClassRef,
      mergedClsPrefix: t.mergedClsPrefixRef
    };
  },
  render() {
    return c("div", {
      class: [`${this.mergedClsPrefix}-tab-pane`, this.class],
      style: this.style
    }, this.$slots);
  }
}), tv = Object.assign({
  internalLeftPadded: Boolean,
  internalAddable: Boolean,
  internalCreatedByPane: Boolean
}, kr(nd, ["displayDirective"])), ci = ie({
  __TAB__: !0,
  inheritAttrs: !1,
  name: "Tab",
  props: tv,
  setup(e) {
    const {
      mergedClsPrefixRef: t,
      valueRef: n,
      typeRef: r,
      closableRef: o,
      tabStyleRef: i,
      addTabStyleRef: l,
      tabClassRef: a,
      addTabClassRef: s,
      tabChangeIdRef: d,
      onBeforeLeaveRef: u,
      triggerRef: h,
      handleAdd: b,
      activateTab: m,
      handleClose: f
    } = ke(Li);
    return {
      trigger: h,
      mergedClosable: T(() => {
        if (e.internalAddable) return !1;
        const {
          closable: p
        } = e;
        return p === void 0 ? o.value : p;
      }),
      style: i,
      addStyle: l,
      tabClass: a,
      addTabClass: s,
      clsPrefix: t,
      value: n,
      type: r,
      handleClose(p) {
        p.stopPropagation(), !e.disabled && f(e.name);
      },
      activateTab() {
        if (e.disabled) return;
        if (e.internalAddable) {
          b();
          return;
        }
        const {
          name: p
        } = e, v = ++d.id;
        if (p !== n.value) {
          const {
            value: g
          } = u;
          g ? Promise.resolve(g(e.name, n.value)).then((y) => {
            y && d.id === v && m(p);
          }) : m(p);
        }
      }
    };
  },
  render() {
    const {
      internalAddable: e,
      clsPrefix: t,
      name: n,
      disabled: r,
      label: o,
      tab: i,
      value: l,
      mergedClosable: a,
      trigger: s,
      $slots: {
        default: d
      }
    } = this, u = o != null ? o : i;
    return c("div", {
      class: `${t}-tabs-tab-wrapper`
    }, this.internalLeftPadded ? c("div", {
      class: `${t}-tabs-tab-pad`
    }) : null, c("div", Object.assign({
      key: n,
      "data-name": n,
      "data-disabled": r ? !0 : void 0
    }, Vt({
      class: [`${t}-tabs-tab`, l === n && `${t}-tabs-tab--active`, r && `${t}-tabs-tab--disabled`, a && `${t}-tabs-tab--closable`, e && `${t}-tabs-tab--addable`, e ? this.addTabClass : this.tabClass],
      onClick: s === "click" ? this.activateTab : void 0,
      onMouseenter: s === "hover" ? this.activateTab : void 0,
      style: e ? this.addStyle : this.style
    }, this.internalCreatedByPane ? this.tabProps || {} : this.$attrs)), c("span", {
      class: `${t}-tabs-tab__label`
    }, e ? c(Pt, null, c("div", {
      class: `${t}-tabs-tab__height-placeholder`
    }, " "), c(ct, {
      clsPrefix: t
    }, {
      default: () => c(Vf, null)
    })) : d ? d() : typeof u == "object" ? u : gt(u != null ? u : n)), a && this.type === "card" ? c(Rr, {
      clsPrefix: t,
      class: `${t}-tabs-tab__close`,
      onClick: this.handleClose,
      disabled: r
    }) : null));
  }
}), nv = R("tabs", `
 box-sizing: border-box;
 width: 100%;
 display: flex;
 flex-direction: column;
 transition:
 background-color .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
`, [_("segment-type", [R("tabs-rail", [B("&.transition-disabled", [R("tabs-capsule", `
 transition: none;
 `)])])]), _("top", [R("tab-pane", `
 padding: var(--n-pane-padding-top) var(--n-pane-padding-right) var(--n-pane-padding-bottom) var(--n-pane-padding-left);
 `)]), _("left", [R("tab-pane", `
 padding: var(--n-pane-padding-right) var(--n-pane-padding-bottom) var(--n-pane-padding-left) var(--n-pane-padding-top);
 `)]), _("left, right", `
 flex-direction: row;
 `, [R("tabs-bar", `
 width: 2px;
 right: 0;
 transition:
 top .2s var(--n-bezier),
 max-height .2s var(--n-bezier),
 background-color .3s var(--n-bezier);
 `), R("tabs-tab", `
 padding: var(--n-tab-padding-vertical); 
 `)]), _("right", `
 flex-direction: row-reverse;
 `, [R("tab-pane", `
 padding: var(--n-pane-padding-left) var(--n-pane-padding-top) var(--n-pane-padding-right) var(--n-pane-padding-bottom);
 `), R("tabs-bar", `
 left: 0;
 `)]), _("bottom", `
 flex-direction: column-reverse;
 justify-content: flex-end;
 `, [R("tab-pane", `
 padding: var(--n-pane-padding-bottom) var(--n-pane-padding-right) var(--n-pane-padding-top) var(--n-pane-padding-left);
 `), R("tabs-bar", `
 top: 0;
 `)]), R("tabs-rail", `
 position: relative;
 padding: 3px;
 border-radius: var(--n-tab-border-radius);
 width: 100%;
 background-color: var(--n-color-segment);
 transition: background-color .3s var(--n-bezier);
 display: flex;
 align-items: center;
 `, [R("tabs-capsule", `
 border-radius: var(--n-tab-border-radius);
 position: absolute;
 pointer-events: none;
 background-color: var(--n-tab-color-segment);
 box-shadow: 0 1px 3px 0 rgba(0, 0, 0, .08);
 transition: transform 0.3s var(--n-bezier);
 `), R("tabs-tab-wrapper", `
 flex-basis: 0;
 flex-grow: 1;
 display: flex;
 align-items: center;
 justify-content: center;
 `, [R("tabs-tab", `
 overflow: hidden;
 border-radius: var(--n-tab-border-radius);
 width: 100%;
 display: flex;
 align-items: center;
 justify-content: center;
 `, [_("active", `
 font-weight: var(--n-font-weight-strong);
 color: var(--n-tab-text-color-active);
 `), B("&:hover", `
 color: var(--n-tab-text-color-hover);
 `)])])]), _("flex", [R("tabs-nav", `
 width: 100%;
 position: relative;
 `, [R("tabs-wrapper", `
 width: 100%;
 `, [R("tabs-tab", `
 margin-right: 0;
 `)])])]), R("tabs-nav", `
 box-sizing: border-box;
 line-height: 1.5;
 display: flex;
 transition: border-color .3s var(--n-bezier);
 `, [A("prefix, suffix", `
 display: flex;
 align-items: center;
 `), A("prefix", "padding-right: 16px;"), A("suffix", "padding-left: 16px;")]), _("top, bottom", [R("tabs-nav-scroll-wrapper", [B("&::before", `
 top: 0;
 bottom: 0;
 left: 0;
 width: 20px;
 `), B("&::after", `
 top: 0;
 bottom: 0;
 right: 0;
 width: 20px;
 `), _("shadow-start", [B("&::before", `
 box-shadow: inset 10px 0 8px -8px rgba(0, 0, 0, .12);
 `)]), _("shadow-end", [B("&::after", `
 box-shadow: inset -10px 0 8px -8px rgba(0, 0, 0, .12);
 `)])])]), _("left, right", [R("tabs-nav-scroll-content", `
 flex-direction: column;
 `), R("tabs-nav-scroll-wrapper", [B("&::before", `
 top: 0;
 left: 0;
 right: 0;
 height: 20px;
 `), B("&::after", `
 bottom: 0;
 left: 0;
 right: 0;
 height: 20px;
 `), _("shadow-start", [B("&::before", `
 box-shadow: inset 0 10px 8px -8px rgba(0, 0, 0, .12);
 `)]), _("shadow-end", [B("&::after", `
 box-shadow: inset 0 -10px 8px -8px rgba(0, 0, 0, .12);
 `)])])]), R("tabs-nav-scroll-wrapper", `
 flex: 1;
 position: relative;
 overflow: hidden;
 `, [R("tabs-nav-y-scroll", `
 height: 100%;
 width: 100%;
 overflow-y: auto; 
 scrollbar-width: none;
 `, [B("&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb", `
 width: 0;
 height: 0;
 display: none;
 `)]), B("&::before, &::after", `
 transition: box-shadow .3s var(--n-bezier);
 pointer-events: none;
 content: "";
 position: absolute;
 z-index: 1;
 `)]), R("tabs-nav-scroll-content", `
 display: flex;
 position: relative;
 min-width: 100%;
 min-height: 100%;
 width: fit-content;
 box-sizing: border-box;
 `), R("tabs-wrapper", `
 display: inline-flex;
 flex-wrap: nowrap;
 position: relative;
 `), R("tabs-tab-wrapper", `
 display: flex;
 flex-wrap: nowrap;
 flex-shrink: 0;
 flex-grow: 0;
 `), R("tabs-tab", `
 cursor: pointer;
 white-space: nowrap;
 flex-wrap: nowrap;
 display: inline-flex;
 align-items: center;
 color: var(--n-tab-text-color);
 font-size: var(--n-tab-font-size);
 background-clip: padding-box;
 padding: var(--n-tab-padding);
 transition:
 box-shadow .3s var(--n-bezier),
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 border-color .3s var(--n-bezier);
 `, [_("disabled", {
  cursor: "not-allowed"
}), A("close", `
 margin-left: 6px;
 transition:
 background-color .3s var(--n-bezier),
 color .3s var(--n-bezier);
 `), A("label", `
 display: flex;
 align-items: center;
 z-index: 1;
 `)]), R("tabs-bar", `
 position: absolute;
 bottom: 0;
 height: 2px;
 border-radius: 1px;
 background-color: var(--n-bar-color);
 transition:
 left .2s var(--n-bezier),
 max-width .2s var(--n-bezier),
 opacity .3s var(--n-bezier),
 background-color .3s var(--n-bezier);
 `, [B("&.transition-disabled", `
 transition: none;
 `), _("disabled", `
 background-color: var(--n-tab-text-color-disabled)
 `)]), R("tabs-pane-wrapper", `
 position: relative;
 overflow: hidden;
 transition: max-height .2s var(--n-bezier);
 `), R("tab-pane", `
 color: var(--n-pane-text-color);
 width: 100%;
 transition:
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 opacity .2s var(--n-bezier);
 left: 0;
 right: 0;
 top: 0;
 `, [B("&.next-transition-leave-active, &.prev-transition-leave-active, &.next-transition-enter-active, &.prev-transition-enter-active", `
 transition:
 color .3s var(--n-bezier),
 background-color .3s var(--n-bezier),
 transform .2s var(--n-bezier),
 opacity .2s var(--n-bezier);
 `), B("&.next-transition-leave-active, &.prev-transition-leave-active", `
 position: absolute;
 `), B("&.next-transition-enter-from, &.prev-transition-leave-to", `
 transform: translateX(32px);
 opacity: 0;
 `), B("&.next-transition-leave-to, &.prev-transition-enter-from", `
 transform: translateX(-32px);
 opacity: 0;
 `), B("&.next-transition-leave-from, &.next-transition-enter-to, &.prev-transition-leave-from, &.prev-transition-enter-to", `
 transform: translateX(0);
 opacity: 1;
 `)]), R("tabs-tab-pad", `
 box-sizing: border-box;
 width: var(--n-tab-gap);
 flex-grow: 0;
 flex-shrink: 0;
 `), _("line-type, bar-type", [R("tabs-tab", `
 font-weight: var(--n-tab-font-weight);
 box-sizing: border-box;
 vertical-align: bottom;
 `, [B("&:hover", {
  color: "var(--n-tab-text-color-hover)"
}), _("active", `
 color: var(--n-tab-text-color-active);
 font-weight: var(--n-tab-font-weight-active);
 `), _("disabled", {
  color: "var(--n-tab-text-color-disabled)"
})])]), R("tabs-nav", [_("line-type", [_("top", [A("prefix, suffix", `
 border-bottom: 1px solid var(--n-tab-border-color);
 `), R("tabs-nav-scroll-content", `
 border-bottom: 1px solid var(--n-tab-border-color);
 `), R("tabs-bar", `
 bottom: -1px;
 `)]), _("left", [A("prefix, suffix", `
 border-right: 1px solid var(--n-tab-border-color);
 `), R("tabs-nav-scroll-content", `
 border-right: 1px solid var(--n-tab-border-color);
 `), R("tabs-bar", `
 right: -1px;
 `)]), _("right", [A("prefix, suffix", `
 border-left: 1px solid var(--n-tab-border-color);
 `), R("tabs-nav-scroll-content", `
 border-left: 1px solid var(--n-tab-border-color);
 `), R("tabs-bar", `
 left: -1px;
 `)]), _("bottom", [A("prefix, suffix", `
 border-top: 1px solid var(--n-tab-border-color);
 `), R("tabs-nav-scroll-content", `
 border-top: 1px solid var(--n-tab-border-color);
 `), R("tabs-bar", `
 top: -1px;
 `)]), A("prefix, suffix", `
 transition: border-color .3s var(--n-bezier);
 `), R("tabs-nav-scroll-content", `
 transition: border-color .3s var(--n-bezier);
 `), R("tabs-bar", `
 border-radius: 0;
 `)]), _("card-type", [A("prefix, suffix", `
 transition: border-color .3s var(--n-bezier);
 `), R("tabs-pad", `
 flex-grow: 1;
 transition: border-color .3s var(--n-bezier);
 `), R("tabs-tab-pad", `
 transition: border-color .3s var(--n-bezier);
 `), R("tabs-tab", `
 font-weight: var(--n-tab-font-weight);
 border: 1px solid var(--n-tab-border-color);
 background-color: var(--n-tab-color);
 box-sizing: border-box;
 position: relative;
 vertical-align: bottom;
 display: flex;
 justify-content: space-between;
 font-size: var(--n-tab-font-size);
 color: var(--n-tab-text-color);
 `, [_("addable", `
 padding-left: 8px;
 padding-right: 8px;
 font-size: 16px;
 justify-content: center;
 `, [A("height-placeholder", `
 width: 0;
 font-size: var(--n-tab-font-size);
 `), Je("disabled", [B("&:hover", `
 color: var(--n-tab-text-color-hover);
 `)])]), _("closable", "padding-right: 8px;"), _("active", `
 background-color: #0000;
 font-weight: var(--n-tab-font-weight-active);
 color: var(--n-tab-text-color-active);
 `), _("disabled", "color: var(--n-tab-text-color-disabled);")])]), _("left, right", `
 flex-direction: column; 
 `, [A("prefix, suffix", `
 padding: var(--n-tab-padding-vertical);
 `), R("tabs-wrapper", `
 flex-direction: column;
 `), R("tabs-tab-wrapper", `
 flex-direction: column;
 `, [R("tabs-tab-pad", `
 height: var(--n-tab-gap-vertical);
 width: 100%;
 `)])]), _("top", [_("card-type", [R("tabs-scroll-padding", "border-bottom: 1px solid var(--n-tab-border-color);"), A("prefix, suffix", `
 border-bottom: 1px solid var(--n-tab-border-color);
 `), R("tabs-tab", `
 border-top-left-radius: var(--n-tab-border-radius);
 border-top-right-radius: var(--n-tab-border-radius);
 `, [_("active", `
 border-bottom: 1px solid #0000;
 `)]), R("tabs-tab-pad", `
 border-bottom: 1px solid var(--n-tab-border-color);
 `), R("tabs-pad", `
 border-bottom: 1px solid var(--n-tab-border-color);
 `)])]), _("left", [_("card-type", [R("tabs-scroll-padding", "border-right: 1px solid var(--n-tab-border-color);"), A("prefix, suffix", `
 border-right: 1px solid var(--n-tab-border-color);
 `), R("tabs-tab", `
 border-top-left-radius: var(--n-tab-border-radius);
 border-bottom-left-radius: var(--n-tab-border-radius);
 `, [_("active", `
 border-right: 1px solid #0000;
 `)]), R("tabs-tab-pad", `
 border-right: 1px solid var(--n-tab-border-color);
 `), R("tabs-pad", `
 border-right: 1px solid var(--n-tab-border-color);
 `)])]), _("right", [_("card-type", [R("tabs-scroll-padding", "border-left: 1px solid var(--n-tab-border-color);"), A("prefix, suffix", `
 border-left: 1px solid var(--n-tab-border-color);
 `), R("tabs-tab", `
 border-top-right-radius: var(--n-tab-border-radius);
 border-bottom-right-radius: var(--n-tab-border-radius);
 `, [_("active", `
 border-left: 1px solid #0000;
 `)]), R("tabs-tab-pad", `
 border-left: 1px solid var(--n-tab-border-color);
 `), R("tabs-pad", `
 border-left: 1px solid var(--n-tab-border-color);
 `)])]), _("bottom", [_("card-type", [R("tabs-scroll-padding", "border-top: 1px solid var(--n-tab-border-color);"), A("prefix, suffix", `
 border-top: 1px solid var(--n-tab-border-color);
 `), R("tabs-tab", `
 border-bottom-left-radius: var(--n-tab-border-radius);
 border-bottom-right-radius: var(--n-tab-border-radius);
 `, [_("active", `
 border-top: 1px solid #0000;
 `)]), R("tabs-tab-pad", `
 border-top: 1px solid var(--n-tab-border-color);
 `), R("tabs-pad", `
 border-top: 1px solid var(--n-tab-border-color);
 `)])])])]), rv = Object.assign(Object.assign({}, we.props), {
  value: [String, Number],
  defaultValue: [String, Number],
  trigger: {
    type: String,
    default: "click"
  },
  type: {
    type: String,
    default: "bar"
  },
  closable: Boolean,
  justifyContent: String,
  size: {
    type: String,
    default: "medium"
  },
  placement: {
    type: String,
    default: "top"
  },
  tabStyle: [String, Object],
  tabClass: String,
  addTabStyle: [String, Object],
  addTabClass: String,
  barWidth: Number,
  paneClass: String,
  paneStyle: [String, Object],
  paneWrapperClass: String,
  paneWrapperStyle: [String, Object],
  addable: [Boolean, Object],
  tabsPadding: {
    type: Number,
    default: 0
  },
  animated: Boolean,
  onBeforeLeave: Function,
  onAdd: Function,
  "onUpdate:value": [Function, Array],
  onUpdateValue: [Function, Array],
  onClose: [Function, Array],
  // deprecated
  labelSize: String,
  activeName: [String, Number],
  onActiveNameChange: [Function, Array]
}), yv = ie({
  name: "Tabs",
  props: rv,
  slots: Object,
  setup(e, {
    slots: t
  }) {
    var n, r, o, i;
    const {
      mergedClsPrefixRef: l,
      inlineThemeDisabled: a
    } = _e(e), s = we("Tabs", "-tabs", nv, im, e, l), d = L(null), u = L(null), h = L(null), b = L(null), m = L(null), f = L(null), p = L(!0), v = L(!0), g = Xr(e, ["labelSize", "size"]), y = Xr(e, ["activeName", "value"]), S = L((r = (n = y.value) !== null && n !== void 0 ? n : e.defaultValue) !== null && r !== void 0 ? r : t.default ? (i = (o = an(t.default())[0]) === null || o === void 0 ? void 0 : o.props) === null || i === void 0 ? void 0 : i.name : null), w = zt(y, S), C = {
      id: 0
    }, k = T(() => {
      if (!(!e.justifyContent || e.type === "card"))
        return {
          display: "flex",
          justifyContent: e.justifyContent
        };
    });
    je(w, () => {
      C.id = 0, V(), O();
    });
    function x() {
      var U;
      const {
        value: Y
      } = w;
      return Y === null ? null : (U = d.value) === null || U === void 0 ? void 0 : U.querySelector(`[data-name="${Y}"]`);
    }
    function z(U) {
      if (e.type === "card") return;
      const {
        value: Y
      } = u;
      if (!Y) return;
      const de = Y.style.opacity === "0";
      if (U) {
        const xe = `${l.value}-tabs-bar--disabled`, {
          barWidth: te,
          placement: ce
        } = e;
        if (U.dataset.disabled === "true" ? Y.classList.add(xe) : Y.classList.remove(xe), ["top", "bottom"].includes(ce)) {
          if (M(["top", "maxHeight", "height"]), typeof te == "number" && U.offsetWidth >= te) {
            const ze = Math.floor((U.offsetWidth - te) / 2) + U.offsetLeft;
            Y.style.left = `${ze}px`, Y.style.maxWidth = `${te}px`;
          } else
            Y.style.left = `${U.offsetLeft}px`, Y.style.maxWidth = `${U.offsetWidth}px`;
          Y.style.width = "8192px", de && (Y.style.transition = "none"), Y.offsetWidth, de && (Y.style.transition = "", Y.style.opacity = "1");
        } else {
          if (M(["left", "maxWidth", "width"]), typeof te == "number" && U.offsetHeight >= te) {
            const ze = Math.floor((U.offsetHeight - te) / 2) + U.offsetTop;
            Y.style.top = `${ze}px`, Y.style.maxHeight = `${te}px`;
          } else
            Y.style.top = `${U.offsetTop}px`, Y.style.maxHeight = `${U.offsetHeight}px`;
          Y.style.height = "8192px", de && (Y.style.transition = "none"), Y.offsetHeight, de && (Y.style.transition = "", Y.style.opacity = "1");
        }
      }
    }
    function $() {
      if (e.type === "card") return;
      const {
        value: U
      } = u;
      U && (U.style.opacity = "0");
    }
    function M(U) {
      const {
        value: Y
      } = u;
      if (Y)
        for (const de of U)
          Y.style[de] = "";
    }
    function V() {
      if (e.type === "card") return;
      const U = x();
      U ? z(U) : $();
    }
    function O() {
      var U;
      const Y = (U = m.value) === null || U === void 0 ? void 0 : U.$el;
      if (!Y) return;
      const de = x();
      if (!de) return;
      const {
        scrollLeft: xe,
        offsetWidth: te
      } = Y, {
        offsetLeft: ce,
        offsetWidth: ze
      } = de;
      xe > ce ? Y.scrollTo({
        top: 0,
        left: ce,
        behavior: "smooth"
      }) : ce + ze > xe + te && Y.scrollTo({
        top: 0,
        left: ce + ze - te,
        behavior: "smooth"
      });
    }
    const E = L(null);
    let I = 0, F = null;
    function N(U) {
      const Y = E.value;
      if (Y) {
        I = U.getBoundingClientRect().height;
        const de = `${I}px`, xe = () => {
          Y.style.height = de, Y.style.maxHeight = de;
        };
        F ? (xe(), F(), F = null) : F = xe;
      }
    }
    function W(U) {
      const Y = E.value;
      if (Y) {
        const de = U.getBoundingClientRect().height, xe = () => {
          document.body.offsetHeight, Y.style.maxHeight = `${de}px`, Y.style.height = `${Math.max(I, de)}px`;
        };
        F ? (F(), F = null, xe()) : F = xe;
      }
    }
    function X() {
      const U = E.value;
      if (U) {
        U.style.maxHeight = "", U.style.height = "";
        const {
          paneWrapperStyle: Y
        } = e;
        if (typeof Y == "string")
          U.style.cssText = Y;
        else if (Y) {
          const {
            maxHeight: de,
            height: xe
          } = Y;
          de !== void 0 && (U.style.maxHeight = de), xe !== void 0 && (U.style.height = xe);
        }
      }
    }
    const re = {
      value: []
    }, Q = L("next");
    function G(U) {
      const Y = w.value;
      let de = "next";
      for (const xe of re.value) {
        if (xe === Y)
          break;
        if (xe === U) {
          de = "prev";
          break;
        }
      }
      Q.value = de, j(U);
    }
    function j(U) {
      const {
        onActiveNameChange: Y,
        onUpdateValue: de,
        "onUpdate:value": xe
      } = e;
      Y && oe(Y, U), de && oe(de, U), xe && oe(xe, U), S.value = U;
    }
    function q(U) {
      const {
        onClose: Y
      } = e;
      Y && oe(Y, U);
    }
    function Z() {
      const {
        value: U
      } = u;
      if (!U) return;
      const Y = "transition-disabled";
      U.classList.add(Y), V(), U.classList.remove(Y);
    }
    const le = L(null);
    function ue({
      transitionDisabled: U
    }) {
      const Y = d.value;
      if (!Y) return;
      U && Y.classList.add("transition-disabled");
      const de = x();
      de && le.value && (le.value.style.width = `${de.offsetWidth}px`, le.value.style.height = `${de.offsetHeight}px`, le.value.style.transform = `translateX(${de.offsetLeft - Nt(getComputedStyle(Y).paddingLeft)}px)`, U && le.value.offsetWidth), U && Y.classList.remove("transition-disabled");
    }
    je([w], () => {
      e.type === "segment" && Tt(() => {
        ue({
          transitionDisabled: !1
        });
      });
    }), vt(() => {
      e.type === "segment" && ue({
        transitionDisabled: !0
      });
    });
    let be = 0;
    function Re(U) {
      var Y;
      if (U.contentRect.width === 0 && U.contentRect.height === 0 || be === U.contentRect.width)
        return;
      be = U.contentRect.width;
      const {
        type: de
      } = e;
      if ((de === "line" || de === "bar") && Z(), de !== "segment") {
        const {
          placement: xe
        } = e;
        Te((xe === "top" || xe === "bottom" ? (Y = m.value) === null || Y === void 0 ? void 0 : Y.$el : f.value) || null);
      }
    }
    const K = Co(Re, 64);
    je([() => e.justifyContent, () => e.size], () => {
      Tt(() => {
        const {
          type: U
        } = e;
        (U === "line" || U === "bar") && Z();
      });
    });
    const fe = L(!1);
    function Me(U) {
      var Y;
      const {
        target: de,
        contentRect: {
          width: xe,
          height: te
        }
      } = U, ce = de.parentElement.parentElement.offsetWidth, ze = de.parentElement.parentElement.offsetHeight, {
        placement: Ne
      } = e;
      if (!fe.value)
        Ne === "top" || Ne === "bottom" ? ce < xe && (fe.value = !0) : ze < te && (fe.value = !0);
      else {
        const {
          value: st
        } = b;
        if (!st) return;
        Ne === "top" || Ne === "bottom" ? ce - xe > st.$el.offsetWidth && (fe.value = !1) : ze - te > st.$el.offsetHeight && (fe.value = !1);
      }
      Te(((Y = m.value) === null || Y === void 0 ? void 0 : Y.$el) || null);
    }
    const ye = Co(Me, 64);
    function Fe() {
      const {
        onAdd: U
      } = e;
      U && U(), Tt(() => {
        const Y = x(), {
          value: de
        } = m;
        !Y || !de || de.scrollTo({
          left: Y.offsetLeft,
          top: 0,
          behavior: "smooth"
        });
      });
    }
    function Te(U) {
      if (!U) return;
      const {
        placement: Y
      } = e;
      if (Y === "top" || Y === "bottom") {
        const {
          scrollLeft: de,
          scrollWidth: xe,
          offsetWidth: te
        } = U;
        p.value = de <= 0, v.value = de + te >= xe;
      } else {
        const {
          scrollTop: de,
          scrollHeight: xe,
          offsetHeight: te
        } = U;
        p.value = de <= 0, v.value = de + te >= xe;
      }
    }
    const Qe = Co((U) => {
      Te(U.target);
    }, 64);
    We(Li, {
      triggerRef: ae(e, "trigger"),
      tabStyleRef: ae(e, "tabStyle"),
      tabClassRef: ae(e, "tabClass"),
      addTabStyleRef: ae(e, "addTabStyle"),
      addTabClassRef: ae(e, "addTabClass"),
      paneClassRef: ae(e, "paneClass"),
      paneStyleRef: ae(e, "paneStyle"),
      mergedClsPrefixRef: l,
      typeRef: ae(e, "type"),
      closableRef: ae(e, "closable"),
      valueRef: w,
      tabChangeIdRef: C,
      onBeforeLeaveRef: ae(e, "onBeforeLeave"),
      activateTab: G,
      handleClose: q,
      handleAdd: Fe
    }), zl(() => {
      V(), O();
    }), Bt(() => {
      const {
        value: U
      } = h;
      if (!U) return;
      const {
        value: Y
      } = l, de = `${Y}-tabs-nav-scroll-wrapper--shadow-start`, xe = `${Y}-tabs-nav-scroll-wrapper--shadow-end`;
      p.value ? U.classList.remove(de) : U.classList.add(de), v.value ? U.classList.remove(xe) : U.classList.add(xe);
    });
    const qe = {
      syncBarPosition: () => {
        V();
      }
    }, tt = () => {
      ue({
        transitionDisabled: !0
      });
    }, et = T(() => {
      const {
        value: U
      } = g, {
        type: Y
      } = e, de = {
        card: "Card",
        bar: "Bar",
        line: "Line",
        segment: "Segment"
      }[Y], xe = `${U}${de}`, {
        self: {
          barColor: te,
          closeIconColor: ce,
          closeIconColorHover: ze,
          closeIconColorPressed: Ne,
          tabColor: st,
          tabBorderColor: ft,
          paneTextColor: at,
          tabFontWeight: Xe,
          tabBorderRadius: dt,
          tabFontWeightActive: Ge,
          colorSegment: pe,
          fontWeightStrong: Pe,
          tabColorSegment: P,
          closeSize: D,
          closeIconSize: ee,
          closeColorHover: se,
          closeColorPressed: he,
          closeBorderRadius: ge,
          [J("panePadding", U)]: ve,
          [J("tabPadding", xe)]: Se,
          [J("tabPaddingVertical", xe)]: Ee,
          [J("tabGap", xe)]: Ye,
          [J("tabGap", `${xe}Vertical`)]: Le,
          [J("tabTextColor", Y)]: bt,
          [J("tabTextColorActive", Y)]: xt,
          [J("tabTextColorHover", Y)]: yt,
          [J("tabTextColorDisabled", Y)]: Ct,
          [J("tabFontSize", U)]: St
        },
        common: {
          cubicBezierEaseInOut: Mt
        }
      } = s.value;
      return {
        "--n-bezier": Mt,
        "--n-color-segment": pe,
        "--n-bar-color": te,
        "--n-tab-font-size": St,
        "--n-tab-text-color": bt,
        "--n-tab-text-color-active": xt,
        "--n-tab-text-color-disabled": Ct,
        "--n-tab-text-color-hover": yt,
        "--n-pane-text-color": at,
        "--n-tab-border-color": ft,
        "--n-tab-border-radius": dt,
        "--n-close-size": D,
        "--n-close-icon-size": ee,
        "--n-close-color-hover": se,
        "--n-close-color-pressed": he,
        "--n-close-border-radius": ge,
        "--n-close-icon-color": ce,
        "--n-close-icon-color-hover": ze,
        "--n-close-icon-color-pressed": Ne,
        "--n-tab-color": st,
        "--n-tab-font-weight": Xe,
        "--n-tab-font-weight-active": Ge,
        "--n-tab-padding": Se,
        "--n-tab-padding-vertical": Ee,
        "--n-tab-gap": Ye,
        "--n-tab-gap-vertical": Le,
        "--n-pane-padding-left": mt(ve, "left"),
        "--n-pane-padding-right": mt(ve, "right"),
        "--n-pane-padding-top": mt(ve, "top"),
        "--n-pane-padding-bottom": mt(ve, "bottom"),
        "--n-font-weight-strong": Pe,
        "--n-tab-color-segment": P
      };
    }), me = a ? it("tabs", T(() => `${g.value[0]}${e.type[0]}`), et, e) : void 0;
    return Object.assign({
      mergedClsPrefix: l,
      mergedValue: w,
      renderedNames: /* @__PURE__ */ new Set(),
      segmentCapsuleElRef: le,
      tabsPaneWrapperRef: E,
      tabsElRef: d,
      barElRef: u,
      addTabInstRef: b,
      xScrollInstRef: m,
      scrollWrapperElRef: h,
      addTabFixed: fe,
      tabWrapperStyle: k,
      handleNavResize: K,
      mergedSize: g,
      handleScroll: Qe,
      handleTabsResize: ye,
      cssVars: a ? void 0 : et,
      themeClass: me == null ? void 0 : me.themeClass,
      animationDirection: Q,
      renderNameListRef: re,
      yScrollElRef: f,
      handleSegmentResize: tt,
      onAnimationBeforeLeave: N,
      onAnimationEnter: W,
      onAnimationAfterEnter: X,
      onRender: me == null ? void 0 : me.onRender
    }, qe);
  },
  render() {
    const {
      mergedClsPrefix: e,
      type: t,
      placement: n,
      addTabFixed: r,
      addable: o,
      mergedSize: i,
      renderNameListRef: l,
      onRender: a,
      paneWrapperClass: s,
      paneWrapperStyle: d,
      $slots: {
        default: u,
        prefix: h,
        suffix: b
      }
    } = this;
    a == null || a();
    const m = u ? an(u()).filter((C) => C.type.__TAB_PANE__ === !0) : [], f = u ? an(u()).filter((C) => C.type.__TAB__ === !0) : [], p = !f.length, v = t === "card", g = t === "segment", y = !v && !g && this.justifyContent;
    l.value = [];
    const S = () => {
      const C = c("div", {
        style: this.tabWrapperStyle,
        class: `${e}-tabs-wrapper`
      }, y ? null : c("div", {
        class: `${e}-tabs-scroll-padding`,
        style: n === "top" || n === "bottom" ? {
          width: `${this.tabsPadding}px`
        } : {
          height: `${this.tabsPadding}px`
        }
      }), p ? m.map((k, x) => (l.value.push(k.props.name), No(c(ci, Object.assign({}, k.props, {
        internalCreatedByPane: !0,
        internalLeftPadded: x !== 0 && (!y || y === "center" || y === "start" || y === "end")
      }), k.children ? {
        default: k.children.tab
      } : void 0)))) : f.map((k, x) => (l.value.push(k.props.name), No(x !== 0 && !y ? cl(k) : k))), !r && o && v ? dl(o, (p ? m.length : f.length) !== 0) : null, y ? null : c("div", {
        class: `${e}-tabs-scroll-padding`,
        style: {
          width: `${this.tabsPadding}px`
        }
      }));
      return c("div", {
        ref: "tabsElRef",
        class: `${e}-tabs-nav-scroll-content`
      }, v && o ? c(on, {
        onResize: this.handleTabsResize
      }, {
        default: () => C
      }) : C, v ? c("div", {
        class: `${e}-tabs-pad`
      }) : null, v ? null : c("div", {
        ref: "barElRef",
        class: `${e}-tabs-bar`
      }));
    }, w = g ? "top" : n;
    return c("div", {
      class: [`${e}-tabs`, this.themeClass, `${e}-tabs--${t}-type`, `${e}-tabs--${i}-size`, y && `${e}-tabs--flex`, `${e}-tabs--${w}`],
      style: this.cssVars
    }, c("div", {
      class: [
        // the class should be applied here since it's possible
        // to make tabs nested in tabs, style may influence each
        // other. adding a class will make it easy to write the
        // style.
        `${e}-tabs-nav--${t}-type`,
        `${e}-tabs-nav--${w}`,
        `${e}-tabs-nav`
      ]
    }, Ze(h, (C) => C && c("div", {
      class: `${e}-tabs-nav__prefix`
    }, C)), g ? c(on, {
      onResize: this.handleSegmentResize
    }, {
      default: () => c("div", {
        class: `${e}-tabs-rail`,
        ref: "tabsElRef"
      }, c("div", {
        class: `${e}-tabs-capsule`,
        ref: "segmentCapsuleElRef"
      }, c("div", {
        class: `${e}-tabs-wrapper`
      }, c("div", {
        class: `${e}-tabs-tab`
      }))), p ? m.map((C, k) => (l.value.push(C.props.name), c(ci, Object.assign({}, C.props, {
        internalCreatedByPane: !0,
        internalLeftPadded: k !== 0
      }), C.children ? {
        default: C.children.tab
      } : void 0))) : f.map((C, k) => (l.value.push(C.props.name), k === 0 ? C : cl(C))))
    }) : c(on, {
      onResize: this.handleNavResize
    }, {
      default: () => c("div", {
        class: `${e}-tabs-nav-scroll-wrapper`,
        ref: "scrollWrapperElRef"
      }, ["top", "bottom"].includes(w) ? c(pu, {
        ref: "xScrollInstRef",
        onScroll: this.handleScroll
      }, {
        default: S
      }) : c("div", {
        class: `${e}-tabs-nav-y-scroll`,
        onScroll: this.handleScroll,
        ref: "yScrollElRef"
      }, S()))
    }), r && o && v ? dl(o, !0) : null, Ze(b, (C) => C && c("div", {
      class: `${e}-tabs-nav__suffix`
    }, C))), p && (this.animated && (w === "top" || w === "bottom") ? c("div", {
      ref: "tabsPaneWrapperRef",
      style: d,
      class: [`${e}-tabs-pane-wrapper`, s]
    }, sl(m, this.mergedValue, this.renderedNames, this.onAnimationBeforeLeave, this.onAnimationEnter, this.onAnimationAfterEnter, this.animationDirection)) : sl(m, this.mergedValue, this.renderedNames)));
  }
});
function sl(e, t, n, r, o, i, l) {
  const a = [];
  return e.forEach((s) => {
    const {
      name: d,
      displayDirective: u,
      "display-directive": h
    } = s.props, b = (f) => u === f || h === f, m = t === d;
    if (s.key !== void 0 && (s.key = d), m || b("show") || b("show:lazy") && n.has(d)) {
      n.has(d) || n.add(d);
      const f = !b("if");
      a.push(f ? ln(s, [[br, m]]) : s);
    }
  }), l ? c(gl, {
    name: `${l}-transition`,
    onBeforeLeave: r,
    onEnter: o,
    onAfterEnter: i
  }, {
    default: () => a
  }) : a;
}
function dl(e, t) {
  return c(ci, {
    ref: "addTabInstRef",
    key: "__addable",
    name: "__addable",
    internalCreatedByPane: !0,
    internalAddable: !0,
    internalLeftPadded: t,
    disabled: typeof e == "object" && e.disabled
  });
}
function cl(e) {
  const t = fi(e);
  return t.props ? t.props.internalLeftPadded = !0 : t.props = {
    internalLeftPadded: !0
  }, t;
}
function No(e) {
  return Array.isArray(e.dynamicProps) ? e.dynamicProps.includes("internalLeftPadded") || e.dynamicProps.push("internalLeftPadded") : e.dynamicProps = ["internalLeftPadded"], e;
}
export {
  Nn as B,
  Gb as N,
  bv as _,
  Bb as a,
  yv as b,
  pv as c,
  uv as d,
  xv as e,
  dv as f,
  sv as g,
  fv as h,
  ja as i,
  Zp as j,
  mv as k,
  vv as l,
  cv as m,
  gv as n,
  hv as u,
  lv as z
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
