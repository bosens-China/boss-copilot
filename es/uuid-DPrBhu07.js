var _ = Object.defineProperty, a = Object.defineProperties;
var D = Object.getOwnPropertyDescriptors;
var U = Object.getOwnPropertySymbols;
var S = Object.prototype.hasOwnProperty, T = Object.prototype.propertyIsEnumerable;
var V = (f, n, x) => n in f ? _(f, n, { enumerable: !0, configurable: !0, writable: !0, value: x }) : f[n] = x, R = (f, n) => {
  for (var x in n || (n = {}))
    S.call(n, x) && V(f, x, n[x]);
  if (U)
    for (var x of U(n))
      T.call(n, x) && V(f, x, n[x]);
  return f;
}, y = (f, n) => a(f, D(n));
const $ = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
function j(f) {
  return typeof f == "string" && $.test(f);
}
function p(f) {
  if (!j(f))
    throw TypeError("Invalid UUID");
  let n;
  return Uint8Array.of((n = parseInt(f.slice(0, 8), 16)) >>> 24, n >>> 16 & 255, n >>> 8 & 255, n & 255, (n = parseInt(f.slice(9, 13), 16)) >>> 8, n & 255, (n = parseInt(f.slice(14, 18), 16)) >>> 8, n & 255, (n = parseInt(f.slice(19, 23), 16)) >>> 8, n & 255, (n = parseInt(f.slice(24, 36), 16)) / 1099511627776 & 255, n / 4294967296 & 255, n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, n & 255);
}
const i = [];
for (let f = 0; f < 256; ++f)
  i.push((f + 256).toString(16).slice(1));
function m(f, n = 0) {
  return (i[f[n + 0]] + i[f[n + 1]] + i[f[n + 2]] + i[f[n + 3]] + "-" + i[f[n + 4]] + i[f[n + 5]] + "-" + i[f[n + 6]] + i[f[n + 7]] + "-" + i[f[n + 8]] + i[f[n + 9]] + "-" + i[f[n + 10]] + i[f[n + 11]] + i[f[n + 12]] + i[f[n + 13]] + i[f[n + 14]] + i[f[n + 15]]).toLowerCase();
}
let w;
const C = new Uint8Array(16);
function E() {
  if (!w) {
    if (typeof crypto == "undefined" || !crypto.getRandomValues)
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    w = crypto.getRandomValues.bind(crypto);
  }
  return w(C);
}
const h = {};
function G(f, n, x) {
  var e, r, d, u;
  let c;
  const l = (e = f == null ? void 0 : f._v6) != null ? e : !1;
  if (f) {
    const g = Object.keys(f);
    g.length === 1 && g[0] === "_v6" && (f = void 0);
  }
  if (f)
    c = A((u = (d = f.random) != null ? d : (r = f.rng) == null ? void 0 : r.call(f)) != null ? u : E(), f.msecs, f.nsecs, f.clockseq, f.node, n, x);
  else {
    const g = Date.now(), I = E();
    H(h, g, I), c = A(I, h.msecs, h.nsecs, l ? void 0 : h.clockseq, l ? void 0 : h.node, n, x);
  }
  return n ? c : m(c);
}
function H(f, n, x) {
  var c, l;
  return (c = f.msecs) != null || (f.msecs = -1 / 0), (l = f.nsecs) != null || (f.nsecs = 0), n === f.msecs ? (f.nsecs++, f.nsecs >= 1e4 && (f.node = void 0, f.nsecs = 0)) : n > f.msecs ? f.nsecs = 0 : n < f.msecs && (f.node = void 0), f.node || (f.node = x.slice(10, 16), f.node[0] |= 1, f.clockseq = (x[8] << 8 | x[9]) & 16383), f.msecs = n, f;
}
function A(f, n, x, c, l, e, r = 0) {
  if (f.length < 16)
    throw new Error("Random bytes length must be >= 16");
  if (!e)
    e = new Uint8Array(16), r = 0;
  else if (r < 0 || r + 16 > e.length)
    throw new RangeError(`UUID byte range ${r}:${r + 15} is out of buffer bounds`);
  n != null || (n = Date.now()), x != null || (x = 0), c != null || (c = (f[8] << 8 | f[9]) & 16383), l != null || (l = f.slice(10, 16)), n += 122192928e5;
  const d = ((n & 268435455) * 1e4 + x) % 4294967296;
  e[r++] = d >>> 24 & 255, e[r++] = d >>> 16 & 255, e[r++] = d >>> 8 & 255, e[r++] = d & 255;
  const u = n / 4294967296 * 1e4 & 268435455;
  e[r++] = u >>> 8 & 255, e[r++] = u & 255, e[r++] = u >>> 24 & 15 | 16, e[r++] = u >>> 16 & 255, e[r++] = c >>> 8 | 128, e[r++] = c & 255;
  for (let g = 0; g < 6; ++g)
    e[r++] = l[g];
  return e;
}
function K(f) {
  const n = typeof f == "string" ? p(f) : f, x = L(n);
  return typeof f == "string" ? m(x) : x;
}
function L(f) {
  return Uint8Array.of((f[6] & 15) << 4 | f[7] >> 4 & 15, (f[7] & 15) << 4 | (f[4] & 240) >> 4, (f[4] & 15) << 4 | (f[5] & 240) >> 4, (f[5] & 15) << 4 | (f[0] & 240) >> 4, (f[0] & 15) << 4 | (f[1] & 240) >> 4, (f[1] & 15) << 4 | (f[2] & 240) >> 4, 96 | f[2] & 15, f[3], f[8], f[9], f[10], f[11], f[12], f[13], f[14], f[15]);
}
function X(f, n, x) {
  f != null || (f = {});
  let c = G(y(R({}, f), { _v6: !0 }), new Uint8Array(16));
  return c = K(c), m(c);
}
export {
  X as v
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
